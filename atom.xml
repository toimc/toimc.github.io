<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding World</title>
  
  <subtitle>Stay hungry, stay foolish</subtitle>
  <link href="https://www.toimc.com/atom.xml" rel="self"/>
  
  <link href="https://www.toimc.com/"/>
  <updated>2021-03-20T16:23:06.921Z</updated>
  <id>https://www.toimc.com/</id>
  
  <author>
    <name>var author=&#39;Brian&#39;</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>use-docker-install-common-database</title>
    <link href="https://www.toimc.com/use-docker-install-common-database/"/>
    <id>https://www.toimc.com/use-docker-install-common-database/</id>
    <published>2021-03-20T01:42:58.000Z</published>
    <updated>2021-03-20T16:23:06.921Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了常见的数据库MySQL、Postgre、MongoDB使用docker安装方式快速安装。</p><span id="more"></span><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="docker-run命令"><a href="#docker-run命令" class="headerlink" title="docker run命令"></a>docker run命令</h3><p>配置了utf8的格式与utf8-bin的编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 -v /my/own/datadir:/var/lib/mysql lw96/mysql5.7</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>some-mysql</code>容器名称</li><li><code>MYSQL_ROOT_PASSWORD</code>设置的root用户的密码</li><li><code>-p</code>是指定<code>宿主端口:容器内服务端口</code>，默认<code>3306</code></li><li><code>lw96.mysql5.7</code>这个是我自己封装的MySQL镜像，设置好了utf8的编码</li><li><code>-v</code>设置数据库文件的映射，把宿主机上的目录<code>/my/own/datadir</code>与容器内的<code>/var/lib/mysql</code>作关联关系</li></ul><h3 id="使用docker-compose"><a href="#使用docker-compose" class="headerlink" title="使用docker-compose"></a>使用<code>docker-compose</code></h3><p>如果是<code>docker-compose.yml</code>脚本：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lw96/mysql5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&#x27;some-mysql&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=my-secret-pw</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/my/own/datadir:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Progres"><a href="#Progres" class="headerlink" title="Progres"></a>Progres</h2><h3 id="docker-run命令-1"><a href="#docker-run命令-1" class="headerlink" title="docker run命令"></a>docker run命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name postgres_container --restart=unless-stopped -p 5432:5432 -v <span class="variable">$pwd</span>/postgres:/data/postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=changeme -e PGDATA=/data/postgres postgres</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>postgres_container</code>容器名称</li><li><code>-p</code>是指定<code>宿主端口:容器内服务端口</code>，默认<code>5432</code></li><li><code>POSTGRES_USER</code>数据库用户，<code>POSTGRES_PASSWORD</code>数据库密码，<code>PGDATA</code>数据库在容器内的数据路径</li><li><code>-v</code>设置数据库文件的映射，把宿主机上的目录<code>$pwd/postgres</code>与容器内的<code>/data/postgres</code>作关联关系</li></ul><h3 id="使用docker-compose-1"><a href="#使用docker-compose-1" class="headerlink" title="使用docker-compose"></a>使用<code>docker-compose</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres_container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">$&#123;POSTGRES_USER:-postgres&#125;</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">$&#123;POSTGRES_PASSWORD:-changeme&#125;</span></span><br><span class="line">      <span class="attr">PGDATA:</span> <span class="string">/data/postgres</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">postgres:/data/postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">pgadmin:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pgadmin_container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dpage/pgadmin4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PGADMIN_DEFAULT_EMAIL:</span> <span class="string">$&#123;PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org&#125;</span></span><br><span class="line">      <span class="attr">PGADMIN_DEFAULT_PASSWORD:</span> <span class="string">$&#123;PGADMIN_DEFAULT_PASSWORD:-admin&#125;</span></span><br><span class="line">      <span class="attr">PGADMIN_CONFIG_SERVER_MODE:</span> <span class="string">&#x27;False&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">pgadmin:/root/.pgadmin</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;PGADMIN_PORT:-5050&#125;:80&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">pgadmin:</span></span><br></pre></td></tr></table></figure><p>上面的配置，会默认启动一个web的管理界面<code>pgadmin</code>，用于管理<code>postgres</code>数据。</p><ul><li>访问postgres，使用navicat填入如下的信息：<br><code>localhost:5432</code><br>用户名: <code>postgres</code> (默认)<br>密码：<code>changeme</code>（默认）</li><li>或者使用web浏览器进入PgAdmin<br>网址：<a href="http://localhost:5050/">http://localhost:5050</a><br>用户名: <a href="mailto:&#x70;&#x67;&#97;&#x64;&#109;&#105;&#110;&#x34;&#64;&#112;&#x67;&#x61;&#100;&#109;&#x69;&#x6e;&#x2e;&#111;&#x72;&#103;">&#x70;&#x67;&#97;&#x64;&#109;&#105;&#110;&#x34;&#64;&#112;&#x67;&#x61;&#100;&#109;&#x69;&#x6e;&#x2e;&#111;&#x72;&#103;</a> (默认)<br>密码：<code>admin</code>（默认)</li></ul><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="docker-run命令-2"><a href="#docker-run命令-2" class="headerlink" title="docker run命令"></a>docker run命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mongodb -p 27017:27017 -v /data/db:/data/db --restart=always -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=changeme mongo</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p><code>mongodb</code>容器名称</p></li><li><p><code>-p</code>是指定<code>宿主端口:容器内服务端口</code>，默认<code>27017</code></p></li><li><p><code>-v</code>设置数据库文件的映射</p></li><li><p><code>MONGO_INITDB_ROOT_USERNAME</code>数据库初始的管理员用户名，<code>MONGO_INITDB_ROOT_PASSWORD</code>初始的管理员密码</p></li></ul><h3 id="使用docker-compose-2"><a href="#使用docker-compose-2" class="headerlink" title="使用docker-compose"></a>使用<code>docker-compose</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&#x27;mongodb&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=changeme</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/home/mongo/data/db:/data/db</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了常见的数据库MySQL、Postgre、MongoDB使用docker安装方式快速安装。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker入门" scheme="https://www.toimc.com/categories/Docker%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="mysql" scheme="https://www.toimc.com/tags/mysql/"/>
    
    <category term="docker" scheme="https://www.toimc.com/tags/docker/"/>
    
    <category term="progres" scheme="https://www.toimc.com/tags/progres/"/>
    
    <category term="mongoDB" scheme="https://www.toimc.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题next中gitalk配置与评论初始化</title>
    <link href="https://www.toimc.com/hexo-usage-3/"/>
    <id>https://www.toimc.com/hexo-usage-3/</id>
    <published>2021-03-19T09:41:16.000Z</published>
    <updated>2021-03-19T17:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的环境是hexo 5.x版本，next 8.x主题，介绍在next主题中如何配置gitalk与评论初始化，缓存issues初始化结果，加速初始化过程，解决问题：“未找到相关的 Issues 进行评论，请联系xxx初始化创建”和“Request failed with status code 403”。</p><span id="more"></span><p>基本的流程：</p><ul><li>申请Github账号 —— OAuth应用</li><li>配置gitalk</li><li>申请Github - Token</li><li>配置自动化脚本</li><li>配置nginx（解决403问题）</li><li>测试</li></ul><h2 id="next配置gitalk"><a href="#next配置gitalk" class="headerlink" title="next配置gitalk"></a><code>next</code>配置gitalk</h2><p>在next项目<code>_config.yml</code>中，已经有明确的配置项：</p><p>第一个地方，需要注意配置gitalk与其他评论工具的顺序以及默认的评论工具。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Modify texts or order for any navs, here are some examples.</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="attr">gitalk:</span></span><br><span class="line">     <span class="attr">order:</span> <span class="number">-2</span></span><br><span class="line">    <span class="attr">disqusjs:</span></span><br><span class="line">     <span class="attr">text:</span> <span class="string">Load</span> <span class="string">Disqus</span></span><br><span class="line">     <span class="attr">order:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>第二个地方：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">toimc</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">toimc.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">c2d14f07d902bf339af2</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">a41a05429a0ca340152b13fccx48245674437ba7</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">toimc</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># When the official proxy is not available, you can change it to your own proxy address</span></span><br><span class="line">  <span class="attr">proxy:</span> <span class="string">/login/oauth/access_token</span> <span class="comment"># This is official proxy adress</span></span><br><span class="line">  <span class="comment"># proxy: https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token # This is official proxy adress</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>上面的配置项中有几个需要说明的：</p><ul><li><code>client_id</code>与<code>client_secret</code>是Github 的 OAuth 认证（下面会介绍）</li><li><code>github_id</code>与<code>admin_user</code>这里建议填一样，填成自己的github账号名（不是邮箱）</li><li><code>proxy</code>默认即是上面的地址，它其实会回调到这里<code>https://github.com/login/oauth/access_token</code>来，大家出403的问题，主要是由于跨域。</li></ul><h2 id="Github的OAuth-认证"><a href="#Github的OAuth-认证" class="headerlink" title="Github的OAuth 认证"></a>Github的OAuth 认证</h2><p>前提是自己得有一个<a href="https://github.com/">github</a>账号，才能注册OAuth application，<a href="https://github.com/settings/applications/new">OAuth应用注册地址</a></p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/hexo-usage-3/blog-1.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/hexo-usage-3/blog-2.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><h2 id="gitalk自动初始化"><a href="#gitalk自动初始化" class="headerlink" title="gitalk自动初始化"></a>gitalk自动初始化</h2><p>原理：通过sitemap中的信息，请求github开放api达到自动产生issues的目的</p><p>基本的要求：github API需要请求token</p><h3 id="申请github-Token"><a href="#申请github-Token" class="headerlink" title="申请github Token"></a>申请github Token</h3><p>我们需要使用 Personal access tokens 方式，这种方式限制每小时 5000 次，结合缓存功能，基本满足需求。</p><p>从 Github 的 <a href="https://github.com/settings/tokens">Personal access tokens</a> 页面，点击 <a href="https://github.com/settings/tokens/new">Generate new token</a></p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/hexo-usage-3/blog-3.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><h3 id="安装npm依赖项"><a href="#安装npm依赖项" class="headerlink" title="安装npm依赖项"></a>安装npm依赖项</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hexo-generator-sitemap&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;md5&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;request&quot;</span>: <span class="string">&quot;^2.88.2&quot;</span>,</span><br><span class="line"><span class="string">&quot;xml-parser&quot;</span>: <span class="string">&quot;^1.2.1&quot;</span></span><br></pre></td></tr></table></figure><p>安装命令：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -D md5 moment request xml-parser</span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> i -S hexo-generator-sitemap</span><br></pre></td></tr></table></figure><h3 id="配置sitemap"><a href="#配置sitemap" class="headerlink" title="配置sitemap"></a>配置sitemap</h3><h4 id="在根目录中创建sitemap-template-xml"><a href="#在根目录中创建sitemap-template-xml" class="headerlink" title="在根目录中创建sitemap_template.xml"></a>在根目录中创建<code>sitemap_template.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span>&gt;</span></span><br><span class="line">  &#123;% for post in posts %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>&#123;&#123; post.permalink | uriencode &#125;&#125;<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    &#123;% if post.updated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>&#123;&#123; post.updated.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    &#123;% elif post.date %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>&#123;&#123; post.date.toISOString() &#125;&#125;<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">date</span>&gt;</span>&#123;&#123; post.date &#125;&#125;<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; post.title + &#x27; | &#x27; + config.title &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;# nunjucks 模版语法 https://github.com/mozilla/nunjucks #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">desc</span>&gt;</span>&#123;&#123; post.description | default(post.excerpt) | default(post.content) | default(config.description) | striptags | truncate(200, true, &#x27;&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改根-config-yml"><a href="#修改根-config-yml" class="headerlink" title="修改根_config.yml"></a>修改根<code>_config.yml</code></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line">  <span class="attr">template:</span> <span class="string">./sitemap_template.xml</span></span><br><span class="line">  <span class="attr">rel:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">category:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="生成sitemap-xml文件"><a href="#生成sitemap-xml文件" class="headerlink" title="生成sitemap.xml文件"></a>生成<code>sitemap.xml</code>文件</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><h3 id="根目录添加talk-auto-init-js"><a href="#根目录添加talk-auto-init-js" class="headerlink" title="根目录添加talk-auto-init.js"></a>根目录添加<code>talk-auto-init.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> xmlParser = <span class="built_in">require</span>(<span class="string">&#x27;xml-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置信息</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  username: <span class="string">&#x27;toimc&#x27;</span>, <span class="comment">// GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</span></span><br><span class="line">  repo: <span class="string">&quot;toimc.github.io&quot;</span>, <span class="comment">// 储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</span></span><br><span class="line">  token: <span class="string">&#x27;xxxxxx&#x27;</span>, <span class="comment">// 前面申请的 personal access token</span></span><br><span class="line">  sitemap: path.join(__dirname, <span class="string">&#x27;./public/sitemap.xml&#x27;</span>), <span class="comment">// 自己站点的 sitemap 文件地址</span></span><br><span class="line">  cache: <span class="literal">true</span>, <span class="comment">// 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span></span><br><span class="line">  gitalkCacheFile: path.join(__dirname, <span class="string">&#x27;./gitalk-init-cache.json&#x27;</span>), <span class="comment">// 用于保存 gitalk 已经初始化的 id 列表</span></span><br><span class="line">  gitalkErrorFile: path.join(__dirname, <span class="string">&#x27;./gitalk-init-error.json&#x27;</span>), <span class="comment">// 用于保存 gitalk 初始化报错的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="string">&#x27;https://api.github.com/repos/&#x27;</span> + config.username + <span class="string">&#x27;/&#x27;</span> + config.repo + <span class="string">&#x27;/issues&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 读取 sitemap 文件</span></span><br><span class="line"><span class="comment">* 远程 sitemap 文件获取可参考 https://www.npmjs.com/package/sitemapper</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> sitemapXmlReader = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = fs.readFileSync(file, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> sitemap = xmlParser(data);</span><br><span class="line">    <span class="keyword">let</span> ret = [];</span><br><span class="line">    sitemap.root.children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> loc = url.children.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.name === <span class="string">&#x27;loc&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!loc) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> title = url.children.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.name === <span class="string">&#x27;title&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> desc = url.children.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.name === <span class="string">&#x27;desc&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> date = url.children.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.name === <span class="string">&#x27;date&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      ret.push(&#123;</span><br><span class="line">        url: loc.content,</span><br><span class="line">        title: title.content,</span><br><span class="line">        desc: desc.content,</span><br><span class="line">        date: date.content,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 gitalk 使用的 id</span></span><br><span class="line"><span class="keyword">const</span> getGitalkId = (&#123;</span><br><span class="line">  url: u,</span><br><span class="line">  date</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> link = url.parse(u);</span><br><span class="line">  <span class="comment">// 链接不存在，不需要初始化</span></span><br><span class="line">  <span class="keyword">if</span> (!link || !link.pathname) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> md5(link.pathname);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过以请求判断是否已经初始化</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>gitalk 初始化的id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return <span class="type">&#123;[boolean, boolean]&#125;</span> </span>第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> getIsInitByRequest = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.token,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    url: api + <span class="string">&#x27;?labels=&#x27;</span> + id + <span class="string">&#x27;,Gitalk&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    request(options, <span class="function"><span class="keyword">function</span> (<span class="params">err, response, body</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve([err, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve([response, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">      <span class="keyword">if</span> (res.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resolve([<span class="literal">false</span>, <span class="literal">false</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过缓存判断是否已经初始化</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>gitalk 初始化的id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> getIsInitByCache = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断缓存文件是否存在</span></span><br><span class="line">  <span class="keyword">let</span> gitalkCache = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    gitalkCache = <span class="built_in">require</span>(config.gitalkCacheFile);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!gitalkCache) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gitalkCache.find((&#123;</span><br><span class="line">        id: itemId</span><br><span class="line">      &#125;) =&gt; (itemId === id))) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据缓存，判断链接是否已经初始化</span></span><br><span class="line"><span class="comment">// 第一个值表示是否出错，第二个值 false 表示没初始化， true 表示已经初始化</span></span><br><span class="line"><span class="keyword">const</span> idIsInit = <span class="keyword">async</span> (id) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!config.cache) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> getIsInitByRequest(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果通过缓存查询到的数据是未初始化，则再通过请求判断是否已经初始化，防止多次初始化</span></span><br><span class="line">  <span class="keyword">if</span> (getIsInitByCache(id) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> getIsInitByRequest(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [<span class="literal">false</span>, <span class="literal">true</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> gitalkInit = (&#123;</span><br><span class="line">  url,</span><br><span class="line">  id,</span><br><span class="line">  title,</span><br><span class="line">  desc</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="comment">//创建issue</span></span><br><span class="line">  <span class="keyword">const</span> reqBody = &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: title,</span><br><span class="line">    <span class="string">&#x27;labels&#x27;</span>: [id, <span class="string">&#x27;Gitalk&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span>: url + <span class="string">&#x27;\r\n\r\n&#x27;</span> + desc</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;token &#x27;</span> + config.token,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    url: api,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(reqBody),</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    request(options, <span class="function"><span class="keyword">function</span> (<span class="params">err, response, body</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve([err, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.statusCode != <span class="number">201</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve([response, <span class="literal">false</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resolve([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 写入内容</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>fileName 文件名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>content 内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> write = <span class="keyword">async</span> (fileName, content, flag = <span class="string">&#x27;w+&#x27;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.open(fileName, flag, <span class="function"><span class="keyword">function</span> (<span class="params">err, fd</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        resolve([err, <span class="literal">false</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      fs.writeFile(fd, content, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          resolve([err, <span class="literal">false</span>]);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.close(fd, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            resolve([err, <span class="literal">false</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        resolve([<span class="literal">false</span>, <span class="literal">true</span>]);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> init = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> urls = sitemapXmlReader(config.sitemap);</span><br><span class="line">  <span class="comment">// 报错的数据</span></span><br><span class="line">  <span class="keyword">const</span> errorData = [];</span><br><span class="line">  <span class="comment">// 已经初始化的数据</span></span><br><span class="line">  <span class="keyword">const</span> initializedData = [];</span><br><span class="line">  <span class="comment">// 成功初始化数据</span></span><br><span class="line">  <span class="keyword">const</span> successData = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      url,</span><br><span class="line">      date,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125; = item;</span><br><span class="line">    <span class="keyword">const</span> id = getGitalkId(&#123;</span><br><span class="line">      url,</span><br><span class="line">      date</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`id: 生成失败 [ <span class="subst">$&#123;id&#125;</span> ] `</span>);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: <span class="string">&#x27;id 生成失败&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [err, res] = <span class="keyword">await</span> idIsInit(id);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Error: 查询评论异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, err || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: <span class="string">&#x27;查询评论异常&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(`--- Gitalk 已经初始化 --- [ $&#123;title&#125; ] `);</span></span><br><span class="line">      initializedData.push(&#123;</span><br><span class="line">        id,</span><br><span class="line">        url,</span><br><span class="line">        title,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Gitalk 初始化开始... [ <span class="subst">$&#123;title&#125;</span> ] `</span>);</span><br><span class="line">    <span class="keyword">const</span> [e, r] = <span class="keyword">await</span> gitalkInit(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">      desc</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (e || !r) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Error: Gitalk 初始化异常 [ <span class="subst">$&#123;title&#125;</span> ] , 信息：`</span>, e || <span class="string">&#x27;无&#x27;</span>);</span><br><span class="line">      errorData.push(&#123;</span><br><span class="line">        ...item,</span><br><span class="line">        info: <span class="string">&#x27;初始化异常&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    successData.push(&#123;</span><br><span class="line">      id,</span><br><span class="line">      url,</span><br><span class="line">      title,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Gitalk 初始化成功! [ <span class="subst">$&#123;title&#125;</span> ] - <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;--------- 运行结果 ---------&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 空输出，用于换行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (errorData.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`报错数据： <span class="subst">$&#123;errorData.length&#125;</span> 条。参考文件 <span class="subst">$&#123;config.gitalkErrorFile&#125;</span>。`</span>);</span><br><span class="line">    <span class="keyword">await</span> write(config.gitalkErrorFile, <span class="built_in">JSON</span>.stringify(errorData, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入缓存</span></span><br><span class="line">  <span class="keyword">if</span> (config.cache) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`写入缓存： <span class="subst">$&#123;(initializedData.length + successData.length)&#125;</span> 条，已初始化 <span class="subst">$&#123;initializedData.length&#125;</span> 条，本次成功： <span class="subst">$&#123;successData.length&#125;</span> 条。参考文件 <span class="subst">$&#123;config.gitalkCacheFile&#125;</span>。`</span>);</span><br><span class="line">    <span class="keyword">await</span> write(config.gitalkCacheFile, <span class="built_in">JSON</span>.stringify(initializedData.concat(successData), <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`已初始化： <span class="subst">$&#123;initializedData.length&#125;</span> 条。`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>修改<code>scripts</code>中的脚本，添加<code>&quot;talk&quot;: &quot;node talk-auto-init.js&quot;</code>：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span>,</span><br><span class="line">  <span class="string">&quot;publish&quot;</span>: <span class="string">&quot;hexo g &amp;&amp; hexo s&quot;</span>,</span><br><span class="line">  <span class="string">&quot;d&quot;</span>: <span class="string">&quot;npm run prod &amp;&amp; hexo deploy &amp;&amp; npm run talk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;talk&quot;</span>: <span class="string">&quot;node talk-auto-init.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> talk</span><br></pre></td></tr></table></figure><p>已经缓存过后的结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜ npm run talk</span><br><span class="line"></span><br><span class="line">&gt; hexo-site@<span class="number">2.0</span>.<span class="number">0</span> talk <span class="regexp">/Users/m</span>acos<span class="regexp">/Projects/</span>hexo-blog</span><br><span class="line">&gt; node talk-auto-init.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------- 运行结果 ---------</span><br><span class="line"></span><br><span class="line">本次成功： <span class="number">0</span> 条。</span><br><span class="line">写入缓存： <span class="number">73</span> 条，已初始化 <span class="number">73</span> 条，本次成功： <span class="number">0</span> 条。参考文件 ~/gitalk-init-cache.json。</span><br></pre></td></tr></table></figure><h2 id="403错误"><a href="#403错误" class="headerlink" title="403错误"></a>403错误</h2><h3 id="nginx解决方案（推荐）"><a href="#nginx解决方案（推荐）" class="headerlink" title="nginx解决方案（推荐）"></a>nginx解决方案（推荐）</h3><p>在nginx的博客配置中加入如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> = /login/oauth/access_token &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin &#x27;https://www.toimc.com&#x27;; // 这里改成你自己的域名，并删除注释</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span>;</span><br><span class="line">        <span class="attribute">if</span> ($request_method = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">              <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://github.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自建一个workers"><a href="#自建一个workers" class="headerlink" title="自建一个workers"></a>自建一个workers</h3><p>地址：<a href="https://workers.cloudflare.com/">CloudFlare Workers</a></p><p>参考项目：<a href="Zibri/cloudflare-cors-anywhere">Zibri/cloudflare-cors-anywhere</a></p><p>比如我们部署的地址：<a href="https://github-proxy.toimc.workers.dev/https://github.com/login/oauth/access_token">右键复制 Link</a> 大家也可以使用</p><p>参考文章：<a href="https://blog.dsrkafuu.su/post/2020/cloudflare-worker-cors-anywhere/">使用 CloudFlare Workers 实现 CORS Anywhere</a></p><h3 id="使用其他人搭建的代理"><a href="#使用其他人搭建的代理" class="headerlink" title="使用其他人搭建的代理"></a>使用其他人搭建的代理</h3><p>比如这个<a href="https://github.com/gitalk/gitalk/issues/429">issues</a>介绍到的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>shielded-brushlands-<span class="number">08810</span>.herokuapp.com<span class="regexp">/https:/</span><span class="regexp">/github.com/</span>login<span class="regexp">/oauth/</span>access_token</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文的环境是hexo 5.x版本，next 8.x主题，介绍在next主题中如何配置gitalk与评论初始化，缓存issues初始化结果，加速初始化过程，解决问题：“未找到相关的 Issues 进行评论，请联系xxx初始化创建”和“Request failed with status code 403”。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo博客代码折叠功能</title>
    <link href="https://www.toimc.com/hexo-usage-2/"/>
    <id>https://www.toimc.com/hexo-usage-2/</id>
    <published>2021-03-19T06:59:48.000Z</published>
    <updated>2021-03-19T08:23:52.354Z</updated>
    
    <content type="html"><![CDATA[<p>在Heox中即使再长的代码，默认发布出来很长，也不会进行折叠。这怎么能忍？本文介绍如何在Hexo中实现类型代码折叠功能，让文章看起来更加清爽</p><span id="more"></span><h2 id="先上效果"><a href="#先上效果" class="headerlink" title="先上效果"></a>先上效果</h2><p>费话不多说，看看效果：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/hexo-usage-2/fold.gif?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>本博客目前采用的方案，即是这种。</p><h2 id="前题-amp-思路"><a href="#前题-amp-思路" class="headerlink" title="前题&amp;思路"></a>前题&amp;思路</h2><p>本博客环境：<code>hexo@5.4.0</code>，<code>next@8.2.2</code>，以下所有代码，建立在这个基础之上。</p><p>由 jQuery 选择器选择代码模块<code>.highlight</code>相关的DOM节点，给超过某个高度的代码模块添加展开收起的盒子，让盒子实现展开隐藏效果。</p><h2 id="折叠逻辑"><a href="#折叠逻辑" class="headerlink" title="折叠逻辑"></a>折叠逻辑</h2><h3 id="添加code-unfold-js"><a href="#添加code-unfold-js" class="headerlink" title="添加code-unfold.js"></a>添加<code>code-unfold.js</code></h3><p>由于是在<code>next</code>主题中添加js逻辑，所以我们把<code>code-unfold.js</code>放置在了<code>themes/next/source/js/code-unfold.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CODE_MAX_HEIGHT = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> containers = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.js_unfold_code_btn&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">this</span>).closest(<span class="string">&#x27;.js_highlight_container&#x27;</span>).addClass(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 收起</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.js_retract_code_btn&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $container = $(<span class="built_in">this</span>).closest(<span class="string">&#x27;.js_highlight_container&#x27;</span>).removeClass(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> winTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">  <span class="keyword">var</span> offsetTop = $container.offset().top;</span><br><span class="line">  $(<span class="built_in">this</span>).css(<span class="string">&#x27;top&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (winTop &gt; offsetTop) &#123;</span><br><span class="line">    <span class="comment">// 设置滚动条位置</span></span><br><span class="line">    $(<span class="string">&#x27;body, html&#x27;</span>).animate(&#123;</span><br><span class="line">      scrollTop: $container.offset().top - CODE_MAX_HEIGHT</span><br><span class="line">    &#125;, <span class="number">600</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 滚动事件，触发动画效果</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">  <span class="keyword">var</span> temp = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; containers.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = containers[i];</span><br><span class="line">    <span class="keyword">var</span> &#123; $container, height, $hide, hasHorizontalScrollbar &#125; = item;</span><br><span class="line">    <span class="keyword">if</span> ($container.closest(<span class="string">&#x27;body&#x27;</span>).length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果 $container 元素已经不在页面上, 则删除该元素</span></span><br><span class="line">      <span class="comment">// 防止pjax页面跳转之后，元素未删除</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.push(item);</span><br><span class="line">    <span class="keyword">if</span> (!$container.hasClass(<span class="string">&#x27;on&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> offsetTop = $container.offset().top;</span><br><span class="line">    <span class="keyword">var</span> hideBtnHeight = $hide.outerHeight();</span><br><span class="line">    <span class="comment">// 减去按钮高度，减去底部滚动条高度</span></span><br><span class="line">    <span class="keyword">var</span> maxTop = <span class="built_in">parseInt</span>(height - (hasHorizontalScrollbar ? <span class="number">17</span> : <span class="number">0</span>) - hideBtnHeight);</span><br><span class="line">    <span class="keyword">let</span> top = <span class="built_in">parseInt</span>(</span><br><span class="line">      <span class="built_in">Math</span>.min(</span><br><span class="line">        <span class="built_in">Math</span>.max(scrollTop - offsetTop, <span class="number">0</span>), <span class="comment">// 如果小于 0 ，则取 0</span></span><br><span class="line">        maxTop,<span class="comment">// 如果大于 height ，则取 height</span></span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 根据 sin 曲线设置&quot;收起代码&quot;位置</span></span><br><span class="line">    <span class="keyword">var</span> halfHeight = <span class="built_in">parseInt</span>($(<span class="built_in">window</span>).height() / <span class="number">2</span> * <span class="built_in">Math</span>.sin((top / maxTop) * <span class="number">90</span> * (<span class="number">2</span> * <span class="built_in">Math</span>.PI/<span class="number">360</span>)));</span><br><span class="line">    $hide.css(<span class="string">&#x27;top&#x27;</span>, <span class="built_in">Math</span>.min(top + halfHeight, maxTop));</span><br><span class="line">  &#125;</span><br><span class="line">  containers = temp;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加隐藏容器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCodeWrap</span>(<span class="params">$node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $container = $node.wrap(<span class="string">&#x27;&lt;div class=&quot;js_highlight_container highlight-container&quot;&gt;&lt;div class=&quot;highlight-wrap&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>).closest(<span class="string">&#x27;.js_highlight_container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 底部 &quot;展开代码&quot; 与 侧边栏 &quot;收起代码&quot;</span></span><br><span class="line">  <span class="keyword">var</span> $btn = $(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;highlight-footer&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;a class=&quot;js_unfold_code_btn show-btn&quot; href=&quot;javascript:;&quot;&gt;展开代码&lt;i class=&quot;fa fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;a class=&quot;js_retract_code_btn hide-btn&quot; href=&quot;javascript:;&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;收起代码&lt;/a&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line"></span><br><span class="line">  $container.append($btn);</span><br><span class="line">  <span class="keyword">return</span> $container;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeUnfold</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;.highlight&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 防止重复渲染</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.__render__ === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.__render__ = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> $this = $(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">var</span> height = $(<span class="built_in">this</span>).outerHeight();</span><br><span class="line">    <span class="keyword">if</span> (height &gt; CODE_MAX_HEIGHT) &#123;</span><br><span class="line">      <span class="comment">// 添加展开&amp;收起容器</span></span><br><span class="line">      <span class="keyword">var</span> $container = addCodeWrap($this, height);</span><br><span class="line">      containers.push(&#123;</span><br><span class="line">        $container,</span><br><span class="line">        height,</span><br><span class="line">        $hide: $container.find(<span class="string">&#x27;.js_retract_code_btn&#x27;</span>),</span><br><span class="line">        hasHorizontalScrollbar: <span class="built_in">this</span>.scrollWidth &gt; <span class="built_in">this</span>.offsetWidth,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="添加jquery"><a href="#添加jquery" class="headerlink" title="添加jquery"></a>添加<code>jquery</code></h3><p>由于需要使用<code>jquery</code>在<code>next</code>主题文件中</p><p>方案一：</p><p>修改配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>因为<code>fancybox</code>会依赖<code>jquery</code>，所以设置成<code>true</code></p><p>方案二：在<code>next</code>主题全局引用jquery</p><h3 id="引用code-unfold-js"><a href="#引用code-unfold-js" class="headerlink" title="引用code-unfold.js"></a>引用<code>code-unfold.js</code></h3><p>修改文件<code>themes/next/layout/_scripts/index.njk</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在最后添加</span></span><br><span class="line">&#123;&#123;- next_js(<span class="string">&#x27;code-unfold.js&#x27;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><p>下面找到文件<code>themes/next/source/js/next-boot.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NexT.boot.refresh = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加一行代码</span></span><br><span class="line">  codeUnfold()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h2><h3 id="创建highlight-styl"><a href="#创建highlight-styl" class="headerlink" title="创建highlight.styl"></a>创建<code>highlight.styl</code></h3><p>可以添加<code>theme/next/source/css/_common/components/highlight.styl</code>文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开收起效果</span></span><br><span class="line">.highlight-container</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  <span class="attribute">background-color</span>: highlight-background</span><br><span class="line">  &amp;.on</span><br><span class="line">    .highlight-footer</span><br><span class="line">      <span class="attribute">display</span>: none</span><br><span class="line">    .hide-btn</span><br><span class="line">      <span class="attribute">display</span>: flex</span><br><span class="line">    .highlight-wrap</span><br><span class="line">      <span class="attribute">max-height</span>: none</span><br><span class="line">  .highlight-wrap</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">200px</span></span><br><span class="line">  .highlight-footer</span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="string">&#x27;linear-gradient(-180deg, rgba(255,255,255,0) 0%, %s 65%)&#x27;</span> % highlight-background;</span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line">  .show-btn</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">    <span class="attribute">position</span>: absolute</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span></span><br><span class="line">    <span class="attribute">transform</span>: translateX(-<span class="number">50%</span>)</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2em</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.8em</span></span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span></span><br><span class="line">    &amp;:hover</span><br><span class="line">      <span class="attribute">text-decoration</span>: none</span><br><span class="line">  .hide-btn</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">22px</span></span><br><span class="line">    <span class="attribute">position</span>: absolute</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">21px</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1em</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">    <span class="attribute">flex-direction</span>: column</span><br><span class="line">    <span class="attribute">background-color</span>: highlight-background</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1em</span> <span class="number">0</span> <span class="number">0.6em</span></span><br><span class="line">    <span class="attribute">transition</span>: top ease <span class="number">0.35s</span></span><br><span class="line">  <span class="selector-class">.fa-angle-up</span>,</span><br><span class="line">  .fa-angle-down</span><br><span class="line">    <span class="attribute">font-style</span>: normal</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">  <span class="selector-class">.fa-angle-up</span>:before</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;\f106&quot;</span></span><br><span class="line">  <span class="selector-class">.fa-angle-down</span>:before</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;\f107&quot;</span></span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0.5em</span></span><br><span class="line">  <span class="selector-class">.js_unfold_code_btn</span>, .js_retract_code_btn</span><br><span class="line">    <span class="attribute">background</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span></span><br><span class="line">    &amp;:hover</span><br><span class="line">      <span class="attribute">border-bottom-color</span>: none <span class="meta">!important</span></span><br></pre></td></tr></table></figure><h3 id="引用样式"><a href="#引用样式" class="headerlink" title="引用样式"></a>引用样式</h3><p>找到文件<code>themes/next/source/css/_common/scaffolding/index.styl</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@import &#x27;tags&#x27;;</span><br><span class="line">@import &#x27;pagination&#x27;;</span><br><span class="line">@import &#x27;comments&#x27;;</span><br><span class="line"><span class="comment">// 添加这一行</span></span><br><span class="line">@import &#x27;darkmode&#x27;;</span><br></pre></td></tr></table></figure><p>至此，我们就完成了hexo博客长代码折叠功能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Heox中即使再长的代码，默认发布出来很长，也不会进行折叠。这怎么能忍？本文介绍如何在Hexo中实现类型代码折叠功能，让文章看起来更加清爽&lt;/p&gt;</summary>
    
    
    
    <category term="hexo博客进阶玩法" scheme="https://www.toimc.com/categories/hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E7%8E%A9%E6%B3%95/"/>
    
    
    <category term="node.js" scheme="https://www.toimc.com/tags/node-js/"/>
    
    <category term="hexo" scheme="https://www.toimc.com/tags/hexo/"/>
    
    <category term="next" scheme="https://www.toimc.com/tags/next/"/>
    
    <category term="前端" scheme="https://www.toimc.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客next主题添加夜间模式（Dark Mode）</title>
    <link href="https://www.toimc.com/hexo-usage-1/"/>
    <id>https://www.toimc.com/hexo-usage-1/</id>
    <published>2021-03-19T05:35:09.000Z</published>
    <updated>2021-03-19T08:54:32.730Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍为hexo next主题添加一个可以切换的黑色/夜间模式，虽然next 8.0 主题已经支持原生黑色模式，但是这个黑色模式是不可以切换的。本文介绍如何实现按钮来切换，包括如何在代码部分也切换夜间模式。</p><span id="more"></span><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>费话不多说，先上效果</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/hexo-usage-1/dark.gif?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>特点：</p><ul><li>代码部分进行Dark/Light模式切换</li><li>切换有动画</li><li>对<code>code</code>部分进行优化</li></ul><h2 id="前题"><a href="#前题" class="headerlink" title="前题"></a>前题</h2><p>首先，你要确定自己的Hexo与next的版本：</p><p>Hexo在这里：<a href="https://github.com/hexojs/hexo">hexojs/hexo</a>，我们使用的版本是：<code>5.4.0</code></p><p>Next主题在这里：<a href="https://github.com/next-theme/hexo-theme-next">next-theme/hexo-theme-next</a>，我们使用的版本是：<code>8.2.2</code></p><p>虽然next 8.0 主题已经支持原生黑色模式，只需要在<code>_config.yml</code>文件中，将相应开关打开<code>darkmode: true</code>即可。</p><p>但是这个黑色模式是不可以切换的，本文将介绍如何实现一个按钮来切换黑/白模式。</p><p>我们使用的主题是：<code>scheme: Mist</code>，其他类似思路进行调整。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>思路：</p><ol><li>使用第三方的包实现切换darkmode主题</li><li>切用next主题已经有的dark模式，为代码高亮部分添加样式</li></ol><h3 id="了解darkmode-js"><a href="#了解darkmode-js" class="headerlink" title="了解darkmode.js"></a>了解darkmode.js</h3><p>我们主要使用到了这个库<a href="https://github.com/sandoche/Darkmode.js">Darkmode.js</a> 来实现整体切换效果，在官方的github上有<a href="https://github.com/sandoche/Darkmode.js#-how-to-use">使用方式</a>的介绍。</p><h3 id="下载并配置next主题"><a href="#下载并配置next主题" class="headerlink" title="下载并配置next主题"></a>下载并配置next主题</h3><p>我们要集成到hexo中时，需要考虑是使用本地的js还是cdn的js，我的方式是<a href="https://github.com/sandoche/Darkmode.js/blob/master/lib/darkmode-js.min.js">下载</a>到lib目录中，使用本地的，以免出现后续的依赖问题。</p><p>在 <code>themes/next/_vendors.yml</code> 中指定<code>darkmode-js</code>的文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">darkmode_js:</span></span><br><span class="line"><span class="symbol">  name:</span> darkmode-js</span><br><span class="line"><span class="symbol">  version:</span> <span class="number">1.5</span><span class="number">.7</span></span><br><span class="line"><span class="symbol">  file:</span> lib/darkmode-js.min.js</span><br></pre></td></tr></table></figure><p>在<code>next</code>主题的的 <code>_config.yml</code>文件中，添加<code>darkmode_js</code>的相关开关：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="comment"># 使用CDN可选，darkmode_js: https://cdn.jsdelivr.net/npm/darkmode-js/lib/darkmode-js.min.js</span></span><br><span class="line">  <span class="attr">darkmode_js:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># darkmode.js</span></span><br><span class="line"><span class="attr">darkmode_js:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>注意缩进！第一个darkmode_js是在vendors栏目下，第二个darkmode_js是一个单独的栏目。</p></blockquote><h3 id="修改主题模板"><a href="#修改主题模板" class="headerlink" title="修改主题模板"></a>修改主题模板</h3><p>打开 <code>themes/next/layout/_scripts/vendors.njk</code>，配置以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> theme.canvas_ribbon.enable %&#125;</span><br><span class="line">  &lt;script size=<span class="string">&quot;&#123;&#123; theme.canvas_ribbon.size &#125;&#125;&quot;</span> alpha=<span class="string">&quot;&#123;&#123; theme.canvas_ribbon.alpha &#125;&#125;&quot;</span> zIndex=<span class="string">&quot;&#123;&#123; theme.canvas_ribbon.zIndex &#125;&#125;&quot;</span> src=<span class="string">&quot;&#123;&#123; theme.vendors.canvas_ribbon &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Customize darkmode.js - Declaration #&#125;</span><br><span class="line">&#123;%- <span class="keyword">if</span> theme.darkmode_js.enable %&#125;</span><br><span class="line">  &lt;script src=<span class="string">&quot;&#123;&#123; theme.vendors.darkmode_js &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- <span class="keyword">for</span> name <span class="keyword">in</span> js_vendors() %&#125;</span><br><span class="line">  &lt;script src=<span class="string">&quot;&#123;&#123; url_for(theme.vendors[name]) &#125;&#125;&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Customize darkmode.js - Invokation #&#125;</span><br><span class="line">&#123;%- <span class="keyword">if</span> theme.darkmode_js.enable %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  bottom: <span class="string">&#x27;64px&#x27;</span>, <span class="comment">// default: &#x27;32px&#x27;</span></span><br><span class="line">  right: <span class="string">&#x27;unset&#x27;</span>, <span class="comment">// default: &#x27;32px&#x27;</span></span><br><span class="line">  left: <span class="string">&#x27;32px&#x27;</span>, <span class="comment">// default: &#x27;unset&#x27;</span></span><br><span class="line">  time: <span class="string">&#x27;0.5s&#x27;</span>, <span class="comment">// default: &#x27;0.3s&#x27;</span></span><br><span class="line">  mixColor: <span class="string">&#x27;#fff&#x27;</span>, <span class="comment">// default: &#x27;#fff&#x27;</span></span><br><span class="line">  backgroundColor: <span class="string">&#x27;#fff&#x27;</span>,  <span class="comment">// default: &#x27;#fff&#x27;</span></span><br><span class="line">  buttonColorDark: <span class="string">&#x27;#100f2c&#x27;</span>,  <span class="comment">// default: &#x27;#100f2c&#x27;</span></span><br><span class="line">  buttonColorLight: <span class="string">&#x27;#fff&#x27;</span>, <span class="comment">// default: &#x27;#fff&#x27;</span></span><br><span class="line">  saveInCookies: <span class="literal">true</span>, <span class="comment">// default: true,</span></span><br><span class="line">  label: <span class="string">&#x27;🌓&#x27;</span>, <span class="comment">// default: &#x27;&#x27;</span></span><br><span class="line">  autoMatchOsTheme: <span class="literal">true</span> <span class="comment">// default: true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> darkmode = <span class="keyword">new</span> Darkmode(options);</span><br><span class="line">darkmode.showWidget();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>这里主要是在全局加入了一段初始化<code>darkmode-js</code>的代码。</p><p>重新生成即可开启:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="meta">&amp;&amp; hexo g</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>初步效果</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/hexo-usage-1/dark-1.gif?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>致命问题，没有对代码块<code>highlight</code>部分生效。</p><h3 id="代码Dark主题"><a href="#代码Dark主题" class="headerlink" title="代码Dark主题"></a>代码Dark主题</h3><p>从<code>next</code>的8.0开始，已经有了dark主题，直接可以<code>_config.xml</code>，参考：<a href="https://github.com/theme-next/hexo-theme-next/issues/1395">issues#1395</a></p><p>但是，按照官方的设置了之后，无法动态的切换了。</p><p>继续深挖<a href="https://github.com/next-theme/hexo-theme-next/commit/03e50d01ac59d136d8d9ccda187d898c0e424332">官方的代码</a>，有一个非常重要的文件<code>source/css/_colors.styl</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --<span class="selector-tag">body</span>-bg-<span class="attribute">color</span>: $body-bg-color;</span><br><span class="line">  --<span class="attribute">content</span>-bg-<span class="attribute">color</span>: $content-bg-color;</span><br><span class="line">  --card-bg-<span class="attribute">color</span>: $card-bg-color;</span><br><span class="line">  --text-<span class="attribute">color</span>: $text-color;</span><br><span class="line">  --<span class="selector-tag">blockquote</span>-<span class="attribute">color</span>: $blockquote-color;</span><br><span class="line">  --link-<span class="attribute">color</span>: $link-color;</span><br><span class="line">  --link-hover-<span class="attribute">color</span>: $link-hover-color;</span><br><span class="line">  --brand-<span class="attribute">color</span>: $brand-color;</span><br><span class="line">  --brand-hover-<span class="attribute">color</span>: $brand-hover-color;</span><br><span class="line">  --<span class="selector-tag">table</span>-row-odd-bg-<span class="attribute">color</span>: $table-row-odd-bg-color;</span><br><span class="line">  --<span class="selector-tag">table</span>-row-hover-bg-<span class="attribute">color</span>: $table-row-hover-bg-color;</span><br><span class="line">  --<span class="selector-tag">menu</span>-item-bg-<span class="attribute">color</span>: $menu-item-bg-color;</span><br><span class="line"></span><br><span class="line">  --btn-default-bg: $btn-default-bg;</span><br><span class="line">  --btn-default-<span class="attribute">color</span>: $btn-default-color;</span><br><span class="line">  --btn-default-<span class="attribute">border-color</span>: $btn-default-border-color;</span><br><span class="line">  --btn-default-hover-bg: $btn-default-hover-bg;</span><br><span class="line">  --btn-default-hover-<span class="attribute">color</span>: $btn-default-hover-color;</span><br><span class="line">  --btn-default-hover-<span class="attribute">border-color</span>: $btn-default-hover-border-color;</span><br><span class="line"></span><br><span class="line">  --highlight-<span class="attribute">background</span>: $highlight-background;</span><br><span class="line">  --highlight-foreground: $highlight-foreground;</span><br><span class="line">  --highlight-gutter-<span class="attribute">background</span>: $highlight-gutter-background;</span><br><span class="line">  --highlight-gutter-foreground: $highlight-gutter-foreground;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo-config(&#x27;darkmode&#x27;)) &#123;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) &#123;</span><br><span class="line">    <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">      --<span class="selector-tag">body</span>-bg-<span class="attribute">color</span>: $body-bg-color-dark;</span><br><span class="line">      --<span class="attribute">content</span>-bg-<span class="attribute">color</span>: $content-bg-color-dark;</span><br><span class="line">      --card-bg-<span class="attribute">color</span>: $card-bg-color-dark;</span><br><span class="line">      --text-<span class="attribute">color</span>: $text-color-dark;</span><br><span class="line">      --<span class="selector-tag">blockquote</span>-<span class="attribute">color</span>: $blockquote-color-dark;</span><br><span class="line">      --link-<span class="attribute">color</span>: $link-color-dark;</span><br><span class="line">      --link-hover-<span class="attribute">color</span>: $link-hover-color-dark;</span><br><span class="line">      --brand-<span class="attribute">color</span>: $brand-color-dark;</span><br><span class="line">      --brand-hover-<span class="attribute">color</span>: $brand-hover-color-dark;</span><br><span class="line">      --<span class="selector-tag">table</span>-row-odd-bg-<span class="attribute">color</span>: $table-row-odd-bg-color-dark;</span><br><span class="line">      --<span class="selector-tag">table</span>-row-hover-bg-<span class="attribute">color</span>: $table-row-hover-bg-color-dark;</span><br><span class="line">      --<span class="selector-tag">menu</span>-item-bg-<span class="attribute">color</span>: $menu-item-bg-color-dark;</span><br><span class="line"></span><br><span class="line">      --btn-default-bg: $btn-default-bg-dark;</span><br><span class="line">      --btn-default-<span class="attribute">color</span>: $btn-default-color-dark;</span><br><span class="line">      --btn-default-<span class="attribute">border-color</span>: $btn-default-border-color-dark;</span><br><span class="line">      --btn-default-hover-bg: $btn-default-hover-bg-dark;</span><br><span class="line">      --btn-default-hover-<span class="attribute">color</span>: $btn-default-hover-color-dark;</span><br><span class="line">      --btn-default-hover-<span class="attribute">border-color</span>: $btn-default-hover-border-color-dark;</span><br><span class="line"></span><br><span class="line">      --highlight-<span class="attribute">background</span>: $highlight-background-dark;</span><br><span class="line">      --highlight-foreground: $highlight-foreground-dark;</span><br><span class="line">      --highlight-gutter-<span class="attribute">background</span>: $highlight-gutter-background-dark;</span><br><span class="line">      --highlight-gutter-foreground: $highlight-gutter-foreground-dark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: .<span class="number">75</span>;</span><br><span class="line"></span><br><span class="line">      &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来切换深色与否是切换了基础的变量，那么怎么与darkmode-js`结合呢？</p><blockquote><p>A CSS class <code>darkmode--activated</code> is added to the body tag when the darkmode is activated. You can take advantage of it to override the style and have a custom style</p></blockquote><p>在<code>darkmode</code>被激活的时候，会在body上添加一个<code>darkmode--activated</code>的类，那么如果我们把上面的样式添加到它的下面，是不是就实现了dark模式的切换？</p><p>首先，修改文件<code>next/source/css/_colors.styl</code>，把<code>:root</code>修改成<code>body</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  --<span class="selector-tag">body</span>-bg-<span class="attribute">color</span>: <span class="variable">$body-bg-color</span>;</span><br><span class="line">  --<span class="attribute">content</span>-bg-<span class="attribute">color</span>: <span class="variable">$content-bg-color</span>;</span><br><span class="line"><span class="comment">// ..</span></span><br></pre></td></tr></table></figure><p>然后添加文件<code>next/source/css/_common/scaffolding/darkmode.styl</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.darkmode--activated</span>&#123;</span><br><span class="line">  --<span class="selector-tag">body</span>-bg-<span class="attribute">color</span>: $body-bg-color-dark;</span><br><span class="line">  --<span class="attribute">content</span>-bg-<span class="attribute">color</span>: $content-bg-color-dark;</span><br><span class="line">  --card-bg-<span class="attribute">color</span>: $card-bg-color-dark;</span><br><span class="line">  --text-<span class="attribute">color</span>: $text-color-dark;</span><br><span class="line">  --<span class="selector-tag">blockquote</span>-<span class="attribute">color</span>: $blockquote-color-dark;</span><br><span class="line">  --link-<span class="attribute">color</span>: $link-color-dark;</span><br><span class="line">  --link-hover-<span class="attribute">color</span>: $link-hover-color-dark;</span><br><span class="line">  --brand-<span class="attribute">color</span>: $brand-color-dark;</span><br><span class="line">  --brand-hover-<span class="attribute">color</span>: $brand-hover-color-dark;</span><br><span class="line">  --<span class="selector-tag">table</span>-row-odd-bg-<span class="attribute">color</span>: $table-row-odd-bg-color-dark;</span><br><span class="line">  --<span class="selector-tag">table</span>-row-hover-bg-<span class="attribute">color</span>: $table-row-hover-bg-color-dark;</span><br><span class="line">  --<span class="selector-tag">menu</span>-item-bg-<span class="attribute">color</span>: $menu-item-bg-color-dark;</span><br><span class="line"></span><br><span class="line">  --btn-default-bg: $btn-default-bg-dark;</span><br><span class="line">  --btn-default-<span class="attribute">color</span>: $btn-default-color-dark;</span><br><span class="line">  --btn-default-<span class="attribute">border-color</span>: $btn-default-border-color-dark;</span><br><span class="line">  --btn-default-hover-bg: $btn-default-hover-bg-dark;</span><br><span class="line">  --btn-default-hover-<span class="attribute">color</span>: $btn-default-hover-color-dark;</span><br><span class="line">  --btn-default-hover-<span class="attribute">border-color</span>: $btn-default-hover-border-color-dark;</span><br><span class="line"></span><br><span class="line">  --highlight-<span class="attribute">background</span>: $highlight-background-dark;</span><br><span class="line">  --highlight-foreground: $highlight-foreground-dark;</span><br><span class="line">  --highlight-gutter-<span class="attribute">background</span>: $highlight-gutter-background-dark;</span><br><span class="line">  --highlight-gutter-foreground: $highlight-gutter-foreground-dark;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">75</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>最后就是引入<code>next/source/css/_common/scaffolding/index.styl</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Scaffolding</span><br><span class="line">// ==================================================</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;normalize&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;base&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;tables&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;buttons&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;toggles&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;highlight&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;tags&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;pagination&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;comments&#x27;</span>;</span><br><span class="line">// 这里引入</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;darkmode&#x27;</span>;</span><br></pre></td></tr></table></figure><p>实现效果：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/hexo-usage-1/dark.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>上面，显示的代码块<code>code</code>部分，不太完美，而且，对于头部也不太完美，所以我们进行样式上的调整：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.darkmode--activated</span>&#123;</span><br><span class="line">  // ..</span><br><span class="line"></span><br><span class="line">// 优化内容</span><br><span class="line">  <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#69dbdc</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>本文完。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍为hexo next主题添加一个可以切换的黑色/夜间模式，虽然next 8.0 主题已经支持原生黑色模式，但是这个黑色模式是不可以切换的。本文介绍如何实现按钮来切换，包括如何在代码部分也切换夜间模式。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo博客进阶玩法" scheme="https://www.toimc.com/categories/hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E7%8E%A9%E6%B3%95/"/>
    
    
    <category term="node.js" scheme="https://www.toimc.com/tags/node-js/"/>
    
    <category term="hexo" scheme="https://www.toimc.com/tags/hexo/"/>
    
    <category term="next" scheme="https://www.toimc.com/tags/next/"/>
    
    <category term="前端" scheme="https://www.toimc.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>nestjs搭建通用业务框架（5）：数据库+配置</title>
    <link href="https://www.toimc.com/nestjs-example-project-5/"/>
    <id>https://www.toimc.com/nestjs-example-project-5/</id>
    <published>2021-03-17T00:06:28.000Z</published>
    <updated>2021-03-20T14:13:13.786Z</updated>
    
    <content type="html"><![CDATA[<p>这是《nestjs搭建通用业务框架》系列的第5篇，进入开发具体的功能之前，学习nest框架本身提供的CLI工具与规划合理的工程目录，对于要实现的内容进行架构与计划，这是实现健壮高可用的框架的前提。</p><span id="more"></span><p>技术整合会从三个层次进行介绍：</p><ul><li>数据库 -&gt; 配置(多环境) -&gt; 配置验证 -&gt; 系统日志（本篇）</li><li>跨域 -&gt; 错误拦截器 -&gt; 缓存Redis</li><li>数据校验 -&gt; 日志拦截 -&gt; 鉴权</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="ORM工具库"><a href="#ORM工具库" class="headerlink" title="ORM工具库"></a>ORM工具库</h3><p>通过数据库集成库或 <code>ORM</code> ，例如 <a href="https://www.npmjs.com/package/sequelize">Sequelize (recipe)</a>和 <a href="https://github.com/typeorm/typeorm">TypeORM</a> ，以在更高的抽象级别上进行操作。</p><blockquote><p>ORM：对象关系映射（英语：Object Relational Mapping）是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。 从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。</p></blockquote><p>应用场景：</p><ul><li>SQL -&gt; DB：我们写一套配置，针对不同的数据库，都可以方便的接入</li><li>DB -&gt; SQL：针对不同的数据库，都可以通过抽象层进行联接</li></ul><blockquote><p><code>Nest</code> 还提供了与现成的 <code>TypeORM</code> 与 <code>@nestjs/typeorm</code> 的紧密集成，我们将在本章中对此进行介绍，而与 <code>@nestjs/mongoose</code> 的紧密集成将在官方的<a href="https://docs.nestjs.cn/7/techniques?id=mongo">这一章</a>中介绍</p></blockquote><p>目前主要的ORM工具库与特点：</p><ul><li><a href="https://www.npmjs.com/package/typeorm">typeorm</a>：跨库查询，事务、TS支持，支持数据库：MySQL, MariaDB, Postgres, CockroachDB, SQLite, MSSQL, Oracle, SAPHana, sql.js, MongoDB</li><li><a href="https://www.npmjs.com/package/objection">objection</a>： TS、事务、饥饿加载、数据效验，基于<a href="http://knexjs.org/">knexjs</a>，支持数据库：Postgres**, <strong>MSSQL</strong>, <strong>MySQL</strong>, <strong>MariaDB</strong>, <strong>SQLite3</strong>, **Oracle, Amazon Redshift</li><li><a href="https://www.npmjs.com/package/sequelize">sequelize</a>： 有非官方的中文文档，目前缺少核心的维护与开发。支持：PostgreSQL, MySQL, MariaDB, SQLite, MSSQL</li><li><a href="https://www.npmjs.com/package/prisma">prisma</a>：后起之秀(官方文档写的很不错)，SQL自动合并，对接GraphQL，客户端、服务端+数据管理GUI，支持：PostgreSQL, MSSQL, MySQL, SQLite</li></ul><p>通过上面的简单对比，目前来看TypeORM是<code>nest</code>官方支持且推荐的，可以来<a href="https://typeorm.biunav.com/zh/#%E5%AE%89%E8%A3%85">这里</a>看看它的特性。</p><h3 id="集成Postgre-MySQL"><a href="#集成Postgre-MySQL" class="headerlink" title="集成Postgre(MySQL)"></a>集成<code>Postgre(MySQL)</code></h3><p>步骤：</p><ul><li>安装<code>@nestjs/typeorm</code>，<code>typeorm</code></li><li>安装nodejs侧的数据库驱动程序，如<code>mysql</code>，<code>pg</code></li><li>新建数据库配置文件，配置数据库</li><li>在<code>app.module.ts</code>引入数据库的配置文件，调用<code>TypeOrmModule.forRoot</code>方法</li><li>启动程序，进行测试</li></ul><p>安装依赖（跳过数据库安装过程）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @nestjs/typeorm typeorm pg</span><br></pre></td></tr></table></figure><p>按照上面的步骤，创建文件<code>src/config/database.config.ts</code>：</p><p>数据库配置信息：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypeOrmModuleOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> typeOrmConfig: TypeOrmModuleOptions = &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  port: <span class="number">5432</span>,</span><br><span class="line">  username: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;changeme&#x27;</span>,</span><br><span class="line">  database: <span class="string">&#x27;demo-db&#x27;</span>,</span><br><span class="line">  entities: [<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../entity/**/*.&#123;js,ts&#125;`</span>],</span><br><span class="line">  synchronize: <span class="literal">false</span>,</span><br><span class="line">  logging: [<span class="string">&quot;error&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>src/app.module.ts</code>中添加<code>TypeOrm</code>配置：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeOrmModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; typeOrmConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./config/typeorm.config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    TypeOrmModule.forRoot(typeOrmConfig)</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后就可以使用<code>npm run start:dev</code>来进行调试了。</p><h3 id="集成MongoDB"><a href="#集成MongoDB" class="headerlink" title="集成MongoDB"></a>集成<code>MongoDB</code></h3><p>非关系型数据库<code>MongoDB</code>同样可以使用<code>TypeORM</code>，官方提供了<code>@nestjs/mongoose</code>包，所以，我们来介绍两种集成方法：</p><h4 id="官方-nestjs-mongoose"><a href="#官方-nestjs-mongoose" class="headerlink" title="官方@nestjs/mongoose"></a>官方<code>@nestjs/mongoose</code></h4><p>安装依赖：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install --save @nestjs/mongoose mongoose</span><br></pre></td></tr></table></figure><p>配置<code>app.module.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MongooseModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [MongooseModule.forRoot(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>)],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="使用mongoose库"><a href="#使用mongoose库" class="headerlink" title="使用mongoose库"></a>使用<code>mongoose</code>库</h4><p>安装依赖：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment">--save mongoose</span></span><br></pre></td></tr></table></figure><p>新建<code>src/database/database.providers.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mongoose <span class="keyword">from</span> <span class="string">&#x27;mongoose&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> databaseProviders = [</span><br><span class="line">  &#123;</span><br><span class="line">    provide: <span class="string">&#x27;DATABASE_CONNECTION&#x27;</span>,</span><br><span class="line">    useFactory: <span class="keyword">async</span> (): <span class="built_in">Promise</span>&lt;<span class="keyword">typeof</span> mongoose&gt; =&gt;</span><br><span class="line">      <span class="keyword">await</span> mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>新建<code>src/database/database.module.ts</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Module &#125; from &#39;@nestjs&#x2F;common&#39;;</span><br><span class="line">import &#123; databaseProviders &#125; from &#39;.&#x2F;database.providers&#39;;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  providers: [...databaseProviders],</span><br><span class="line">  exports: [...databaseProviders],</span><br><span class="line">&#125;)</span><br><span class="line">export class DatabaseModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>配置<code>app.module.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DatabaseModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./database/database.module.ts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">  DatabaseModule,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>应用程序通常在不同的<strong>环境</strong>中运行，根据环境（Development，Production）的不同，应该使用不同的配置设置。</p><p>两种方法：</p><ul><li>使用<code>@nestjs/config</code>来实现对<code>.env</code>的<code>key=value</code>对进行解析</li><li>使用<code>config</code>库解析<code>yaml</code>格式的文件</li></ul><h3 id="官方-nestjs-config"><a href="#官方-nestjs-config" class="headerlink" title="官方@nestjs/config"></a>官方<code>@nestjs/config</code></h3><h4 id="最简单的用法"><a href="#最简单的用法" class="headerlink" title="最简单的用法"></a>最简单的用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save @nestjs/config</span><br></pre></td></tr></table></figure><p>配置<code>src/app.module.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ConfigModule.forRoot(),</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后创建：<code>.env</code>文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DATABASE_USER</span>=test</span><br><span class="line"><span class="attr">DATABASE_PASSWORD</span>=test123</span><br></pre></td></tr></table></figure><p>下面来使用<code>src/app.controller.ts</code>中使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigService &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> configService: ConfigService,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dbUser = <span class="built_in">this</span>.configService.get&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;DATABASE_USER&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(dbUser); <span class="comment">// 这里来测试</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.appService.getHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果访问<code>localhost:3000</code>即可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Nest] 14039   - 2021/03/13 下午9:43:54   [NestFactory] Starting Nest application...</span><br><span class="line">[Nest] 14039   - 2021/03/13 下午9:43:54   [InstanceLoader] ConfigHostModule dependencies initialized +95ms</span><br><span class="line">[Nest] 14039   - 2021/03/13 下午9:43:54   [InstanceLoader] ConfigModule dependencies initialized +0ms</span><br><span class="line">[Nest] 14039   - 2021/03/13 下午9:43:54   [InstanceLoader] AppModule dependencies initialized +1ms</span><br><span class="line">[Nest] 14039   - 2021/03/13 下午9:43:54   [RoutesResolver] AppController &#123;&#125;: +7ms</span><br><span class="line">[Nest] 14039   - 2021/03/13 下午9:43:54   [RouterExplorer] Mapped &#123;, GET&#125; route +3ms</span><br><span class="line">[Nest] 14039   - 2021/03/13 下午9:43:54   [NestApplication] Nest application successfully started +2ms</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h4><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-4/nestjs-1.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>从这里点进去，我们发现<code>ConfigModuleOptions</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ConfigFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;./config-factory.interface&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ConfigModuleOptions &#123;</span><br><span class="line">    cache?: <span class="built_in">boolean</span>;</span><br><span class="line">    isGlobal?: <span class="built_in">boolean</span>;</span><br><span class="line">    ignoreEnvFile?: <span class="built_in">boolean</span>;</span><br><span class="line">    ignoreEnvVars?: <span class="built_in">boolean</span>;</span><br><span class="line">    envFilePath?: <span class="built_in">string</span> | <span class="built_in">string</span>[];</span><br><span class="line">    encoding?: <span class="built_in">string</span>;</span><br><span class="line">    validate?: <span class="function">(<span class="params">config: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span>) =&gt;</span> Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;;</span><br><span class="line">    validationSchema?: <span class="built_in">any</span>;</span><br><span class="line">    validationOptions?: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;;</span><br><span class="line">    load?: <span class="built_in">Array</span>&lt;ConfigFactory&gt;;</span><br><span class="line">    expandVariables?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所支持的参数。</p><p>我们可以利用<code>envFilePath</code>配合<code>NODE_ENV</code>来，在不同的启动命令的时候使用不同的配置。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="keyword">cross</span>-<span class="keyword">env</span></span><br></pre></td></tr></table></figure><p>然后添加两个文件：<code>.env.development</code>与<code>.env.production</code>，比如<code>.env.production</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DATABASE_USER</span>=test1</span><br><span class="line"><span class="attr">DATABASE_PASSWORD</span>=test123321</span><br></pre></td></tr></table></figure><p>下面修改<code>scripts</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start:prod&quot;: &quot;cross-env NODE_ENV=production node dist/main&quot;,</span><br></pre></td></tr></table></figure><p>可以设置<code>app.module.ts</code>中默认是<code>development</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envPath = <span class="string">`.env.<span class="subst">$&#123;process.env.NODE_ENV || <span class="string">&#x27;development&#x27;</span>&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;🚀 ~ file: app.module.ts ~ line 7 ~ envPath&#x27;</span>, envPath);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ConfigModule.forRoot(&#123;</span><br><span class="line">      envFilePath: envPath,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同样，大家可以启动了测试一下。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜ npm run start:prod</span><br><span class="line"></span><br><span class="line">&gt; nestjs-common-template@<span class="number">0.0</span>.<span class="number">1</span> start:prod <span class="regexp">/Users/m</span>acos<span class="regexp">/Projects/</span>nestjs/nestjs-common-template</span><br><span class="line">&gt; cross-env NODE_ENV=production node dist/main</span><br><span class="line"></span><br><span class="line">🚀 ~ <span class="keyword">file</span>: app.module.ts ~ line <span class="number">7</span> ~ envPath .env.production</span><br><span class="line">[Nest] <span class="number">14977</span>   - <span class="number">2021</span><span class="regexp">/03/</span><span class="number">13</span> 下午<span class="number">11</span>:<span class="number">10</span>:<span class="number">13</span>   [NestFactory] Starting Nest application...</span><br><span class="line">[Nest] <span class="number">14977</span>   - <span class="number">2021</span><span class="regexp">/03/</span><span class="number">13</span> 下午<span class="number">11</span>:<span class="number">10</span>:<span class="number">13</span>   [InstanceLoader] ConfigHostModule <span class="keyword">dependencies</span> initialized +<span class="number">34</span>ms</span><br><span class="line">[Nest] <span class="number">14977</span>   - <span class="number">2021</span><span class="regexp">/03/</span><span class="number">13</span> 下午<span class="number">11</span>:<span class="number">10</span>:<span class="number">13</span>   [InstanceLoader] ConfigModule <span class="keyword">dependencies</span> initialized +<span class="number">1</span>ms</span><br><span class="line">[Nest] <span class="number">14977</span>   - <span class="number">2021</span><span class="regexp">/03/</span><span class="number">13</span> 下午<span class="number">11</span>:<span class="number">10</span>:<span class="number">13</span>   [InstanceLoader] AppModule <span class="keyword">dependencies</span> initialized +<span class="number">1</span>ms</span><br><span class="line">[Nest] <span class="number">14977</span>   - <span class="number">2021</span><span class="regexp">/03/</span><span class="number">13</span> 下午<span class="number">11</span>:<span class="number">10</span>:<span class="number">13</span>   [RoutesResolver] AppController &#123;&#125;: +<span class="number">6</span>ms</span><br><span class="line">[Nest] <span class="number">14977</span>   - <span class="number">2021</span><span class="regexp">/03/</span><span class="number">13</span> 下午<span class="number">11</span>:<span class="number">10</span>:<span class="number">13</span>   [RouterExplorer] Mapped &#123;, GET&#125; route +<span class="number">3</span>ms</span><br><span class="line">[Nest] <span class="number">14977</span>   - <span class="number">2021</span><span class="regexp">/03/</span><span class="number">13</span> 下午<span class="number">11</span>:<span class="number">10</span>:<span class="number">13</span>   [NestApplication] Nest application successfully started +<span class="number">3</span>ms</span><br><span class="line">test1</span><br></pre></td></tr></table></figure><p>上面打印的<code>test1</code>正是我们设置在<code>.env.production</code>中的内容。</p><h4 id="解析yaml格式的配置"><a href="#解析yaml格式的配置" class="headerlink" title="解析yaml格式的配置"></a>解析<code>yaml</code>格式的配置</h4><p>步骤：</p><ul><li><p>下载<code>js-yaml</code>与<code>@types/js-yaml</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i js-yaml</span><br><span class="line"><span class="built_in">npm</span> i -D @types/js-yaml</span><br></pre></td></tr></table></figure></li><li><p>创建配置：<code>config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">&#x27;yaml-db&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sqlite:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">&#x27;sqlite.db&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>配置自定义文件<code>configuration.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> yaml <span class="keyword">from</span> <span class="string">&#x27;js-yaml&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> YAML_CONFIG_FILENAME = <span class="string">&#x27;config.yml&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> filePath = join(__dirname, YAML_CONFIG_FILENAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> yaml.load(readFileSync(filePath, <span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>调用<code>forRoot</code>中的load方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Configuration <span class="keyword">from</span> <span class="string">&#x27;./config/configuration&#x27;</span>; <span class="comment">// 这里调整</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ConfigModule.forRoot(&#123;</span><br><span class="line">      load: [Configuration], <span class="comment">// load方法</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>app.controller.ts</code>中的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigService &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DatabaseConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./interface&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> configService: ConfigService,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = <span class="built_in">this</span>.configService.get&lt;DatabaseConfig&gt;(<span class="string">&#x27;db&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(db);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.appService.getHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<code>src/interface.ts</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> DatabaseConfig &#123;</span><br><span class="line">  postgres: PostgresConfig;</span><br><span class="line">  sqlite: SqliteConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> PostgresConfig &#123;</span><br><span class="line">  url: <span class="built_in">string</span>;</span><br><span class="line">  port: <span class="built_in">number</span>;</span><br><span class="line">  database: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> SqliteConfig &#123;</span><br><span class="line">  database: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>最后测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Nest] 16960   - 2021/03/13 下午11:34:00   [NestFactory] Starting Nest application...</span><br><span class="line">[Nest] 16960   - 2021/03/13 下午11:34:00   [InstanceLoader] ConfigHostModule dependencies initialized +30ms</span><br><span class="line">[Nest] 16960   - 2021/03/13 下午11:34:00   [InstanceLoader] ConfigModule dependencies initialized +0ms</span><br><span class="line">[Nest] 16960   - 2021/03/13 下午11:34:00   [InstanceLoader] AppModule dependencies initialized +0ms</span><br><span class="line">[Nest] 16960   - 2021/03/13 下午11:34:00   [RoutesResolver] AppController &#123;&#125;: +4ms</span><br><span class="line">[Nest] 16960   - 2021/03/13 下午11:34:00   [RouterExplorer] Mapped &#123;, GET&#125; route +3ms</span><br><span class="line">[Nest] 16960   - 2021/03/13 下午11:34:00   [NestApplication] Nest application successfully started +1ms</span><br><span class="line">&#123;</span><br><span class="line">  postgres: &#123; url: <span class="string">&#x27;localhost&#x27;</span>, port: 5432, database: <span class="string">&#x27;yaml-db&#x27;</span> &#125;,</span><br><span class="line">  sqlite: &#123; database: <span class="string">&#x27;sqlite.db&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写到这里，应该够用了，代码可以查看<a href="https://github.com/toimc/nestjs-example-template/tree/48c0d75e807faa1da7de53de26a5b1512a6584aa">本次提交</a>。</p><h3 id="使用config库解析"><a href="#使用config库解析" class="headerlink" title="使用config库解析"></a>使用<code>config</code>库解析</h3><p>步骤：</p><ul><li><p>安装第三方包<code>config</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i config -S</span><br><span class="line"><span class="built_in">npm</span> i cross-env -D</span><br></pre></td></tr></table></figure></li><li><p>新建 配置文件<code>config/default.json</code>，同样还可以建立<code>development.json</code>, <code>production.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;happy&quot;</span>: <span class="string">&quot;my default value&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>development.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">3001</span>,</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>production.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">3002</span>,</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;prod&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;prod&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>app.controller.ts</code>中使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> config <span class="keyword">from</span> <span class="string">&#x27;config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  getHello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> server = config.get(<span class="string">&#x27;server&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(server);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.appService.getHello();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置脚本：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;start:dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development nest start --watch&quot;</span>,</span><br><span class="line"><span class="string">&quot;start:prod&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production node dist/main&quot;</span>,</span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">➜ npm run start:dev</span><br><span class="line">[Nest] 34580   - 2021/03/14 上午12:50:42   [NestFactory] Starting Nest application...</span><br><span class="line">[Nest] 34580   - 2021/03/14 上午12:50:42   [InstanceLoader] AppModule dependencies initialized +34ms</span><br><span class="line">[Nest] 34580   - 2021/03/14 上午12:50:42   [RoutesResolver] AppController &#123;&#125;: +6ms</span><br><span class="line">[Nest] 34580   - 2021/03/14 上午12:50:42   [RouterExplorer] Mapped &#123;, GET&#125; route +3ms</span><br><span class="line">[Nest] 34580   - 2021/03/14 上午12:50:42   [NestApplication] Nest application successfully started +2ms</span><br><span class="line">&#123;</span><br><span class="line">  happy: <span class="string">&#x27;my default value&#x27;</span>,</span><br><span class="line">  port: 3001,</span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜ npm run start:prod</span><br><span class="line"></span><br><span class="line">&gt; nestjs-common-template@0.0.1 start:prod /Users/macos/Projects/nestjs/nestjs-common-template</span><br><span class="line">&gt; cross-env NODE_ENV=production node dist/main</span><br><span class="line"></span><br><span class="line">[Nest] 34400   - 2021/03/14 上午12:50:03   [NestFactory] Starting Nest application...</span><br><span class="line">[Nest] 34400   - 2021/03/14 上午12:50:03   [InstanceLoader] AppModule dependencies initialized +71ms</span><br><span class="line">[Nest] 34400   - 2021/03/14 上午12:50:03   [RoutesResolver] AppController &#123;&#125;: +6ms</span><br><span class="line">[Nest] 34400   - 2021/03/14 上午12:50:03   [RouterExplorer] Mapped &#123;, GET&#125; route +2ms</span><br><span class="line">[Nest] 34400   - 2021/03/14 上午12:50:03   [NestApplication] Nest application successfully started +2ms</span><br><span class="line">&#123;</span><br><span class="line">  happy: <span class="string">&#x27;my default value&#x27;</span>,</span><br><span class="line">  port: 3002,</span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  username: <span class="string">&#x27;prod&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;prod&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上：<a href="https://github.com/toimc/nestjs-example-template/tree/50858c28746323ee69a4dc65c6624f7d7c0937be">代码地址</a></p></li></ul><h3 id="配置验证"><a href="#配置验证" class="headerlink" title="配置验证"></a>配置验证</h3><p>配置验证，主要是指在应用程序启动时，如果没有提供所需的环境变量或不符合某些验证规则，就会抛出一个异常。<code>@nestjs/config</code>包实现了两种不同的方式来实现这一点。</p><ul><li><code>Joi</code>内置验证器。通过<a href="https://www.npmjs.com/package/joi">Joi</a>，你可以定义一个对象模式，并根据它验证JavaScript对象</li><li>一个自定义的<code>validate()</code>函数，它将环境变量作为输入</li></ul><h4 id="Joi用法"><a href="#Joi用法" class="headerlink" title="Joi用法"></a>Joi用法</h4><p>特别说明：</p><ul><li>最新版本的<code>joi</code>需要你运行Node v12或更高版本。旧版本的node请安装<code>v16.1.8</code>。这主要是因为在<code>v17.0.2</code>发布后，在构建的时候会出现错误。更多信息请参考其17.0.0发布说明，<a href="https://joi.dev/resources/changelog/">点击这里</a>。</li><li>joi最好配合官方的<code>@nestjs/config</code>进行使用</li></ul><p>步骤：</p><ul><li><p>安装依赖</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="comment">--save joi</span></span><br></pre></td></tr></table></figure></li><li><p>定义验证Schema：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Joi <span class="keyword">from</span> <span class="string">&#x27;joi&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envPath = <span class="string">`.env.<span class="subst">$&#123;process.env.NODE_ENV || <span class="string">&#x27;development&#x27;</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ConfigModule.forRoot(&#123;</span><br><span class="line">      envFilePath: envPath,</span><br><span class="line">      <span class="comment">// 这里多了一个属性：validationSchema</span></span><br><span class="line">      validationSchema: Joi.object(&#123;</span><br><span class="line">        NODE_ENV: Joi.string()</span><br><span class="line">          .valid(<span class="string">&#x27;development&#x27;</span>, <span class="string">&#x27;production&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;provision&#x27;</span>)</span><br><span class="line">          .default(<span class="string">&#x27;development&#x27;</span>),</span><br><span class="line">        PORT: Joi.number().default(<span class="number">3000</span>),</span><br><span class="line">        DATABASE_USER: Joi.string().required()</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>验证测试</p><p>配置<code>错误</code>脚本：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;start:dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development PORT=toimc nest start --watch&quot;</span>,</span><br></pre></td></tr></table></figure><p>配置正确的脚本：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;start:dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development PORT=3000 nest start --watch&quot;</span>,</span><br></pre></td></tr></table></figure><p>测试命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> start:dev</span><br></pre></td></tr></table></figure><p>错误的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[下午7:33:38] Found 0 errors. Watching <span class="keyword">for</span> file changes.</span><br><span class="line"></span><br><span class="line">/Users/macos/Projects/nestjs/nestjs-common-template/node_modules/_@nestjs_config@0.6.3@@nestjs/config/dist/config.module.js:61</span><br><span class="line">                throw new Error(`Config validation error: <span class="variable">$&#123;error.message&#125;</span>`);</span><br><span class="line">                ^</span><br><span class="line"></span><br><span class="line">Error: Config validation error: <span class="string">&quot;PORT&quot;</span> must be a number</span><br><span class="line">    at Function.forRoot (/Users/macos/Projects/nestjs/nestjs-common-template/node_modules/_@nestjs_config@0.6.3@@nestjs/config/dist/config.module.js:61:23)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/macos/Projects/nestjs/nestjs-common-template/dist/app.module.js:21:35)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1063:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:928:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:769:14)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:952:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:88:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/macos/Projects/nestjs/nestjs-common-template/dist/main.js:4:22)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1063:30)</span><br></pre></td></tr></table></figure><p>或者修改<code>.env.development</code>中的配置信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_USER=</span><br><span class="line"><span class="attr">DATABASE_PASSWORD</span>=test123</span><br></pre></td></tr></table></figure><p>错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/Users/macos/Projects/nestjs/nestjs-common-template/node_modules/_@nestjs_config@0.6.3@@nestjs/config/dist/config.module.js:61</span><br><span class="line">                throw new Error(`Config validation error: <span class="variable">$&#123;error.message&#125;</span>`);</span><br><span class="line">                ^</span><br><span class="line"></span><br><span class="line">Error: Config validation error: <span class="string">&quot;DATABASE_USER&quot;</span> is not allowed to be empty</span><br><span class="line">    at Function.forRoot (/Users/macos/Projects/nestjs/nestjs-common-template/node_modules/_@nestjs_config@0.6.3@@nestjs/config/dist/config.module.js:61:23)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/macos/Projects/nestjs/nestjs-common-template/dist/app.module.js:21:35)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1063:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:928:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:769:14)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:952:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:88:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/macos/Projects/nestjs/nestjs-common-template/dist/main.js:4:22)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1063:30)</span><br></pre></td></tr></table></figure></li></ul><p>结论：使用<code>Joi</code>可以很方便对传入应用程序的参数进行验证，可以限制传入的数据类型。</p><p>除了上面写的验证以外，还可以加入以下属性来验证输入的<strong>命令参数</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ConfigModule.forRoot(&#123;</span><br><span class="line">      envFilePath: envPath,</span><br><span class="line">      validationSchema: Joi.object(&#123;</span><br><span class="line">        NODE_ENV: Joi.string()</span><br><span class="line">          .valid(<span class="string">&#x27;development&#x27;</span>, <span class="string">&#x27;production&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;provision&#x27;</span>)</span><br><span class="line">          .default(<span class="string">&#x27;development&#x27;</span>),</span><br><span class="line">        PORT: Joi.number().default(<span class="number">3000</span>),</span><br><span class="line">        DATABASE_USER: Joi.string().required()</span><br><span class="line">      &#125;),</span><br><span class="line">      validationOptions: &#123; <span class="comment">// 这里加</span></span><br><span class="line">        allowUnknown: <span class="literal">false</span>,</span><br><span class="line">        abortEarly: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>@nestjs/config</code>包使用的默认设置是：</p><ul><li><code>allowUnknown</code>：控制是否允许在环境变量中使用未知键。默认为true</li><li><code>abortEarly</code>：如果为true，则在第一个错误时停止验证；如果为false，则返回所有错误。默认值为false。</li></ul><p>注意上面的Joi的用法：</p><ul><li>主要是校验<code>process.env</code>传入的参数</li><li>主要是校验<code>envFilePath</code>初次加载的时候的参数</li></ul><h4 id="使用class-validator"><a href="#使用class-validator" class="headerlink" title="使用class-validator"></a>使用<code>class-validator</code></h4><p>步骤：</p><ul><li><p>安装依赖<code>class-validator</code>与<code>class-transformer</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="keyword">class</span>-<span class="keyword">validator</span> <span class="keyword">class</span>-transformer</span><br></pre></td></tr></table></figure></li><li><p>配置效验文件<code>src/env.validation.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; plainToClass &#125; <span class="keyword">from</span> <span class="string">&#x27;class-transformer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IsEnum, IsNumber, validateSync &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Environment &#123;</span><br><span class="line">  Development = <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  Production = <span class="string">&quot;production&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnvironmentVariables</span> </span>&#123;</span><br><span class="line">  <span class="meta">@IsEnum</span>(Environment)</span><br><span class="line">  NODE_ENV: Environment;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsNumber</span>()</span><br><span class="line">  PORT: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">config: Record&lt;<span class="built_in">string</span>, unknown&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> validatedConfig = plainToClass(</span><br><span class="line">    EnvironmentVariables,</span><br><span class="line">    config,</span><br><span class="line">    &#123; <span class="attr">enableImplicitConversion</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> errors = validateSync(validatedConfig, &#123; <span class="attr">skipMissingProperties</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errors.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> validatedConfig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调整<code>app.module.ts</code>文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; validate &#125; <span class="keyword">from</span> <span class="string">&#x27;./env.validation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envPath = <span class="string">`.env.<span class="subst">$&#123;process.env.NODE_ENV || <span class="string">&#x27;development&#x27;</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ConfigModule.forRoot(&#123;</span><br><span class="line">      envFilePath: envPath,</span><br><span class="line">      validate,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>与使用<code>Joi</code>验证结果一致。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>使用第三方的包<code>config</code>，可以方便的读取配置信息，但是校验却需要在读取的位置来加，对于不需要验证，而需要全局使用的配置项可以使用这种方式；</p></li><li><p>官方的<code>@nestjs/config</code>可以方便的导入<code>.env</code>的文件，同时结合<code>js-yaml</code>也可以导入<code>yaml</code>格式的配置。</p><p>配置灵活，而且可以配合验证工具<code>Joi</code>进行参数的验证（推荐）</p><p>自定义的校验第三方包<code>class-validator</code>这里只是冰山一角，后面在学习数据验证的时候还会使用到它；</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是《nestjs搭建通用业务框架》系列的第5篇，进入开发具体的功能之前，学习nest框架本身提供的CLI工具与规划合理的工程目录，对于要实现的内容进行架构与计划，这是实现健壮高可用的框架的前提。&lt;/p&gt;</summary>
    
    
    
    <category term="nestjs搭建通用业务框架" scheme="https://www.toimc.com/categories/nestjs%E6%90%AD%E5%BB%BA%E9%80%9A%E7%94%A8%E4%B8%9A%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="node.js" scheme="https://www.toimc.com/tags/node-js/"/>
    
    <category term="nestjs" scheme="https://www.toimc.com/tags/nestjs/"/>
    
    <category term="web框架" scheme="https://www.toimc.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>nestjs搭建通用业务框架（4）：工程目录与代码规范</title>
    <link href="https://www.toimc.com/nestjs-example-project-4/"/>
    <id>https://www.toimc.com/nestjs-example-project-4/</id>
    <published>2021-03-13T03:02:33.000Z</published>
    <updated>2021-03-17T00:11:06.048Z</updated>
    
    <content type="html"><![CDATA[<p>这是《nestjs搭建通用业务框架》系列的第4篇，进入开发具体的功能之前，养成良好的工程目录与代码风格的习惯，目的构建大型复杂项目，提高代码易维护性。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大多数前端同学拿到一个新的任务的时候，或者要做一个新的技术设计的时候，往往无从下手。知乎、掘金上问人可能是一种方案，还可以找一个社交渠道(推特、电报、微博、朋友圈、学校论坛)，通过别人的现实例子来进行架构的设计是一个很好切入点。其实，大家可能忽视了以下的渠道：技术框架的官方+示例、公司&amp;团队的历史项目库、找比较厉害的同事取经和发有偿技术咨询的单（程序员各种接单平台）等。</p><p>那么，对于nestjs，它的官方提供了很多现成的技术解决方案，所以我们可以借鉴(拿来即用)。</p><h2 id="认识CLI"><a href="#认识CLI" class="headerlink" title="认识CLI"></a>认识CLI</h2><p>先从官方的CLI开始：</p><blockquote><p><a href="https://github.com/nestjs/nest-cli">Nest CLI</a>是一个命令行界面工具，以帮助您初始化、开发和维护 <code>Nest</code> 应用程序。它以多种方式提供帮助，包括搭建项目、以开发模式为其提供服务，以及为生产分发构建和打包应用程序。它体现了最佳实践的架构模式，以构建良好的应用程序。</p></blockquote><p>大多命令行工具可以使用<code>--help</code>来查看帮助：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">➜ nest --<span class="built_in">help</span></span><br><span class="line">Usage: nest &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version                                   Output the current version.</span><br><span class="line">  -h, --<span class="built_in">help</span>                                      Output usage information.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  new|n [options] [name]                          Generate Nest application.</span><br><span class="line">  build [options] [app]                           Build Nest application.</span><br><span class="line">  start [options] [app]                           Run Nest application.</span><br><span class="line">  info|i                                          Display Nest project details.</span><br><span class="line">  update|u [options]                              Update Nest dependencies.</span><br><span class="line">  add [options] &lt;library&gt;                         Adds support <span class="keyword">for</span> an external library to your project.</span><br><span class="line">  generate|g [options] &lt;schematic&gt; [name] [path]  Generate a Nest element.</span><br><span class="line">    Available schematics:</span><br><span class="line">      ┌───────────────┬─────────────┬──────────────────────────────────────────────┐</span><br><span class="line">      │ name          │ <span class="built_in">alias</span>       │ description                                  │</span><br><span class="line">      │ application   │ application │ Generate a new application workspace         │</span><br><span class="line">      │ class         │ cl          │ Generate a new class                         │</span><br><span class="line">      │ configuration │ config      │ Generate a CLI configuration file            │</span><br><span class="line">      │ controller    │ co          │ Generate a controller declaration            │</span><br><span class="line">      │ decorator     │ d           │ Generate a custom decorator                  │</span><br><span class="line">      │ filter        │ f           │ Generate a filter declaration                │</span><br><span class="line">      │ gateway       │ ga          │ Generate a gateway declaration               │</span><br><span class="line">      │ guard         │ gu          │ Generate a guard declaration                 │</span><br><span class="line">      │ interceptor   │ <span class="keyword">in</span>          │ Generate an interceptor declaration          │</span><br><span class="line">      │ interface     │ interface   │ Generate an interface                        │</span><br><span class="line">      │ middleware    │ mi          │ Generate a middleware declaration            │</span><br><span class="line">      │ module        │ mo          │ Generate a module declaration                │</span><br><span class="line">      │ pipe          │ pi          │ Generate a pipe declaration                  │</span><br><span class="line">      │ provider      │ pr          │ Generate a provider declaration              │</span><br><span class="line">      │ resolver      │ r           │ Generate a GraphQL resolver declaration      │</span><br><span class="line">      │ service       │ s           │ Generate a service declaration               │</span><br><span class="line">      │ library       │ lib         │ Generate a new library within a monorepo     │</span><br><span class="line">      │ sub-app       │ app         │ Generate a new application within a monorepo │</span><br><span class="line">      │ resource      │ res         │ Generate a new CRUD resource                 │</span><br><span class="line">      └───────────────┴─────────────┴──────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>然后，如果想知道其中某一个子命令的用法，可以使用<code>nest &lt;command&gt; --help</code>的形式来进行查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">➜ nest generate --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>特别说明：</p><table><thead><tr><th>名称</th><th>缩写</th><th>描述</th></tr></thead><tbody><tr><td>application</td><td>application</td><td>生成一个新的应用工作区</td></tr><tr><td>class</td><td>cl</td><td>生成一个新的class</td></tr><tr><td>configuration</td><td>config</td><td>生成 CLI 配置文件</td></tr><tr><td>controller</td><td>co</td><td>生成一个控制器声明</td></tr><tr><td>decorator</td><td>d</td><td>生成一个自定义的装饰者</td></tr><tr><td>filter</td><td>f</td><td>生成一个过滤器声明</td></tr><tr><td>gateway</td><td>ga</td><td>生成网关</td></tr><tr><td>guard</td><td>gu</td><td>生成守卫</td></tr><tr><td>interceptor</td><td>in</td><td>生成拦截器</td></tr><tr><td>interface</td><td>interface</td><td>生成接口声明</td></tr><tr><td>middleware</td><td>mi</td><td>生成中间件声明</td></tr><tr><td>module</td><td>mo</td><td>生成一个模块声明</td></tr><tr><td>pipe</td><td>pi</td><td>生成管道声明</td></tr><tr><td>provider</td><td>pr</td><td>生成提供者声明</td></tr><tr><td>resolver</td><td>r</td><td>生成GraphQL resolver声明</td></tr><tr><td>service</td><td>s</td><td>生成服务</td></tr><tr><td>library</td><td>lib</td><td>生成一个monorepo库</td></tr><tr><td>sub-app</td><td>App</td><td>生成一个monorepo的应用</td></tr><tr><td>resource</td><td>Res</td><td>生成一个新的CURD资源</td></tr></tbody></table><p>我们最开始使用了一个<code>new</code>命令，后面最常用的即是<code>generator</code>或<code>g</code>（简写）命令，可以对照着上表进行熟悉。</p><h2 id="合理的工程目录"><a href="#合理的工程目录" class="headerlink" title="合理的工程目录"></a>合理的工程目录</h2><p>为了去理解Python的语言设计之美，其实更要理解这样的一句话“约定大于配置”，好的工程化目录（约定）能够很好的提升项目的可维护性。</p><h3 id="作者推荐"><a href="#作者推荐" class="headerlink" title="作者推荐"></a>作者推荐</h3><p>在官方的issues中，我们可以找到一些提示：<a href="https://github.com/nestjs/nest/issues/2249#issuecomment-494734673">Best scalable project structure #2249</a> 这里有作者的回复。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> src</span><br><span class="line"><span class="bullet">  -</span> core</span><br><span class="line"><span class="bullet">  -</span> common</span><br><span class="line"><span class="bullet">    -</span> middleware</span><br><span class="line"><span class="bullet">    -</span> interceptors</span><br><span class="line"><span class="bullet">    -</span> guards</span><br><span class="line"><span class="bullet">  -</span> user</span><br><span class="line"><span class="bullet">      -</span> interceptors (scoped interceptors)</span><br><span class="line"><span class="bullet">    -</span> user.controller.ts</span><br><span class="line"><span class="bullet">    -</span> user.model.ts</span><br><span class="line"><span class="bullet">  -</span> store</span><br><span class="line"><span class="bullet">    -</span> store.controller.ts</span><br><span class="line"><span class="bullet">    -</span> store.model.ts</span><br></pre></td></tr></table></figure><ul><li><p>可以使用monorepo的方法——在一个repo中创建两个项目，并在它们之间共享共同的东西，如库/包。</p></li><li><p>没有模块目录，按照功能进行划分。</p></li><li><p>把通用/核心的东西归为单独的目录：common，比如：拦截器/守卫/管道</p></li></ul><h3 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h3><p><strong>第一个参考项目</strong></p><p>技术栈：Nest + sequelize-typescript + JWT + Jest + Swagger</p><p>项目地址：<a href="https://github.com/kentloog/nestjs-sequelize-typescript">kentloog/nestjs-sequelize-typescript</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── assets</span><br><span class="line">│   └── logo.png</span><br><span class="line">├── config</span><br><span class="line">│   ├── config.development.ts</span><br><span class="line">│   └── config.production.ts</span><br><span class="line">├── config.ts</span><br><span class="line">├── db</span><br><span class="line">│   ├── config.ts</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── 20190128160000-create-table-user.js</span><br><span class="line">│   └── seeders-dev</span><br><span class="line">│       └── 20190129093300-test-data-users.js</span><br><span class="line">├── nest-cli.json</span><br><span class="line">├── nodemon-debug.json</span><br><span class="line">├── nodemon.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.module.ts</span><br><span class="line">│   ├── database</span><br><span class="line">│   │   ├── database.module.ts</span><br><span class="line">│   │   └── database.providers.ts</span><br><span class="line">│   ├── main.ts</span><br><span class="line">│   ├── posts</span><br><span class="line">│   │   ├── dto</span><br><span class="line">│   │   │   ├── create-post.dto.ts</span><br><span class="line">│   │   │   ├── post.dto.ts</span><br><span class="line">│   │   │   └── update-post.dto.ts</span><br><span class="line">│   │   ├── post.entity.ts</span><br><span class="line">│   │   ├── posts.controller.ts</span><br><span class="line">│   │   ├── posts.module.ts</span><br><span class="line">│   │   ├── posts.providers.ts</span><br><span class="line">│   │   └── posts.service.ts</span><br><span class="line">│   ├── shared</span><br><span class="line">│   │   ├── config</span><br><span class="line">│   │   │   └── config.service.ts</span><br><span class="line">│   │   ├── enum</span><br><span class="line">│   │   │   └── gender.ts</span><br><span class="line">│   │   └── shared.module.ts</span><br><span class="line">│   ├── swagger.ts</span><br><span class="line">│   └── users</span><br><span class="line">│       ├── auth</span><br><span class="line">│       │   ├── jwt-payload.model.ts</span><br><span class="line">│       │   └── jwt-strategy.ts</span><br><span class="line">│       ├── dto</span><br><span class="line">│       │   ├── create-user.dto.ts</span><br><span class="line">│       │   ├── update-user.dto.ts</span><br><span class="line">│       │   ├── user-login-request.dto.ts</span><br><span class="line">│       │   ├── user-login-response.dto.ts</span><br><span class="line">│       │   └── user.dto.ts</span><br><span class="line">│       ├── user.entity.ts</span><br><span class="line">│       ├── users.controller.ts</span><br><span class="line">│       ├── users.module.ts</span><br><span class="line">│       ├── users.providers.ts</span><br><span class="line">│       └── users.service.ts</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   ├── app.e2e-spec.ts</span><br><span class="line">│   ├── jest-e2e.json</span><br><span class="line">│   └── test-data.ts</span><br><span class="line">├── tsconfig.build.json</span><br><span class="line">├── tsconfig.json</span><br><span class="line">└── tslint.json</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li> 项目文档及相关的资源在根目录</li><li>数据库及项目配置会放在根目录（细节：数据库升级文件）</li><li><code>src</code>中会对功能进行划分建不同的文件夹<code>users</code>、<code>posts</code></li><li>单个功能文件夹中，会包括一个完整CURD的相关文件(dto/controller/module/providers/service)</li><li>抽离公共配置到<code>shared</code>文件夹</li></ul><p><strong>第二个参考项目</strong></p><p>技术栈：具有AWS Lambda，DynamoDB，DynamoDB Streams的完全无服务器生产应用程序</p><p>项目地址：<a href="https://github.com/International-Slackline-Association/Rankings-Backend">International-Slackline-Association/Rankings-Backend</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── docs</span><br><span class="line">│   ├── AWS_Architecture.png</span><br><span class="line">│   ├── Development\ Notes.md</span><br><span class="line">│   └── GourceOutput.png</span><br><span class="line">├── jest<span class="selector-class">.config</span>.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── serverless</span><br><span class="line">│   ├── environment.yml</span><br><span class="line">│   └── secrets<span class="selector-class">.example</span>.yml</span><br><span class="line">├── serverless.yml</span><br><span class="line">├── <span class="attribute">src</span></span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── admin</span><br><span class="line">│   │   │   ├── api<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   │   ├── athlete</span><br><span class="line">│   │   │   ├── contest</span><br><span class="line">│   │   │   ├── database<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   │   ├── index.ts</span><br><span class="line">│   │   │   ├── results</span><br><span class="line">│   │   │   └── submit</span><br><span class="line">│   │   └── webapp</span><br><span class="line">│   │       ├── api<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │       ├── athlete</span><br><span class="line">│   │       ├── contest</span><br><span class="line">│   │       ├── country</span><br><span class="line">│   │       ├── database<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │       ├── index.ts</span><br><span class="line">│   │       ├── nestjsTest<span class="selector-class">.controller</span>.ts</span><br><span class="line">│   │       └── rankings</span><br><span class="line">│   ├── core</span><br><span class="line">│   │   ├── athlete</span><br><span class="line">│   │   │   ├── athlete<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   │   ├── entity</span><br><span class="line">│   │   │   ├── interfaces</span><br><span class="line">│   │   │   └── rankings<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   ├── aws</span><br><span class="line">│   │   │   ├── aws<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   │   ├── aws<span class="selector-class">.services</span><span class="selector-class">.interface</span>.ts</span><br><span class="line">│   │   │   └── aws<span class="selector-class">.services</span>.ts</span><br><span class="line">│   │   ├── category</span><br><span class="line">│   │   │   └── categories<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   ├── contest</span><br><span class="line">│   │   │   ├── contest<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   │   ├── entity</span><br><span class="line">│   │   │   └── points-calculator<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   └── database</span><br><span class="line">│   │       ├── database<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │       ├── database<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │       ├── dynamodb</span><br><span class="line">│   │       ├── redis</span><br><span class="line">│   │       └── test</span><br><span class="line">│   ├── cron-job</span><br><span class="line">│   │   ├── cron-job<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   ├── cron-job<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   ├── cron-job<span class="selector-class">.spec</span>.ts</span><br><span class="line">│   │   ├── database<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   └── index.ts</span><br><span class="line">│   ├── dynamodb-streams</span><br><span class="line">│   │   ├── athlete</span><br><span class="line">│   │   │   ├── athlete-contest-record<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   │   ├── athlete-details-record<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   │   └── athlete-records<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   ├── contest</span><br><span class="line">│   │   │   ├── contest-record<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   │   └── contest-records<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   ├── database<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   ├── dynamodb-streams<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   ├── dynamodb-streams<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   ├── index.ts</span><br><span class="line">│   │   ├── test</span><br><span class="line">│   │   │   ├── contest-modifications<span class="selector-class">.spec</span>.ts</span><br><span class="line">│   │   │   └── lambda-trigger.ts</span><br><span class="line">│   │   └── utils.ts</span><br><span class="line">│   ├── image-resizer</span><br><span class="line">│   │   ├── S3Events<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   ├── S3Events<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │   ├── database<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │   ├── index.ts</span><br><span class="line">│   │   ├── test</span><br><span class="line">│   │   │   ├── lambda-trigger.ts</span><br><span class="line">│   │   │   └── s3-image-put<span class="selector-class">.spec</span>.ts</span><br><span class="line">│   │   └── thumbnail-creator</span><br><span class="line">│   │       ├── imagemagick.ts</span><br><span class="line">│   │       ├── s3<span class="selector-class">.service</span>.ts</span><br><span class="line">│   │       ├── thumbnail-creator<span class="selector-class">.module</span>.ts</span><br><span class="line">│   │       └── thumbnail-creator<span class="selector-class">.service</span>.ts</span><br><span class="line">│   └── shared</span><br><span class="line">│       ├── constants.ts</span><br><span class="line">│       ├── decorators</span><br><span class="line">│       │   └── roles<span class="selector-class">.decorator</span>.ts</span><br><span class="line">│       ├── enums</span><br><span class="line">│       │   ├── contestType-utility.ts</span><br><span class="line">│       │   ├── discipline-utility.ts</span><br><span class="line">│       │   ├── enums-utility.ts</span><br><span class="line">│       │   └── index.ts</span><br><span class="line">│       ├── env_variables.ts</span><br><span class="line">│       ├── exceptions</span><br><span class="line">│       │   ├── api<span class="selector-class">.error</span>.ts</span><br><span class="line">│       │   └── api<span class="selector-class">.exceptions</span>.ts</span><br><span class="line">│       ├── extensions.ts</span><br><span class="line">│       ├── filters</span><br><span class="line">│       │   └── exception<span class="selector-class">.filter</span>.ts</span><br><span class="line">│       ├── generators</span><br><span class="line">│       │   └── id<span class="selector-class">.generator</span>.ts</span><br><span class="line">│       ├── guards</span><br><span class="line">│       │   └── roles<span class="selector-class">.guard</span>.ts</span><br><span class="line">│       ├── index.ts</span><br><span class="line">│       ├── logger.ts</span><br><span class="line">│       ├── pipes</span><br><span class="line">│       │   └── JoiValidation<span class="selector-class">.pipe</span>.ts</span><br><span class="line">│       ├── types</span><br><span class="line">│       │   ├── express<span class="selector-class">.d</span>.ts</span><br><span class="line">│       │   ├── extensions<span class="selector-class">.d</span>.ts</span><br><span class="line">│       │   └── shared<span class="selector-class">.d</span>.ts</span><br><span class="line">│       └── utils.ts</span><br><span class="line">├── test</span><br><span class="line">│   ├── jest-e2e.json</span><br><span class="line">│   └── test-setup.ts</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── tslint.json</span><br><span class="line">└── webpack</span><br><span class="line">    ├── webpack<span class="selector-class">.config</span><span class="selector-class">.Dev</span>.js</span><br><span class="line">    ├── webpack<span class="selector-class">.config</span><span class="selector-class">.Prod</span>.js</span><br><span class="line">    ├── webpack<span class="selector-class">.config</span><span class="selector-class">.Test</span>.js</span><br><span class="line">    └── webpack<span class="selector-class">.config</span><span class="selector-class">.base</span>.js</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>根目录中存放webpack、微服务配置 + 项目文档</li><li><code>src</code>中会对功能进行划分建不同的文件夹： <code>api</code>、<code>core</code>、<code>dynamodb-stream</code>、<code>image-resizer</code></li><li>在核心模块中，按照功能模块进划分，与之相关的entity、service放置在同一文件夹中</li><li>抽离公共配置到<code>shared</code>文件夹：常量、自定义的装饰器、统一错误处理、过滤器、生成器、守卫、日志服务</li></ul><p>第三个参考项目：</p><p>技术栈：使用 NestJS 的 Blog/CMS， RESTful API 服务端应用</p><p>项目地址：<a href="https://github.com/surmon-china/nodepress">surmon-china/nodepressTemplate</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── API_DOC.md</span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── classified</span><br><span class="line">├── cspell.json</span><br><span class="line">├── dbbackup</span><br><span class="line">├── logo.png</span><br><span class="line">├── logo.psd</span><br><span class="line">├── nest-cli.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scripts</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── dbbackup.<span class="keyword">sh</span></span><br><span class="line">│   ├── dbrecover.<span class="keyword">sh</span></span><br><span class="line">│   └── deploy.<span class="keyword">sh</span></span><br><span class="line">├── src</span><br><span class="line">│   ├── app.config.<span class="keyword">ts</span></span><br><span class="line">│   ├── app.controller.spec.<span class="keyword">ts</span></span><br><span class="line">│   ├── app.controller.<span class="keyword">ts</span></span><br><span class="line">│   ├── app.environment.<span class="keyword">ts</span></span><br><span class="line">│   ├── app.module.<span class="keyword">ts</span></span><br><span class="line">│   ├── constants</span><br><span class="line">│   │   ├── cache.constant.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── meta.constant.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── <span class="built_in">system</span>.constant.<span class="keyword">ts</span></span><br><span class="line">│   │   └── text.constant.<span class="keyword">ts</span></span><br><span class="line">│   ├── decorators</span><br><span class="line">│   │   ├── cache.decorator.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── http.decorator.<span class="keyword">ts</span></span><br><span class="line">│   │   └── query-params.decorator.<span class="keyword">ts</span></span><br><span class="line">│   ├── errors</span><br><span class="line">│   │   ├── <span class="keyword">bad</span>-request.error.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── custom.error.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── forbidden.error.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── unauthorized.error.<span class="keyword">ts</span></span><br><span class="line">│   │   └── validation.error.<span class="keyword">ts</span></span><br><span class="line">│   ├── filters</span><br><span class="line">│   │   └── error.<span class="built_in">filter</span>.<span class="keyword">ts</span></span><br><span class="line">│   ├── guards</span><br><span class="line">│   │   ├── auth.guard.<span class="keyword">ts</span></span><br><span class="line">│   │   └── humanized-auth.guard.<span class="keyword">ts</span></span><br><span class="line">│   ├── interceptors</span><br><span class="line">│   │   ├── cache.interceptor.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── error.interceptor.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── logging.interceptor.<span class="keyword">ts</span></span><br><span class="line">│   │   └── transform.interceptor.<span class="keyword">ts</span></span><br><span class="line">│   ├── interfaces</span><br><span class="line">│   │   ├── http.interface.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── mongoose.interface.<span class="keyword">ts</span></span><br><span class="line">│   │   └── state.interface.<span class="keyword">ts</span></span><br><span class="line">│   ├── main.<span class="keyword">ts</span></span><br><span class="line">│   ├── middlewares</span><br><span class="line">│   │   ├── cors.middleware.<span class="keyword">ts</span></span><br><span class="line">│   │   └── origin.middleware.<span class="keyword">ts</span></span><br><span class="line">│   ├── models</span><br><span class="line">│   │   └── <span class="built_in">extend</span>.model.<span class="keyword">ts</span></span><br><span class="line">│   ├── modules</span><br><span class="line">│   │   ├── announcement</span><br><span class="line">│   │   │   ├── announcement.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── announcement.model.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── announcement.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── announcement.service.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── article</span><br><span class="line">│   │   │   ├── article.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── article.model.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── article.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── article.service.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── auth</span><br><span class="line">│   │   │   ├── auth.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── auth.interface.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── auth.model.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── auth.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── auth.service.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── jwt.strategy.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── category</span><br><span class="line">│   │   │   ├── category.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── category.model.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── category.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── category.service.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── comment</span><br><span class="line">│   │   │   ├── comment.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── comment.model.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── comment.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── comment.service.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── expansion</span><br><span class="line">│   │   │   ├── expansion.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── expansion.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── expansion.service.dbbackup.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── expansion.service.statistic.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── like</span><br><span class="line">│   │   │   ├── like.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── like.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── like.service.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── option</span><br><span class="line">│   │   │   ├── option.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── option.model.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── option.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── option.service.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── syndication</span><br><span class="line">│   │   │   ├── syndication.controller.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── syndication.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── syndication.service.<span class="keyword">ts</span></span><br><span class="line">│   │   └── <span class="keyword">tag</span></span><br><span class="line">│   │       ├── <span class="keyword">tag</span>.controller.<span class="keyword">ts</span></span><br><span class="line">│   │       ├── <span class="keyword">tag</span>.model.<span class="keyword">ts</span></span><br><span class="line">│   │       ├── <span class="keyword">tag</span>.module.<span class="keyword">ts</span></span><br><span class="line">│   │       └── <span class="keyword">tag</span>.service.<span class="keyword">ts</span></span><br><span class="line">│   ├── pipes</span><br><span class="line">│   │   └── validation.pipe.<span class="keyword">ts</span></span><br><span class="line">│   ├── processors</span><br><span class="line">│   │   ├── cache</span><br><span class="line">│   │   │   ├── cache.config.service.<span class="keyword">ts</span></span><br><span class="line">│   │   │   ├── cache.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── cache.service.<span class="keyword">ts</span></span><br><span class="line">│   │   ├── database</span><br><span class="line">│   │   │   ├── database.module.<span class="keyword">ts</span></span><br><span class="line">│   │   │   └── database.provider.<span class="keyword">ts</span></span><br><span class="line">│   │   └── helper</span><br><span class="line">│   │       ├── helper.module.<span class="keyword">ts</span></span><br><span class="line">│   │       ├── helper.service.akismet.<span class="keyword">ts</span></span><br><span class="line">│   │       ├── helper.service.<span class="keyword">cs</span>.<span class="keyword">ts</span></span><br><span class="line">│   │       ├── helper.service.email.<span class="keyword">ts</span></span><br><span class="line">│   │       ├── helper.service.google.<span class="keyword">ts</span></span><br><span class="line">│   │       ├── helper.service.ip.<span class="keyword">ts</span></span><br><span class="line">│   │       └── helper.service.seo.<span class="keyword">ts</span></span><br><span class="line">│   └── transformers</span><br><span class="line">│       ├── codec.transformer.<span class="keyword">ts</span></span><br><span class="line">│       ├── error.transformer.<span class="keyword">ts</span></span><br><span class="line">│       ├── model.transformer.<span class="keyword">ts</span></span><br><span class="line">│       ├── mongoose.transformer.<span class="keyword">ts</span></span><br><span class="line">│       └── urlmap.transformer.<span class="keyword">ts</span></span><br><span class="line">├── test</span><br><span class="line">│   ├── app.e2e-spec.<span class="keyword">ts</span></span><br><span class="line">│   └── jest-e2e.json</span><br><span class="line">├── tsconfig.build.json</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── tsconfig.spec.json</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li> 项目文档及相关的资源在根目录</li><li><code>src</code>中<code>modules</code>会对功能进行划分建不同的文件夹</li><li>单个功能文件夹中，会包括一个完整CURD的相关文件(model/controller/module/service)</li><li>把公共的代码（按照nestjs逻辑分层）拆成单独的文件夹<code>guards</code>、<code>filters</code>、<code>decorators</code>、<code>interceptors</code>、<code>interfaces</code>、<code>errors</code></li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>项目：<a href="https://github.com/CatsMiaow/node-nestjs-structure">CatsMiaow/node-nestjs-structure</a></p><p>下面的项目结构：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+-- bin                  <span class="regexp">//</span> Custom tasks</span><br><span class="line">+-- dist                 <span class="regexp">//</span> Source build</span><br><span class="line">+-- public               <span class="regexp">//</span> Static Files</span><br><span class="line">+-- src</span><br><span class="line">|   +-- config           <span class="regexp">//</span> Environment Configuration</span><br><span class="line">|   +-- entity           <span class="regexp">//</span> TypeORM Entities generated by `typeorm-model-generator` module</span><br><span class="line">|   +-- auth             <span class="regexp">//</span> Authentication</span><br><span class="line">|   +-- common           <span class="regexp">//</span> Global Nest Module</span><br><span class="line">|   |   +-- constants    <span class="regexp">//</span> Constant value and Enum</span><br><span class="line">|   |   +-- controllers  <span class="regexp">//</span> Nest Controllers</span><br><span class="line">|   |   +-- decorators   <span class="regexp">//</span> Nest Decorators</span><br><span class="line">|   |   +-- dto          <span class="regexp">//</span> DTO (Data Transfer Object) Schema, Validation</span><br><span class="line">|   |   +-- filters      <span class="regexp">//</span> Nest Filters</span><br><span class="line">|   |   +-- guards       <span class="regexp">//</span> Nest Guards</span><br><span class="line">|   |   +-- interceptors <span class="regexp">//</span> Nest Interceptors</span><br><span class="line">|   |   +-- interfaces   <span class="regexp">//</span> TypeScript Interfaces</span><br><span class="line">|   |   +-- middleware   <span class="regexp">//</span> Nest Middleware</span><br><span class="line">|   |   +-- pipes        <span class="regexp">//</span> Nest Pipes</span><br><span class="line">|   |   +-- providers    <span class="regexp">//</span> Nest Providers</span><br><span class="line">|   |   +-- *            <span class="regexp">//</span> models, repositories, services...</span><br><span class="line">|   +-- shared           <span class="regexp">//</span> Shared Nest Modules</span><br><span class="line">|   +-- gql              <span class="regexp">//</span> GraphQL Structure Sample</span><br><span class="line">|   +-- *                <span class="regexp">//</span> Other Nest Modules, non-global, same as common structure above</span><br><span class="line">+-- test                 <span class="regexp">//</span> Jest testing</span><br><span class="line">+-- typings              <span class="regexp">//</span> Modules and global type definitions</span><br></pre></td></tr></table></figure><p>如果是功能模块：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Module structure</span><br><span class="line">// <span class="keyword">Add</span> folders according <span class="keyword">to</span> module scale. <span class="keyword">If</span> it<span class="string">&#x27;s small, you don&#x27;</span>t need <span class="keyword">to</span> <span class="keyword">add</span> folders.</span><br><span class="line">+<span class="comment">-- src/greeter</span></span><br><span class="line">|   +<span class="comment">-- *                // folders</span></span><br><span class="line">|   +<span class="comment">-- greeter.constant.ts</span></span><br><span class="line">|   +<span class="comment">-- greeter.controller.ts</span></span><br><span class="line">|   +<span class="comment">-- greeter.service.ts</span></span><br><span class="line">|   +<span class="comment">-- greeter.module.ts</span></span><br><span class="line">|   +<span class="comment">-- greeter.*.ts</span></span><br><span class="line">|   +<span class="comment">-- index.ts</span></span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>项目文档及相关的资源在根目录，包括<code>typings</code>、<code>test</code>、<code>bin</code></li><li><code>src</code>中会对功能进行划分建不同的文件夹</li><li>抽离公共代码到<code>common</code>文件夹，配置文件放在<code>config</code>文件夹，实体类放置在<code>entity</code>中</li><li>鉴权相关的逻辑放在<code>auth</code></li><li>把同类的<code>guards</code>、<code>filters</code>、<code>decorators</code>、<code>interceptors</code>、<code>interfaces</code>、<code>errors</code>存放在<code>common</code>文件夹中</li></ul><h2 id="代码规范-风格指南"><a href="#代码规范-风格指南" class="headerlink" title="代码规范(风格指南)"></a>代码规范(风格指南)</h2><p>我们对Angular风格指南进行了摘抄，如下：</p><blockquote><p>参考：<a href="https://angular.cn/guide/styleguide">Angular风格指南</a></p></blockquote><h3 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h3><p><strong>坚持</strong>每个文件只定义一样东西（例如服务或组件）</p><p><strong>考虑</strong>把文件大小限制在 400 行代码以内</p><p><strong>坚持</strong>定义简单函数</p><p><strong>考虑</strong>限制在 75 行之内</p><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p><strong>坚持</strong>所有符号使用一致的命名规则</p><p><strong>坚持</strong>遵循同一个模式来描述符号的特性和类型</p><h4 id="使用点和横杠来分隔文件名"><a href="#使用点和横杠来分隔文件名" class="headerlink" title="使用点和横杠来分隔文件名"></a>使用点和横杠来分隔文件名</h4><p><strong>坚持</strong> 在描述性名字中，用横杠来分隔单词。</p><p><strong>坚持</strong>使用点来分隔描述性名字和类型。</p><p><strong>坚持</strong>遵循先描述组件特性，再描述它的类型的模式，对所有组件使用一致的类型命名规则。推荐的模式为 <code>feature.type.ts</code>。</p><p><strong>坚持</strong>使用惯用的后缀来描述类型，包括 <code>*.service</code>、<code>*.component</code>、<code>*.pipe</code>、<code>.module</code>、<code>.directive</code>。 必要时可以创建更多类型名，但必须注意，不要创建太多。</p><h4 id="符号名与文件名"><a href="#符号名与文件名" class="headerlink" title="符号名与文件名"></a>符号名与文件名</h4><p><strong>坚持</strong>为所有东西使用一致的命名约定，以它们所代表的东西命名。</p><p><strong>坚持</strong>使用<strong>大写驼峰命名法来命名类</strong></p><p><strong>坚持</strong>匹配符号名与它所在的文件名</p><p><strong>坚持</strong>在符号名后面追加约定的类型后缀（例如 <code>Component</code>、<code>Directive</code>、<code>Module</code>、<code>Pipe</code>、<code>Service</code>）。</p><p><strong>坚持</strong>在文件名后面追加约定的类型后缀（例如 <code>.component.ts</code>、<code>.directive.ts</code>、<code>.module.ts</code>、<code>.pipe.ts</code>、<code>.service.ts</code>）</p><p><strong>坚持</strong>使用<em>中线命名法（dashed-case）</em>或叫<em>烤串命名法（kebab-case）</em>来命名组件的元素选择器。</p><h4 id="服务名-amp-管道名"><a href="#服务名-amp-管道名" class="headerlink" title="服务名&amp;管道名"></a>服务名&amp;管道名</h4><p><strong>坚持</strong>使用一致的规则命名服务，以它们的特性来命名</p><p><strong>坚持</strong>为服务的类名加上 <code>Service</code> 后缀。 例如，获取数据或英雄列表的服务应该命名为 <code>DataService</code> 或 <code>HeroService</code></p><p><strong>坚持</strong>为所有管道使用一致的命名约定，用它们的特性来命名。 管道类名应该使用 <a href="https://angular.cn/guide/glossary#case-types">UpperCamelCase</a>（类名的通用约定），而相应的 <code>name</code> 字符串应该使用 lowerCamelCase。 <code>name</code> 字符串中不应该使用中线（“中线格式”或“烤串格式”）。例如：</p><p><code>ellipsis.pipe.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;ellipsis&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">EllipsisPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>和</p><p><code>init-caps.pipe.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;initCaps&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">InitCapsPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>坚持</strong>在模块中只包含模块间的依赖关系，所有其它逻辑都应该放到服务中</p><p><strong>坚持</strong>把可复用的逻辑放到服务中，保持组件简单，聚焦于它们预期目的</p><p><strong>坚持</strong>在同一个注入器内，把服务当做单例使用，用它们来共享数据和功能</p><p><strong>坚持</strong>创建封装在上下文中的单一职责的服务</p><p><strong>坚持</strong>当服务成长到超出单一用途时，创建一个新服务</p><p><strong>坚持</strong>把数据操作和与数据交互的逻辑重构到服务里。</p><h4 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h4><p><strong>坚持</strong>把应用的引导程序和平台相关的逻辑放到名为 <code>main.ts</code> 的文件里</p><p><strong>坚持</strong>在引导逻辑中包含错误处理代码</p><p><strong>避免</strong>把应用逻辑放在 <code>main.ts</code> 中，而应放在组件或服务里</p><h4 id="测试文件名"><a href="#测试文件名" class="headerlink" title="测试文件名"></a>测试文件名</h4><p><strong>单元测试：</strong></p><p><strong>坚持</strong>测试规格文件名与被测试组件文件名相同</p><p><strong>坚持</strong>测试规格文件名添加 <code>.spec</code> 后缀</p><p><strong>端到端的测试：</strong></p><p><strong>坚持</strong>端到端测试规格文件和它们所测试的特性同名，添加 <code>.e2e-spec</code> 后缀，或者放在特定的文件夹中。</p><h3 id="其他原则"><a href="#其他原则" class="headerlink" title="其他原则"></a>其他原则</h3><ul><li><p>定位：</p><p><strong>坚持</strong>直观、简单和快速地定位代码。</p></li><li><p>识别：</p><p><strong>坚持</strong>命名文件到这个程度：看到名字立刻知道它包含了什么，代表了什么。</p><p><strong>坚持</strong>文件名要具有说明性，确保文件中只包含一个组件。</p><p><strong>避免</strong>创建包含多个组件、服务或者混合体的文件。</p></li><li><p>扁平</p><p><strong>坚持</strong>尽可能保持扁平的目录结构。</p><p><strong>考虑</strong>当同一目录下达到 7 个或更多个文件时创建子目录。</p><p><strong>考虑</strong>配置 IDE，以隐藏无关的文件，例如生成出来的 <code>.js</code> 文件和 <code>.js.map</code> 文件等。</p></li><li><p>T-DRY</p><p><strong>坚持</strong> DRY（Don’t Repeat Yourself，不重复自己）。</p><p><strong>避免</strong>过度 DRY，以致牺牲了阅读性</p></li><li><p>代码结构</p><p><strong>坚持</strong>从零开始，但要考虑应用程序接下来的路往哪儿走</p><p><strong>坚持</strong>有一个近期实施方案和一个长期的愿景</p><p><strong>坚持</strong>把所有源代码都放到名为 <code>src</code> 的目录里</p><p><strong>坚持</strong>如果组件具有多个伴生文件 (<code>.ts</code>、<code>.html</code>、<code>.css</code> 和 <code>.spec</code>)，就为它创建一个文件夹</p></li><li><p>ESLint</p><p><strong>坚持</strong>使用VSCode等IDE、配合ESLint + Prettier等工具来整理代码格式、检查代码风格问题。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是《nestjs搭建通用业务框架》系列的第4篇，进入开发具体的功能之前，养成良好的工程目录与代码风格的习惯，目的构建大型复杂项目，提高代码易维护性。&lt;/p&gt;</summary>
    
    
    
    <category term="nestjs搭建通用业务框架" scheme="https://www.toimc.com/categories/nestjs%E6%90%AD%E5%BB%BA%E9%80%9A%E7%94%A8%E4%B8%9A%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="node.js" scheme="https://www.toimc.com/tags/node-js/"/>
    
    <category term="nestjs" scheme="https://www.toimc.com/tags/nestjs/"/>
    
    <category term="web框架" scheme="https://www.toimc.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>什么是依赖注入?</title>
    <link href="https://www.toimc.com/what-is-dependency-injection/"/>
    <id>https://www.toimc.com/what-is-dependency-injection/</id>
    <published>2021-03-12T02:39:50.000Z</published>
    <updated>2021-03-12T09:48:11.539Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是nestjs系列文章的番外篇，主要是介绍控制反转Invention of Control(IoC)和依赖注入Dependecy Injection(DI)，作为nestjs和angular的核心概念，学习它们有利于更好的进行框架的学习。</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>控制反转（Inversion of Control）</strong>是一种是面向对象编程中的一种设计原则，用来减低计算机代码之间的耦合度。其基本思想是：借助于“第三方”实现具有依赖关系的对象之间的解耦。</p><p><strong>依赖注入</strong>是一种用于实现IoC的设计模式，它允许在类外创建依赖对象，并通过不同的方式将这些对象提供给类。使用DI，我们将依赖对象的创建和绑定移到依赖它们的类之外。具体的做法，比如：将实例变量传入到一个对象中去(Dependency injection means giving an object its instance variables)</p><p>简单来说它和依赖注入间的区别就是：</p><ul><li><strong>控制反转是一种设计思想</strong></li><li><strong>依赖注入是一种编程技巧</strong></li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>先看个例子：我们希望在通知组件(NotificationComponent)中通过消息服务(MessageService)发送一条消息。</p><p>如果不使用依赖注入的话，我们的代码大概长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationComponent</span> </span>&#123;</span><br><span class="line">  msg: MessageService;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.msg = <span class="keyword">new</span> MessageService();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sendMsg</span>(<span class="params">msgType: string, info: string</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.msg.send(msgType, info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用依赖注入时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">msg: MessageService</span>)</span> &#123;&#125;  <span class="comment">// Angular 中注入依赖的方式</span></span><br><span class="line">  <span class="function"><span class="title">sendMsg</span>(<span class="params">msgType: string, info: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.msg.send(msgType, info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过对比，可以看到使用依赖注入有两个很显然的优点：</p><ul><li>代码的行数变少了</li><li><code>NotificationComponent</code> 与 <code>MessageService</code> 间的耦合性降低了</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在控制反转中，”控制“是指对程序流程的控制，”反转“则是将控制权从程序员的手里反转到了外层框架。</p><p>控制反转是一种在软件工程中解耦合的思想，调用类只依赖接口，而不依赖具体的实现类，减少了耦合。控制权交给了容器，在运行的时候才由容器决定将具体的实现动态的“注入”到调用类的对象中。</p><p>既然控制反转是一种设计思想，那么作为相应实现方式之一的依赖注入（模板模式也是种实现方式）必然也遵循此思想。</p><p>依赖注入是一种设计模式，可以作为控制反转的一种实现方式。依赖注入就是将实例变量传入到一个对象中去(Dependency injection means giving an object its instance variables)。</p><p>通过IoC框架，类A依赖类B的强耦合关系可以在运行时通过容器建立，也就是说把创建B实例的工作移交给容器，类A只管使用就可以。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇是nestjs系列文章的番外篇，主要是介绍控制反转Invention of Control(IoC)和依赖注入Dependecy Injection(DI)，作为nestjs和angular的核心概念，学习它们有利于更好的进行框架的学习。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Dependecy Injection(DI)" scheme="https://www.toimc.com/tags/Dependecy-Injection-DI/"/>
    
    <category term="Invention of Control(IoC)" scheme="https://www.toimc.com/tags/Invention-of-Control-IoC/"/>
    
    <category term="依赖注入" scheme="https://www.toimc.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
    <category term="架构思维" scheme="https://www.toimc.com/tags/%E6%9E%B6%E6%9E%84%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>nestjs搭建通用业务框架（3）：核心概念</title>
    <link href="https://www.toimc.com/nestjs-example-project-3/"/>
    <id>https://www.toimc.com/nestjs-example-project-3/</id>
    <published>2021-03-11T01:30:45.000Z</published>
    <updated>2021-03-12T03:40:36.290Z</updated>
    
    <content type="html"><![CDATA[<p>这是《nestjs搭建通用业务框架》系列的第3篇，主要是介绍nestjs中的核心概念，理解这些概念与使用方法是今后学习上的垫脚石。PS: 对于本篇的学习，你需要有一定的TS的基础，理解起来才会比较顺畅。</p><span id="more"></span><blockquote><p>本章的内容不是随意的复制、粘贴官方的译本，这样没有任何学习的价值。所有的内容经过个人的整理，也算是知识的输出，大家且学且手下留情。</p><p>其中比较重要的内容：装饰器、装饰器 - 依赖注入，在依赖注入部分因为概念比较难理解，所以后面打算单独再写一篇关于依赖注入（设计模式）的博文！欢迎订阅RSS！</p></blockquote><h2 id="总览概念"><a href="#总览概念" class="headerlink" title="总览概念"></a>总览概念</h2><p>先不废话，给大家总结了一张基础概念的思维导图：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-3/nestjs（TypeScript）核心概念.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>大家可以把上面的图，当成是平时查阅概念的一个索引，我们把相关的内容进行了连接与分层，方便大家学习。</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p><strong>这是nestjs（Angular）学习中非常！非常！非常重要的一部分！</strong>可以说是nestjs借用ES高级特性的一个灵魂~，我们将会从以下几个概念出发来进行学习。</p><p><u>在下面的学习中，不乏会有一些代码的内容，看不懂没有关系</u>，先读每一部分的前置的介绍，然后TS代码的内容，主要是了解基础的应用与该装饰器的作用即可。</p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>控制器负责处理传入的 <strong>请求</strong> 和向客户端返回 <strong>响应</strong> 。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller, Get &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>) <span class="comment">// Controller - 控制器的装饰器， cats - 路由，或者说是请求的一个前缀，类似于 /api/user /api/test ... 中的/api</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CatsController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;ab*cd&#x27;</span>) <span class="comment">// Get - 请求的类型的装饰器</span></span><br><span class="line">  findAll(<span class="meta">@Req</span>() request: Request): <span class="built_in">string</span> &#123; <span class="comment">// 具体对应上面请求的响应函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action returns all cats&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="meta">@HttpCode</span>(<span class="number">204</span>) <span class="comment">// http状态码</span></span><br><span class="line">  <span class="meta">@Header</span>(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">&#x27;none&#x27;</span>) <span class="comment">// 响应头</span></span><br><span class="line">  <span class="function"><span class="title">create</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action adds a new cat&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;docs&#x27;</span>)</span><br><span class="line">  <span class="meta">@Redirect</span>(<span class="string">&#x27;https://docs.nestjs.com&#x27;</span>, <span class="number">302</span>) <span class="comment">// 重定向</span></span><br><span class="line">  <span class="function"><span class="title">getDocs</span>(<span class="params"><span class="meta">@Query</span>(<span class="string">&#x27;version&#x27;</span>) version</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (version &amp;&amp; version === <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">url</span>: <span class="string">&#x27;https://docs.nestjs.com/v5/&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>) <span class="comment">// 参数  - 路径传参使用Param，url传参使用Query，post传参使用Body</span></span><br><span class="line">  findOne(<span class="meta">@Param</span>() params): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params.id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;params.id&#125;</span> cat`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g controller [<span class="built_in">file</span>-<span class="built_in">name</span>]</span><br></pre></td></tr></table></figure><p>来创建一个标准的控制器文件。</p><ul><li><p>路由 - <code>@Controller</code></p></li><li><p>Request - 如下表：</p><p>了解Express的同学应该知道，请求对象<code>req</code>与响应对象<code>res</code>：</p><table><thead><tr><th>装饰器</th><th>对应的Express中的对象或者用法</th></tr></thead><tbody><tr><td><code>@Request()</code></td><td><code>req</code></td></tr><tr><td><code>@Response() @Res()*</code></td><td><code>res</code></td></tr><tr><td><code>@Next()</code></td><td><code>next</code></td></tr><tr><td><code>@Session()</code></td><td><code>req.session</code></td></tr><tr><td><code>@Param(key?: string)</code></td><td><code>req.params</code> / <code>req.params[key]</code></td></tr><tr><td><code>@Body(key?: string)</code></td><td><code>req.body</code> / <code>req.body[key]</code></td></tr><tr><td><code>@Query(key?: string)</code></td><td><code>req.query</code> / <code>req.query[key]</code></td></tr><tr><td><code>@Headers(name?: string)</code></td><td><code>req.headers</code> / <code>req.headers[name]</code></td></tr><tr><td><code>@Ip()</code></td><td><code>req.ip</code></td></tr></tbody></table></li><li><p>资源（请求方法）- <code>@Put()</code> 、 <code>@Delete()</code>、 <code>@Patch()</code>、 <code>@Options()</code>、 <code>@Head()</code>和 <code>@All()</code>。这些表示各自的 <code>HTTP</code>请求方法。</p></li><li><p>路由通配符 - 设置在上面的资源中的正则表达式，字符 <code>?</code> 、 <code>+</code> 、 <code>*</code> 以及 <code>()</code> 是它们的正则表达式对应项的子集。连字符 (<code>-</code>) 和点 (<code>.</code>) 按字符串路径解析。如：<code>@Get(&#39;ab*cd&#39;)</code>会匹配成<code>abcd</code>， <code>ab_cd</code>，<code>abecd</code>等。</p></li><li><p>状态码 - <code>@HttpCode()</code></p></li><li><p>响应头 - <code>@Header</code></p></li></ul><h3 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h3><p>提供者是<code>nest</code>借用<code>Angular</code>的设计模式引入的一个概念。</p><blockquote><p>Providers 是 <code>Nest</code> 的一个基本概念，许多基本的 <code>Nest</code> 类可能被视为 provider - <code>service</code>,<code> repository</code>, <code>factory</code>, <code>helper</code> 等等，他们都可以通过 <code>constructor</code> <strong>注入</strong>依赖关系。</p></blockquote><p><code>providers</code>就是在代码组织上抽象的一层存放公共代码的部分，在程序内部交由框架来处理依赖关系，通过<code>providers</code>和<code>@Injectable()</code>注解可以自由的使用这些公共的代码中的逻辑。</p><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>这张图很好的解释了<code>@Injectable()</code>的作用：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-3/injector-injects.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>解释：</p><p>一个<code>ServiceA</code>被加上<code>@Injectable()</code>的注解之后，就变成了一个可以被其他<code>Component</code>在构造器部分引用的参数，在<code>nest</code>的提供者<code>providers:[]</code>中需要添加对应的<code>ServiceA</code>，如：<code>providers: [ ServiceA ]</code>，以便框架自动来处理依赖关系，并进行<u>必要的</u>实例化。</p><p>用法：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest <span class="keyword">generate</span> service [service-name]</span><br></pre></td></tr></table></figure><h4 id="依赖注入-重要"><a href="#依赖注入-重要" class="headerlink" title="依赖注入(重要)"></a>依赖注入(重要)</h4><p>主要有三类具体的应用：</p><ul><li>管道 - 实现数据的转换与验证</li><li>守卫 - 实现流程控制，鉴权管理</li><li>拦截器 - 绑定函数执行前后的处理函数，如：请求&amp;响应拦截器、错误统一处理、缓存等</li></ul><blockquote><p>这三类全是<code>@Injectable()</code>修饰的，官方在架构上提供的现成的工具类，管道应实现 <code>PipeTransform</code> 接口，守卫应该实现 <code>CanActivate</code> 接口，拦截器应该实现 <code>NestInterceptor</code> 接口。</p></blockquote><p>要理解依赖注入，要先看个例子：我们希望在通知组件(NotificationComponent)中通过消息服务(MessageService)发送一条消息。</p><p>如果不使用依赖注入的话，我们的代码大概长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationComponent</span> </span>&#123;</span><br><span class="line">  msg: MessageService;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.msg = <span class="keyword">new</span> MessageService();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sendMsg</span>(<span class="params">msgType: string, info: string</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.msg.send(msgType, info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用依赖注入时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">msg: MessageService</span>)</span> &#123;&#125;  <span class="comment">// Angular 中注入依赖的方式</span></span><br><span class="line">  <span class="function"><span class="title">sendMsg</span>(<span class="params">msgType: string, info: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.msg.send(msgType, info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过对比，可以看到使用依赖注入有两个很显然的优点：</p><ul><li>代码的行数变少了</li><li>NotificationComponent 与 MessageService 间的耦合性降低了</li></ul><p>大家先可以去了解一下IoC（Inversion of Control）控制反转，简单来说它和依赖注入（Dependency Injection）间的区别就是：</p><ul><li><strong>依赖注入是一种编程技巧</strong></li><li><strong>控制反转是一种设计思想</strong></li></ul><p><strong>依赖注入</strong>就是不通过 new 这种方式来在类（NotificationComponent）的内部创建所依赖类（MessageService）的对象，而是在外部创建好需要依赖的类对象之后通过构造函数等方式注入进来就可以了。</p><p>在<strong>控制反转</strong>中，”控制“是指对程序流程的控制，”反转“则是将控制权从程序员的手里反转到了外层框架。</p><ol><li><p>管道(Pipe)</p><p>管道有两个作用:</p><ul><li><strong>转换</strong>：管道将输入数据转换为所需的数据输出</li><li><strong>验证</strong>：对输入数据进行验证，如果验证成功继续传递; 验证失败则抛出异常;</li></ul><p>按照作用分的类型：内置管道、结构验证、类验证、转换管道</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-3/Pipe_1.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"></li><li><p>守卫(Guard)</p><p>守卫有一个单独的责任，它们根据运行时出现的某些条件（例如权限，角色，访问控制列表等）来确定给定的请求是否由路由处理程序处理。 这通常称为授权。</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-3/Guards_1.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"></li><li><p>拦截器(Interceptor)</p><p>拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以：</p><ul><li>在函数执行之前/之后绑定<strong>额外的逻辑</strong></li><li>转换从函数返回的结果</li><li><strong>转换</strong>从函数抛出的异常</li><li>扩展基本函数行为</li><li>根据所选条件完全重写函数 (例如, 缓存目的)</li></ul><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-3/Interceptors_1.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"></li></ol><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块化的概念无处不在，在<code>nest</code>中，模块是应用程序的基础的组成部分，如下图：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-3/Modules_1.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>具体特点：</p><ul><li><p>模块是具有 <code>@Module()</code> 装饰器的类。</p></li><li><p>每个 Nest 应用程序至少有一个模块，即根模块。根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。</p></li><li><p>在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的属性，如下表：</p></li></ul><p><code>@module()</code> 装饰器接受一个描述模块属性的对象：</p><table><thead><tr><th>属性名</th><th>解释</th></tr></thead><tbody><tr><td>providers</td><td>由 Nest 注入器实例化的提供者，并且可以至少在整个模块中共享</td></tr><tr><td>controllers</td><td>必须创建的一组控制器</td></tr><tr><td>imports</td><td>导入模块的列表，这些模块导出了此模块中所需提供者</td></tr><tr><td>exports</td><td>由本模块提供并应在其他模块中可用的提供者的子集。</td></tr></tbody></table><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件是在路由处理程序 <strong>之前</strong> 调用的函数，实现 <code>NestMiddleware</code> 接口。</p><p>Nest 中间件实际上等价于 <a href="http://expressjs.com/en/guide/using-middleware.html">express</a> 中间件。 下面是Express官方文档中所述的中间件功能：</p><p>中间件函数可以执行以下任务:</p><ul><li>执行任何代码。</li><li>对请求和响应对象进行更改。</li><li>结束请求-响应周期。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前的中间件函数没有结束请求-响应周期, 它必须调用 <code>next()</code> 将控制传递给下一个中间件函数。否则, 请求将被挂起。</li></ul><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-3/Middlewares_1.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><h2 id="异常过滤器"><a href="#异常过滤器" class="headerlink" title="异常过滤器"></a>异常过滤器</h2><p>内置的<strong>异常层</strong>负责处理整个应用程序中的所有抛出的异常。当捕获到未处理的异常时，最终用户将收到友好的响应。</p><p>开箱即用，此操作由内置的全局异常过滤器执行，该过滤器处理类型 <code>HttpException</code>（及其子类）的异常。每个发生的异常都由全局异常过滤器处理, 当这个异常<strong>无法被识别</strong>时 (既不是 <code>HttpException</code> 也不是继承的类 <code>HttpException</code> ) , 用户将收到以下 <code>JSON</code> 响应:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;statusCode&quot;</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Internal server error&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过本篇的介绍，大家应该有如下的感受：</p><ul><li><code>nest</code>大量使用了注解来简化逻辑</li><li><code>nest</code>的程序设计（架构）很丰富，解耦&amp;易用。解耦不用说，从上面的分层就能看出来；易用，主要体现在语义化关键词、强大的CLI命令。</li></ul><p>核心的概念：模块 -&gt; 控制器 -&gt; 服务、管道、守卫、拦截器 -&gt; 中间件 -&gt; 异常过滤器。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>推荐一些非官方的，用于去理解“依赖注入”的资料：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/113299696">详解Angular依赖注入</a>：国人写的案例，还比较有意思，解释的比较清楚的了，本篇引用了部分内容</li><li><a href="https://angular.cn/guide/architecture-services#dependency-injection-di">Angular - 服务与依赖注入简介</a>：这个是Angular的官方解读，也有配图，我感觉还是比较容易搞清楚的</li><li><a href="https://www.tutorialsteacher.com/ioc/dependency-injection">Dependency Injection</a>：虽然是英文，但是非常推荐去读一读</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是《nestjs搭建通用业务框架》系列的第3篇，主要是介绍nestjs中的核心概念，理解这些概念与使用方法是今后学习上的垫脚石。PS: 对于本篇的学习，你需要有一定的TS的基础，理解起来才会比较顺畅。&lt;/p&gt;</summary>
    
    
    
    <category term="nestjs搭建通用业务框架" scheme="https://www.toimc.com/categories/nestjs%E6%90%AD%E5%BB%BA%E9%80%9A%E7%94%A8%E4%B8%9A%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="node.js" scheme="https://www.toimc.com/tags/node-js/"/>
    
    <category term="nestjs" scheme="https://www.toimc.com/tags/nestjs/"/>
    
    <category term="web框架" scheme="https://www.toimc.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>nestjs搭建通用业务框架（2）：初体验</title>
    <link href="https://www.toimc.com/nestjs-example-project-2/"/>
    <id>https://www.toimc.com/nestjs-example-project-2/</id>
    <published>2021-03-09T13:14:10.000Z</published>
    <updated>2021-03-12T03:40:49.702Z</updated>
    
    <content type="html"><![CDATA[<p>今天是《nestjs搭建通用业务框架》系列的第2篇，主要是介绍如何使用nestjs的CLI工具快速初始化项目，了解项目的启动与调试。PS: 调试技巧非常的重要，有利于后续学习框架的核心的原理。</p><span id="more"></span><h2 id="node环境准备"><a href="#node环境准备" class="headerlink" title="node环境准备"></a>node环境准备</h2><p>node与npm的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜ node -v</span><br><span class="line">nv14.15.1</span><br><span class="line">~</span><br><span class="line">➜ npm -v</span><br><span class="line">6.14.8</span><br></pre></td></tr></table></figure><p>大家使用node官方的LTS的版本即可，<a href="https://nodejs.org/zh-cn/download/">下载地址</a></p><blockquote><p>安装可以使用<code>nrm</code>或者<code>npm config set registry https://registry.npm.taobao.org/</code>来进行加速</p></blockquote><h2 id="安装CLI"><a href="#安装CLI" class="headerlink" title="安装CLI"></a>安装CLI</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 全局安装cli工具</span><br><span class="line">➜ npm i -g @nestjs/cli</span><br><span class="line"><span class="regexp">/Users/m</span>acos<span class="regexp">/.nvm/</span>versions<span class="regexp">/node/</span>v14.<span class="number">15.1</span><span class="regexp">/bin/</span>nest -&gt; <span class="regexp">/Users/m</span>acos<span class="regexp">/.nvm/</span>versions<span class="regexp">/node/</span>v14.<span class="number">15.1</span><span class="regexp">/lib/</span>node_modules<span class="regexp">/@nestjs/</span>cli<span class="regexp">/bin/</span>nest.js</span><br><span class="line">+ @nestjs/cli@<span class="number">7.5</span>.<span class="number">6</span></span><br><span class="line">added <span class="number">15</span> packages from <span class="number">4</span> contributors, removed <span class="number">1080</span> packages and updated <span class="number">262</span> packages <span class="keyword">in</span> <span class="number">12.239</span>s</span><br></pre></td></tr></table></figure><p>初始化项目<code>nest new [project-name]</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">~/Projects/nestjs</span><br><span class="line">➜ nest new nestjs-common-template</span><br><span class="line">⚡  We will scaffold your app <span class="keyword">in</span> a few seconds..</span><br><span class="line"></span><br><span class="line">CREATE nestjs-common-template/.eslintrc.js (631 bytes)</span><br><span class="line">CREATE nestjs-common-template/.prettierrc (51 bytes)</span><br><span class="line">CREATE nestjs-common-template/README.md (3339 bytes)</span><br><span class="line">CREATE nestjs-common-template/nest-cli.json (64 bytes)</span><br><span class="line">CREATE nestjs-common-template/package.json (1984 bytes)</span><br><span class="line">CREATE nestjs-common-template/tsconfig.build.json (97 bytes)</span><br><span class="line">CREATE nestjs-common-template/tsconfig.json (339 bytes)</span><br><span class="line">CREATE nestjs-common-template/src/app.controller.spec.ts (617 bytes)</span><br><span class="line">CREATE nestjs-common-template/src/app.controller.ts (274 bytes)</span><br><span class="line">CREATE nestjs-common-template/src/app.module.ts (249 bytes)</span><br><span class="line">CREATE nestjs-common-template/src/app.service.ts (142 bytes)</span><br><span class="line">CREATE nestjs-common-template/src/main.ts (208 bytes)</span><br><span class="line">CREATE nestjs-common-template/<span class="built_in">test</span>/app.e2e-spec.ts (630 bytes)</span><br><span class="line">CREATE nestjs-common-template/<span class="built_in">test</span>/jest-e2e.json (183 bytes)</span><br><span class="line"></span><br><span class="line">? Which package manager would you ❤️  to use? (Use arrow keys)</span><br><span class="line">❯ npm</span><br><span class="line">  yarn</span><br><span class="line">  </span><br><span class="line">▹▹▹▹▸ Installation <span class="keyword">in</span> progress... ☕</span><br><span class="line">🚀  Successfully created project nestjs-common-template</span><br><span class="line">👉  Get started with the following commands:</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> nestjs-common-template</span><br><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                          Thanks <span class="keyword">for</span> installing Nest 🙏</span><br><span class="line">                 Please consider donating to our open collective</span><br><span class="line">                        to <span class="built_in">help</span> us maintain this package.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               🍷  Donate: https://opencollective.com/nest</span><br></pre></td></tr></table></figure><p>运行项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~/Projects/nestjs took 22s 385ms</span><br><span class="line">➜ <span class="built_in">cd</span> nestjs-common-template/</span><br><span class="line">nestjs-common-template on  HEAD [?] is 📦 v0.0.1 via ⬢ v14.15.1</span><br><span class="line">➜ npm run start</span><br><span class="line"></span><br><span class="line">&gt; nestjs-common-template@0.0.1 start /Users/macos/Projects/nestjs/nestjs-common-template</span><br><span class="line">&gt; nest start</span><br><span class="line"></span><br><span class="line">[Nest] 5918   - 2021/03/09 下午11:06:10   [NestFactory] Starting Nest application...</span><br><span class="line">[Nest] 5918   - 2021/03/09 下午11:06:10   [InstanceLoader] AppModule dependencies initialized +47ms</span><br><span class="line">[Nest] 5918   - 2021/03/09 下午11:06:10   [RoutesResolver] AppController &#123;&#125;: +4ms</span><br><span class="line">[Nest] 5918   - 2021/03/09 下午11:06:10   [RouterExplorer] Mapped &#123;, GET&#125; route +2ms</span><br><span class="line">[Nest] 5918   - 2021/03/09 下午11:06:10   [NestApplication] Nest application successfully started +1ms</span><br></pre></td></tr></table></figure><p>下面可以打开浏览器来访问<code>http://localhost:3000</code>可以看到<code>hello world</code>的字样。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>说明我们的项目启动成功了。</p><h2 id="项目目录与package-json"><a href="#项目目录与package-json" class="headerlink" title="项目目录与package.json"></a>项目目录与<code>package.json</code></h2><p>先来看看项目的工程目录：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── dist                       <span class="comment">// 打包过后，目标代码</span></span><br><span class="line">│   ├── app<span class="selector-class">.controller</span><span class="selector-class">.d</span>.ts</span><br><span class="line">│   ├── app<span class="selector-class">.controller</span>.js</span><br><span class="line">│   ├── app<span class="selector-class">.controller</span><span class="selector-class">.js</span>.map</span><br><span class="line">│   ├── app<span class="selector-class">.module</span><span class="selector-class">.d</span>.ts</span><br><span class="line">│   ├── app<span class="selector-class">.module</span>.js</span><br><span class="line">│   ├── app<span class="selector-class">.module</span><span class="selector-class">.js</span>.map</span><br><span class="line">│   ├── app<span class="selector-class">.service</span><span class="selector-class">.d</span>.ts</span><br><span class="line">│   ├── app<span class="selector-class">.service</span>.js</span><br><span class="line">│   ├── app<span class="selector-class">.service</span><span class="selector-class">.js</span>.map</span><br><span class="line">│   ├── <span class="selector-tag">main</span><span class="selector-class">.d</span>.ts</span><br><span class="line">│   ├── <span class="selector-tag">main</span>.js</span><br><span class="line">│   ├── <span class="selector-tag">main</span><span class="selector-class">.js</span>.map</span><br><span class="line">│   └── tsconfig<span class="selector-class">.build</span>.tsbuildinfo</span><br><span class="line">├── nest-cli<span class="selector-class">.json</span>              <span class="comment">// cli配置文件</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package<span class="selector-class">.json</span>               <span class="comment">// npm项目配置</span></span><br><span class="line">├── <span class="attribute">src</span>                        // 源文件</span><br><span class="line">│   ├── app<span class="selector-class">.controller</span><span class="selector-class">.spec</span><span class="selector-class">.ts</span> <span class="comment">// 测试文件</span></span><br><span class="line">│   ├── app<span class="selector-class">.controller</span><span class="selector-class">.ts</span>      <span class="comment">// 项目根控制器</span></span><br><span class="line">│   ├── app<span class="selector-class">.module</span><span class="selector-class">.ts</span>          <span class="comment">// 项目根模块</span></span><br><span class="line">│   ├── app<span class="selector-class">.service</span><span class="selector-class">.ts</span>         <span class="comment">// 项目根服务</span></span><br><span class="line">│   └── <span class="selector-tag">main</span><span class="selector-class">.ts</span>                <span class="comment">// 主入口文件</span></span><br><span class="line">├── test                       <span class="comment">// 测试配置文件 + 测试文件</span></span><br><span class="line">│   ├── app<span class="selector-class">.e2e-spec</span>.ts</span><br><span class="line">│   └── jest-e2e.json</span><br><span class="line">├── tsconfig<span class="selector-class">.build</span><span class="selector-class">.json</span>        <span class="comment">// ts打包配置</span></span><br><span class="line">└── tsconfig<span class="selector-class">.json</span>              <span class="comment">// ts配置</span></span><br></pre></td></tr></table></figure><p>然后我们再来看看<code>package.json</code>，其中有两个部分非常需要注意：</p><ul><li>scripts自定义的脚本：<ul><li><code>start</code>: 默认启动脚本</li><li><code>start:dev</code>: 开启代码变化监视的启动脚本</li><li><code>start:debug</code>：开启代码debug调试的启动脚本</li><li><code>start:prod</code>：运行最终打包过后的代码</li></ul></li><li>jest配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;prebuild&quot;</span>: <span class="string">&quot;rimraf dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;nest build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;nest start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:dev&quot;</span>: <span class="string">&quot;nest start --watch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:debug&quot;</span>: <span class="string">&quot;nest start --debug --watch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:prod&quot;</span>: <span class="string">&quot;node dist/main&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint \&quot;&#123;src,apps,libs,test&#125;/**/*.ts\&quot; --fix&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;jest&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:watch&quot;</span>: <span class="string">&quot;jest --watch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:cov&quot;</span>: <span class="string">&quot;jest --coverage&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:debug&quot;</span>: <span class="string">&quot;node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:e2e&quot;</span>: <span class="string">&quot;jest --config ./test/jest-e2e.json&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="attr">&quot;jest&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;moduleFileExtensions&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;json&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ts&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;src&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;testRegex&quot;</span>: <span class="string">&quot;.*\\.spec\\.ts$&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;transform&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;^.+\\.(t|j)s$&quot;</span>: <span class="string">&quot;ts-jest&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;collectCoverageFrom&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;**/*.(t|j)s&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;coverageDirectory&quot;</span>: <span class="string">&quot;../coverage&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;testEnvironment&quot;</span>: <span class="string">&quot;node&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主程序文件（入口文件）main-ts"><a href="#主程序文件（入口文件）main-ts" class="headerlink" title="主程序文件（入口文件）main.ts"></a>主程序文件（入口文件）<code>main.ts</code></h2><p>在项目的<code>src</code>目录中，有整个项目的主程序文件<code>main.ts</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NestFactory &#125; from &#39;@nestjs&#x2F;core&#39;;</span><br><span class="line">import &#123; AppModule &#125; from &#39;.&#x2F;app.module&#39;;</span><br><span class="line"></span><br><span class="line">async function bootstrap() &#123;</span><br><span class="line">  const app &#x3D; await NestFactory.create(AppModule);</span><br><span class="line">  await app.listen(3000);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure><p>这主程序文件中：</p><ul><li>使用<code>NestFactory</code>初始化了一个Nest实例<code>app</code></li><li>定义服务监听<code>3000</code>端口</li><li>使用<code>bootstrap()</code>启动了该服务</li></ul><p>我们可以看到该文件引入了一个<code>模块</code>即<code>./app.module</code>，可以从这个文件找到一些整个应用的蛛丝马迹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppController &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppService &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这里使用到了<code>TypeScript</code>中的<code>Decorator</code>，引入了一个<code>AppService</code>和<code>AppController</code>，如果熟悉Angular的小伙伴，看到这里就惊讶了。卧槽，这不是Augular吗？是的，官方给出了如下的解释：</p><blockquote><p>Nest provides an out-of-the-box application architecture which allows developers and teams to create highly testable, scalable, loosely coupled, and easily maintainable applications. <strong>The architecture is heavily inspired by Angular.</strong></p></blockquote><p>这是<code>nestjs</code>的哲学：</p><blockquote><p>Nest提供了一个开箱即用的应用架构，允许开发人员和团队创建高度可测试、可扩展、松散耦合和易于维护的应用。<strong>该架构深受Angular的启发。</strong></p></blockquote><p>了解到这一点来说之后，方便学习过Angular的同学快速的入手，那么对于没有学过Angular的同学，可以从以下两个角度来思考学习。</p><ol><li><p>对于毫无<code>Angular</code>基础的同学来说：</p><ul><li>应用是基础：先学会如何使用，写一些基础的接口，然后再去思考内在的逻辑，免得搞混了；</li><li>学习先进框架的概念：官方有一手的介绍，所以一点不用慌，而且这些概念源于Google，都是经过了验证的；</li><li>平时开发多问几个为什么：比如，为什么nestjs的入口是<code>main.ts</code>？<code>nestjs</code>是用什么打包的？怎么没有看到webpack的配置？</li></ul></li><li><p>对于学过<code>Angular</code>的同学来说：</p><ul><li>大致浏览基础示例代码：在清楚核心的概念之后，这样有利于快速入手；</li><li>做一些实战项目：工具的学习不能浮于表面，一定要应用于自己的工作中来，对于小项目，可以参考官方的<a href="https://docs.nestjs.cn/7/awesome">awesome示例页</a>；</li></ul></li></ol><p>下面来回答几个问题：</p><h3 id="为什么nestjs的入口是main-ts？"><a href="#为什么nestjs的入口是main-ts？" class="headerlink" title="为什么nestjs的入口是main.ts？"></a>为什么nestjs的入口是<code>main.ts</code>？</h3><p>下面是我个人的思考路径：</p><ul><li>package.json中的main属性，有没有？——没有</li><li>官方的配置文件中<code>nest-cli.json</code>，有没有？——没有</li><li>scripts中的运行脚本，有没有？——有，但是没有指明，只有<code>nest start</code></li><li>运行脚本使用的CLI，CLI的原文件中，有没有？——这里，就需要调试<code>node_modules</code>了</li></ul><p>按照上面的路径，可以自己建一个Nodejs的调试项目进行运行与调试！官方提供了<code>--debug</code>脚本，所以可以直接来创建，以<code>VSCode</code>为例：创建<code>.vscode/launch.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">  <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">  <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch via NPM&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;runtimeArgs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;run-script&quot;</span>,</span><br><span class="line">        <span class="string">&quot;start:debug&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;npm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;skipFiles&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;&lt;node_internals&gt;/**&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;pwa-node&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接使用<code>VSCode</code>的调试工具进行调试，这时候，新的问题来了，断点打在哪里？！学习过我们<a href="https://class.imooc.com/sale/webfullstack">慕课网《大前端》</a>的同学应该了解到CLI工具的工作原理，有以下几个组成部分：</p><ul><li>Commander —— 处理传递的参数</li><li>Action —— 具体的函数</li></ul><p>下面打开<code>node_modules</code>，找到<code>@nestjs/cli</code>映入我们眼帘的是：</p><img class="lazyload" width="300" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-2/nestjs-1.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>这不巧了？怎么有两个文件，很打眼呢？<code>commands</code>与<code>actions</code>，我们来查看一下：</p><p>第一个：</p><img class="lazyload" width="300" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-2/nestjs-2.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>第二个：</p><img class="lazyload" width="300" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-2/nestjs-3.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>分别点开：</p><ul><li><p><code>start.command.js</code>中主要是解析命令参数，但是有一个关键方法：<code>this.action.handle(inputs, options)</code></p></li><li><p>最终会来执行<code>start.action.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handle</span>(<span class="params">inputs, options</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> __awaiter(<span class="built_in">this</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">const</span> configFileName = options.find(<span class="function">(<span class="params">option</span>) =&gt;</span> option.name === <span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">                   .value;</span><br><span class="line">               <span class="keyword">const</span> configuration = <span class="keyword">yield</span> <span class="built_in">this</span>.loader.load(configFileName);</span><br><span class="line">               <span class="keyword">const</span> appName = inputs.find(<span class="function">(<span class="params">input</span>) =&gt;</span> input.name === <span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">                   .value;</span><br><span class="line">               <span class="keyword">const</span> pathToTsconfig = get_value_or_default_1.getValueOrDefault(configuration, <span class="string">&#x27;compilerOptions.tsConfigPath&#x27;</span>, appName, <span class="string">&#x27;path&#x27;</span>, options);</span><br><span class="line">               <span class="keyword">const</span> binaryToRunOption = options.find(<span class="function">(<span class="params">option</span>) =&gt;</span> option.name === <span class="string">&#x27;exec&#x27;</span>);</span><br><span class="line">               <span class="keyword">const</span> debugModeOption = options.find(<span class="function">(<span class="params">option</span>) =&gt;</span> option.name === <span class="string">&#x27;debug&#x27;</span>);</span><br><span class="line">               <span class="keyword">const</span> watchModeOption = options.find(<span class="function">(<span class="params">option</span>) =&gt;</span> option.name === <span class="string">&#x27;watch&#x27;</span>);</span><br><span class="line">               <span class="keyword">const</span> isWatchEnabled = !!(watchModeOption &amp;&amp; watchModeOption.value);</span><br><span class="line">               <span class="keyword">const</span> watchAssetsModeOption = options.find(<span class="function">(<span class="params">option</span>) =&gt;</span> option.name === <span class="string">&#x27;watchAssets&#x27;</span>);</span><br><span class="line">               <span class="keyword">const</span> isWatchAssetsEnabled = !!(watchAssetsModeOption &amp;&amp; watchAssetsModeOption.value);</span><br><span class="line">               <span class="keyword">const</span> debugFlag = debugModeOption &amp;&amp; debugModeOption.value;</span><br><span class="line">               <span class="keyword">const</span> binaryToRun = binaryToRunOption &amp;&amp; binaryToRunOption.value;</span><br><span class="line">               <span class="keyword">const</span> &#123; <span class="attr">options</span>: tsOptions &#125; = <span class="built_in">this</span>.tsConfigProvider.getByConfigFilename(pathToTsconfig);</span><br><span class="line">               <span class="keyword">const</span> outDir = tsOptions.outDir || defaults_1.defaultOutDir;</span><br><span class="line">               <span class="keyword">const</span> onSuccess = <span class="built_in">this</span>.createOnSuccessHook(configuration, appName, debugFlag, outDir, binaryToRun);</span><br><span class="line">               <span class="keyword">yield</span> <span class="built_in">this</span>.runBuild(inputs, options, isWatchEnabled, isWatchAssetsEnabled, !!debugFlag, onSuccess);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">               <span class="keyword">if</span> (err <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="string">`\n<span class="subst">$&#123;ui_1.ERROR_PREFIX&#125;</span> <span class="subst">$&#123;err.message&#125;</span>\n`</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="built_in">console</span>.error(<span class="string">`\n<span class="subst">$&#123;chalk.red(err)&#125;</span>\n`</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这时候，我们就可以打印一个<code>configuration</code>了或者加个断点，使用<code>npm start</code>来跑一下，得到的结果无非如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">🚀 ~ file: start.action.js ~ line <span class="number">29</span> ~ StartAction ~ return__awaiter ~ configuration &#123;</span><br><span class="line">  language: <span class="string">&#x27;ts&#x27;</span>,</span><br><span class="line">  sourceRoot: <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">  collection: <span class="string">&#x27;@nestjs/schematics&#x27;</span>,</span><br><span class="line">  entryFile: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">  projects: &#123;&#125;,</span><br><span class="line">  monorepo: <span class="literal">false</span>,</span><br><span class="line">  compilerOptions: &#123;</span><br><span class="line">    tsConfigPath: <span class="string">&#x27;tsconfig.build.json&#x27;</span>,</span><br><span class="line">    webpack: <span class="literal">true</span>,</span><br><span class="line">    webpackConfigPath: <span class="string">&#x27;webpack.config.js&#x27;</span>,</span><br><span class="line">    plugins: [],</span><br><span class="line">    assets: []</span><br><span class="line">  &#125;,</span><br><span class="line">  generateOptions: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已经让我们看到了<code>entryFile</code>的字样，至此，我们找到了入口文件。还可以顺这这条思路，继续来找：</p></li></ul><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-2/nestjs-4.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/2000"><p>​        继续往下找：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-2/nestjs-5.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/2000"><h3 id="nestjs是用什么打包的？"><a href="#nestjs是用什么打包的？" class="headerlink" title="nestjs是用什么打包的？"></a><code>nestjs</code>是用什么打包的？</h3><p>有了上面调试的技巧，来回答这个问题变得很简单，我们来看看<code>scripts</code>中的打包命令<code>&quot;build&quot;: &quot;nest build&quot;,</code>，所以我们找到对应的<code>command</code>，可以找到这么一个文件<code>build.action.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">runBuild</span>(<span class="params">inputs, options, watchMode, watchAssetsMode, isDebugEnabled = <span class="literal">false</span>, onSuccess</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> __awaiter(<span class="built_in">this</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> configFileName = options.find(<span class="function">(<span class="params">option</span>) =&gt;</span> option.name === <span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">            .value;</span><br><span class="line">        <span class="keyword">const</span> configuration = <span class="keyword">yield</span> <span class="built_in">this</span>.loader.load(configFileName);</span><br><span class="line">        <span class="keyword">const</span> appName = inputs.find(<span class="function">(<span class="params">input</span>) =&gt;</span> input.name === <span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">            .value;</span><br><span class="line">        <span class="keyword">const</span> pathToTsconfig = get_value_or_default_1.getValueOrDefault(configuration, <span class="string">&#x27;compilerOptions.tsConfigPath&#x27;</span>, appName, <span class="string">&#x27;path&#x27;</span>, options);</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">options</span>: tsOptions &#125; = <span class="built_in">this</span>.tsConfigProvider.getByConfigFilename(pathToTsconfig);</span><br><span class="line">        <span class="keyword">const</span> outDir = tsOptions.outDir || defaults_1.defaultOutDir;</span><br><span class="line">        <span class="keyword">const</span> isWebpackEnabled = get_value_or_default_1.getValueOrDefault(configuration, <span class="string">&#x27;compilerOptions.webpack&#x27;</span>, appName, <span class="string">&#x27;webpack&#x27;</span>, options);</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">this</span>.workspaceUtils.deleteOutDirIfEnabled(configuration, appName, outDir);</span><br><span class="line">        <span class="built_in">this</span>.assetsManager.copyAssets(configuration, appName, outDir, watchAssetsMode);</span><br><span class="line">        <span class="keyword">if</span> (isWebpackEnabled) &#123;</span><br><span class="line">            <span class="comment">// 与这里的一行代码</span></span><br><span class="line">            <span class="keyword">const</span> webpackPath = get_value_or_default_1.getValueOrDefault(configuration, <span class="string">&#x27;compilerOptions.webpackConfigPath&#x27;</span>, appName, <span class="string">&#x27;webpackPath&#x27;</span>, options);</span><br><span class="line">            <span class="keyword">const</span> webpackConfigFactoryOrConfig = <span class="built_in">this</span>.getWebpackConfigFactoryByPath(webpackPath, configuration.compilerOptions.webpackConfigPath);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.webpackCompiler.run(configuration, webpackConfigFactoryOrConfig, pathToTsconfig, appName, isDebugEnabled, watchMode, <span class="built_in">this</span>.assetsManager, onSuccess);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (watchMode) &#123;</span><br><span class="line">            <span class="keyword">const</span> tsCompilerOptions = &#123;&#125;;</span><br><span class="line">            <span class="keyword">const</span> isPreserveWatchOutputEnabled = options.find(<span class="function">(<span class="params">option</span>) =&gt;</span> option.name === <span class="string">&#x27;preserveWatchOutput&#x27;</span> &amp;&amp; option.value === <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (isPreserveWatchOutputEnabled) &#123;</span><br><span class="line">                tsCompilerOptions.preserveWatchOutput = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.watchCompiler.run(configuration, pathToTsconfig, appName, tsCompilerOptions, onSuccess);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的一行代码</span></span><br><span class="line">            <span class="built_in">this</span>.compiler.run(configuration, pathToTsconfig, appName, onSuccess);</span><br><span class="line">            <span class="built_in">this</span>.assetsManager.closeWatchers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><ul><li>nestjs可以开启webpack打包</li><li>或者自己定义的打包，见下图</li></ul><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-2/nestjs-7.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/2000"><h3 id="怎么没有看到webpack的配置？"><a href="#怎么没有看到webpack的配置？" class="headerlink" title="怎么没有看到webpack的配置？"></a>怎么没有看到<code>webpack</code>的配置？</h3><p><code>nestjs</code>支持<code>webpack</code>打包，有两种方法启用<code>webpack</code>，然后，就可以在根目录中添加<code>webpack.config.js</code>文件了。</p><p>官方的说明：</p><p><strong>方法一：</strong></p><p>针对于命令：<a href="https://docs.nestjs.cn/6/cli?id=nest-build">nest build</a></p><p>将应用程序或工作区编译到输出文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nest build &lt;name&gt; [options]Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>参数</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;name&gt;</code></td><td align="left">要构建的项目的名称。</td></tr></tbody></table><p>选项：</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>--path [path]</code></td><td align="left"><code>tsconfig</code>文件的路径。别名: <code>-p</code></td></tr><tr><td align="left"><code>--watch</code></td><td align="left">在监视模式下运行（实时重载）别名-w</td></tr><tr><td align="left"><code>--webpack</code></td><td align="left">使用 <code>webpack</code> 进行编译。</td></tr><tr><td align="left"><code>--webpackPath</code></td><td align="left">配置 <code>webpack</code> 的路径。</td></tr></tbody></table><p><strong>方法二：</strong></p><p>在根目录中的<code>nest-cli.json</code>文件中配置<code>compilerOptions</code>，把<code>webpack</code>设置成<code>true</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;collection&quot;</span>: <span class="string">&quot;@nestjs/schematics&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sourceRoot&quot;</span>: <span class="string">&quot;src&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于nest的<code>nest-cli.json</code>配置文件及其使用方式可以参考 <a href="https://docs.nestjs.cn/7/cli">这里</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天是《nestjs搭建通用业务框架》系列的第2篇，主要是介绍如何使用nestjs的CLI工具快速初始化项目，了解项目的启动与调试。PS: 调试技巧非常的重要，有利于后续学习框架的核心的原理。&lt;/p&gt;</summary>
    
    
    
    <category term="nestjs搭建通用业务框架" scheme="https://www.toimc.com/categories/nestjs%E6%90%AD%E5%BB%BA%E9%80%9A%E7%94%A8%E4%B8%9A%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="node.js" scheme="https://www.toimc.com/tags/node-js/"/>
    
    <category term="nestjs" scheme="https://www.toimc.com/tags/nestjs/"/>
    
    <category term="web框架" scheme="https://www.toimc.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>nestjs搭建通用业务框架（1）：基础介绍</title>
    <link href="https://www.toimc.com/nestjs-example-project-1/"/>
    <id>https://www.toimc.com/nestjs-example-project-1/</id>
    <published>2021-03-08T13:05:05.000Z</published>
    <updated>2021-03-12T03:40:39.725Z</updated>
    
    <content type="html"><![CDATA[<p>在网上看了很多关于nestjs的文章，发现大多数的文章不成体系。所以，打算从应用角度，带领大家一点点的学习nestjs，并架构一套可通用的业务框架，方便大家入门。</p><span id="more"></span><p>本篇是nestjs上手的基础篇，主要从以下的几个角度来谈一谈：</p><ul><li>What：什么是nestjs</li><li>Where：什么时候应用nestjs？或者说，什么场景下用它</li><li>Why：为什么要用nestjs？nestjs可以与哪些技术集成？官方提供了哪些现成的方案？</li><li>How：怎么入手？基础的搭建与入门</li></ul><h2 id="nestjs是什么？"><a href="#nestjs是什么？" class="headerlink" title="nestjs是什么？"></a>nestjs是什么？</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><p>下面我们用一张图片来引入，这是<a href="https://nestjs.com/">nestjs官网</a>的截图：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-1/nestjs官网.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/300"><p>其中有对nestjs的定义：</p><blockquote><p>Hello, nest!</p><p>A progressive Node.js framework for building efficient, reliable and scalable server-side applications.</p></blockquote><p>翻译过来就是：用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。</p><p>从上面定义我们可以拆解出来nestjs框架的一些基础的特性：</p><ul><li> Node.js：首先，它基于Node.js的环境，是对前端友好的。前端工程师无需再继续学习其他的语言（PS: 不代表不需要了解框架），即可以上手；</li><li>服务端应用程序：nestjs基础的功能是用于开发接口；</li><li>高效且可伸缩：这一点，可以看出，nestjs的各个功能模块之间的架构应该是解耦的，而且是易于进行组合的；</li><li>渐进式：可简单，可复杂，根据大家自己的项目的复杂度。</li></ul><h3 id="nestjs特点"><a href="#nestjs特点" class="headerlink" title="nestjs特点"></a>nestjs特点</h3><p>除了从上面的定义上我们进行的<strong>主观拆解</strong>，那nestjs还具有哪些特点呢？</p><p>nestjs框架的特点：</p><ul><li>完美支持 Typescript</li><li>面向 <a href="https://baike.baidu.com/item/AOP/1332219">AOP 编程</a></li><li>支持 <a href="https://typeorm.io/">Typeorm</a></li><li>高并发，异步非阻塞 IO</li><li>Node.js 版的 <a href="https://spring.io/">spring</a></li><li>构建微服务应用</li></ul><p>这些全来自于<a href="https://docs.nestjs.cn/">nestjs中文网</a>首页的介绍。</p><h3 id="近年发展"><a href="#近年发展" class="headerlink" title="近年发展"></a>近年发展</h3><p>近些年来，nestjs从2017年创立的发展非常迅猛，以下是stars增长趋势：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-1/stargazers.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/300"><p>目前已经收获了35,152个点赞，来源：<a href="https://seladb.github.io/StarTrack-js/#/">StarTrack</a></p><p>然后再看看npm的趋势与其他的几个库的比较：</p><ul><li>express 2010年1月发布（点赞52.2k）</li><li>meteor 2012年发布（自成一套下载安装，非npm，点赞42k）</li><li>koa 2013年11月发布（点赞30.8k）</li><li>egg.js 2016年7月发布（点赞16.8k）</li></ul><p><strong>（截止北京时间2021年03月08日 21:53:36）</strong></p><h2 id="nestjs应用场景"><a href="#nestjs应用场景" class="headerlink" title="nestjs应用场景"></a>nestjs应用场景</h2><blockquote><p>这个部分我年过很多人写的内容，其实技术上，前端人喜欢看新的特点——技术新、更新勤。</p></blockquote><p>追新不能盲目，而是要从现实的角度出发，解决问题才是最终目的。</p><p>基本应用：服务端项目开发完成接口功能；</p><p>服务端扩展：安全、鉴权、队列、日志、性能、测试、消息；</p><p>技术架构：微服务、TypeORM+序列化对接多种数据库、多环境配置、AOP编程、MVC基本模型；</p><p>一些成功的案例：</p><img class="lazyload" src="https://static.www.toimc.com/blog/img/2021/nestjs-example-project-1/logos.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/600"><p>官方地址：<a href="https://docs.nestjs.com/discover/companies">Who is using Nest?</a></p><p>大家可以从其技术特点的角度出发，从自己的团队的技术实力与项目的复杂度出发进行综合考虑。</p><blockquote><p>“<strong>convention over configuration</strong>”——Jeremy Miller</p></blockquote><p>对于nestjs来说，大多数前端同学可能不习惯的点：</p><ul><li>MVC分层与模块化思想</li><li>ts静态类型检查 + 注解 + AOP编程</li><li>ORM框架的概念的理解与使用</li><li>服务端架构 与需要考虑到的：安全、日志、性能、监控等</li><li>运维相关</li></ul><h2 id="nestjs框架关联技术"><a href="#nestjs框架关联技术" class="headerlink" title="nestjs框架关联技术"></a>nestjs框架关联技术</h2><p>打开nestjs的官方github仓库，可以看到很多<a href="https://github.com/nestjs">官方</a>提供的方案：</p><ul><li>CLI: 官方的CLI工具</li><li>TypeORM: 对接各式各样的数据库</li><li>Serverless：微服务</li><li>Swagger：用于产生API接口文档</li><li>Sequelize：序列化</li><li>Mongoose</li><li>GraphQL</li><li>Jwt/passport：鉴权模块</li><li>ElasticSearch：搜索模块</li><li>Config：配置模块，用于多环境配置</li><li>….</li></ul><p>从官方的仓库的更新的频次，可以看到社区的活跃。而且，拥有的众多成熟方案 + 丰富的文档，让nestjs在国外的发展非常的好。</p><p>而且，从相关概念上来说，对于前端同学走向全栈，可以打开关于服务端架构层面的视野。大家可以关注一下如下的这个资源：<a href="https://docs.nestjs.cn/7/awesome">相关资料</a></p><p>这个资源是nestjs中文网整理的，包括社区、示例项目、常用库、难点技术集成等，比如：状态管理、代码风格、邮件、API、错误统一处理、Lint、路由、日志 + 监控、国际化、鉴权等。</p><h2 id="nestjs的前景怎么样"><a href="#nestjs的前景怎么样" class="headerlink" title="nestjs的前景怎么样"></a>nestjs的前景怎么样</h2><p>我们先看看使用了的同学们，大家怎么评价：</p><p>同学A：</p><blockquote><p>我认为框架有两个优点 第一 蹭了一波 typescript 的热度。 第二 它的标准化使的开发的流程非常方便，特别是针对流动性比较大的公司来说这是个好事，koa 和 express 你非常自由这导致了大家开发的时候有自己的一套开发方式（比如，不同的分层，文件命名，项目整体结构），如果制定项目的人走了，经过几波换人会不会把这个项目改的面目全非？</p></blockquote><p>同学B：</p><blockquote><p>nestjs在国内的未来不见得会很好，因为缺少布道者，另一方面是国内有阿里egg.js、midway的竞争。如果从企业级开发的角度来看，nest.js的理念比其他node.js web框架都好太多了</p></blockquote><p>同学C：</p><blockquote><p>nest.js的更新非常非常的频繁，这说明社区活跃度很高。我们团队18年刚开始用的egg.js，我为此开发了上层的框架，后来发现nest.js早就把这些事情都做好了，比如装饰器路由、Exception filters、Pipes、Guards、Interceptors，</p></blockquote><p>同学D：</p><blockquote><p>挺好的，但如果不熟悉 JavaSpring 的话， 上手需要一定成本。不过我觉得挺像 Midway.js，我 IOC 是看 Midway 的，有这一专题的文档，你可以找找看。nestjs 的生态是基于 Express， Midway 是基于 koa 和阿里的 egg。</p></blockquote><p>….</p><p>大家的褒贬不一，总结一下。</p><p><strong>优点：</strong></p><ul><li>官方社区活跃</li><li>框架架构设计合理，对于大型项目非常利于整体的统一；</li><li>成熟的官方解决方案</li><li>ts加持；</li></ul><p><strong>缺点：</strong></p><ul><li>上手有一定的难度</li><li>后期相关的开发人员的缺乏</li></ul><h2 id="nestjs学习资源"><a href="#nestjs学习资源" class="headerlink" title="nestjs学习资源"></a>nestjs学习资源</h2><ul><li>官方资源<ul><li><a href="https://nestjs.com/">官方网站</a></li><li><a href="https://docs.nestjs.com/">官方文档</a></li><li><a href="https://docs.nestjs.com/">API 参考</a></li><li><a href="https://github.com/nestjs/nest">GitHub Repo</a></li></ul></li><li>文档<ul><li><a href="https://docs.nestjs.cn/">中文文档</a> （推荐）</li><li><a href="https://docs.nestjs.cn/7/awesome">相关资料</a></li></ul></li><li>社区<ul><li><a href="https://docs.nestjs.cn/7/discuss">中文交流群</a></li><li><a href="https://gitter.im/nestjs/">Gitter</a></li><li><a href="https://discord.gg/G7Qnnhy">Discord</a></li><li><a href="https://t.me/nestjs">Telegram (社区维护)</a></li><li><a href="https://t.me/nest_ru">Telegram (俄罗斯社区)</a></li><li><a href="https://nestjs.slack.com/">Slack (韩语社区)</a></li><li><a href="https://jq.qq.com/?_wv=1027&k=5DnXWGR">QQ 群 (中文社区)</a></li><li><a href="https://www.reddit.com/r/Nestjs_framework">Reddit (社区维护)</a></li></ul></li></ul><p>下面一篇，我们来介绍使用@nestjs/cli上手nestjs开发。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在网上看了很多关于nestjs的文章，发现大多数的文章不成体系。所以，打算从应用角度，带领大家一点点的学习nestjs，并架构一套可通用的业务框架，方便大家入门。&lt;/p&gt;</summary>
    
    
    
    <category term="nestjs搭建通用业务框架" scheme="https://www.toimc.com/categories/nestjs%E6%90%AD%E5%BB%BA%E9%80%9A%E7%94%A8%E4%B8%9A%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="node.js" scheme="https://www.toimc.com/tags/node-js/"/>
    
    <category term="nestjs" scheme="https://www.toimc.com/tags/nestjs/"/>
    
    <category term="web框架" scheme="https://www.toimc.com/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 2.0正式发布，支持跨全平台</title>
    <link href="https://www.toimc.com/flutter-2-is-comming/"/>
    <id>https://www.toimc.com/flutter-2-is-comming/</id>
    <published>2021-03-04T12:12:31.000Z</published>
    <updated>2021-03-12T03:36:06.832Z</updated>
    
    <content type="html"><![CDATA[<p>2021年3月4日，谷歌正式宣布了 Flutter 2 的推出。作为一款用于构建轻巧型移动应用的开源 UI 工具包，Flutter 的第二个大版本增加了对桌面和 Web 应用程序的支持。开发者可借助 Flutter 2 打造开箱即用的应用程序，并且能够为 iOS、Android、Windows、macOS、Linux 和 Web 端套用相同的代码。</p><span id="more"></span><h2 id="Flutter的愿景"><a href="#Flutter的愿景" class="headerlink" title="Flutter的愿景"></a>Flutter的愿景</h2><p>Flutter 的目标是改变开发人员对构建应用程序的思路，不是从开发者需要适配的平台开始，而是让开发者从需要完成的用户需求开始实现。</p><p>Flutter 可以让你在拥有更好设计效果的情况下，得到更好的用户体验，因为它的运行速度很快，它会将源代码编译为机器代码，但是 Flutter 在开发过程中支持的 hotload，所以也可以在应用程序调试运行时进行更改并立即查看结果。</p><p>在这次发布的<code>Flutter 2</code>中，Flutter 正式将从移动框架扩展到了<strong>全平台框架</strong>，使用 Flutter 2 开发者可以让它的应用直接运用到各种不同的平台而几乎不需要做出什么改变。现在仅 Play 商店就已经有超过<code>15万个Flutter</code>应用程序，并且每个应用程序都可以通过 Flutter 2 进行免升级，因为它们现在可以在不重写的情况下扩展到 Desktop 和Web 。</p><p>在 Google 内部也会使用 Flutter 开发，Google 内有近一千多名工程师正在使用 Dart 和Flutter 构建应用程序，其中许多产品都已经发布了，包括：Stadia，Google One和Google Nest Hub 等等。</p><p>在几个月前， Google Pay 里的旗舰移动应用就有不少更改为使用 Flutter，它们已经在生产力和质量上取得了重大进步。通过统一的代码库，团队消除了平台之间的功能差异，并清理超过一百万行代码，Google Pay 的报告还提到其工程师的效率要高得多，技术债务大大减少，统一的发布流程（如跨 iOS 和 Android 的安全性审查和试验）得以实现。</p><img title="flutter目前取得的成绩" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/flutter-2-is-comming/flutter2-comming.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/300"><h2 id="Flutter-vs-RN-vs-Ionic"><a href="#Flutter-vs-RN-vs-Ionic" class="headerlink" title="Flutter vs RN vs Ionic"></a>Flutter vs RN vs Ionic</h2><p>下面有一张图说明Flutter与现行的RN，Ionic这些跨平台的应用框架的对比：</p><img title="flutter-vs-react-native-performance" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/flutter-2-is-comming/flutter-vs-react-native-performance.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><ul><li><p>Ionic：Ionic提供了最差的性能，因为它到底是一个封装的web应用。</p></li><li><p>Flutter、NativeScript和React Native。这三个都为你提供了真正的原生应用（从你的代码中编译），因此，它们提供了比Ionic更好的性能。对这三者中谁是最好的做精确的测量是相当困难的，因为它依赖于你正在构建的应用程序、使用的设备、操作系统和使用的Flutter/ NativeScript/ React Native的版本。Flutter它具有Dart的优势，并且没有JavaScript桥来启动与设备原生组件的交互，它提供的速度是这三者中表现比较好的。</p></li><li><p>原生：写得好的原生代码应该总是比编译后的原生代码性能更高。</p></li></ul><h2 id="Flutter2-0重大的变化"><a href="#Flutter2-0重大的变化" class="headerlink" title="Flutter2.0重大的变化"></a>Flutter2.0重大的变化</h2><img title="flutter示例" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/flutter-2-is-comming/Flutter-demo.gif?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>开发团队表示，Flutter 2.0 有意为 Web 平台提供了非常标准的、以 DOM 为中心的开发方式。尽管效果不错，这么做也可能带来性能方面的阻碍（尤其是更高级的功能）。</p><p>过去大约一年时间里，Flutter 团队开始研究基于<code>WebAssembly</code>的<code>Canvas Kit</code>项目，特点是采用了与为<code>Android / Chrome</code>提供支撑的相同的 <code>Skia</code>图形引擎。Tim Sneath 表示：“这意味着我们现在基本上可以绕过核心 HTML，并真正使用 Web 平台上以应用程序为中心的部分，而不会留下（自动完成的）文字或密码、以及让网络保持独特状态的各项特性”。桌面平台方面，谷歌宣布<code>Canonical</code>将在 Flutter 上全力以赴，并使之成为所有未来桌面 / 移动应用程序的默认选项。</p><img title="flutter高性能" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/flutter-2-is-comming/example.gif?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/200"><p>上面演示Flutter应用，与原生应用。从上面的演示可以看出，flutter的性能是非常优秀的。</p><h2 id="Flutter入门资料"><a href="#Flutter入门资料" class="headerlink" title="Flutter入门资料"></a>Flutter入门资料</h2><p>【1】<a href="https://flutter.dev/docs">官方文档</a><br>【2】<a href="https://flutter.cn/docs">中文文档</a><br>【3】<a href="https://flutter.cn/docs/get-started/install">Flutter环境配置</a><br>【4】<a href="https://flutter.cn/docs/get-started/flutter-for/web-devs">Flutter与前端</a></p><p>我们后续的内容中，也会去更新相关的Flutter学习的路径，请大家关注！~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年3月4日，谷歌正式宣布了 Flutter 2 的推出。作为一款用于构建轻巧型移动应用的开源 UI 工具包，Flutter 的第二个大版本增加了对桌面和 Web 应用程序的支持。开发者可借助 Flutter 2 打造开箱即用的应用程序，并且能够为 iOS、Android、Windows、macOS、Linux 和 Web 端套用相同的代码。&lt;/p&gt;</summary>
    
    
    
    <category term="flutter" scheme="https://www.toimc.com/categories/flutter/"/>
    
    
    <category term="flutter" scheme="https://www.toimc.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>浏览器http自动跳转https，导致图片访问失败</title>
    <link href="https://www.toimc.com/image-google-ssl-limit/"/>
    <id>https://www.toimc.com/image-google-ssl-limit/</id>
    <published>2021-03-03T01:57:03.000Z</published>
    <updated>2021-03-03T03:53:15.522Z</updated>
    
    <content type="html"><![CDATA[<p>目前，chrome浏览器https协议的域中访问http自动跳转https，该如何解决呢？思路：给图床添加ssl证书，一般的对象云存储都可以有免费的SSL证书申请；或者，直接在浏览器中关闭阻止不安全的内容来源。</p><span id="more"></span><p>方案一：</p><p>网上查了好多解决方案，说是缓存或者删除配置之类的，但是都没能解决。</p><p>问题原因：https在部分chrome浏览器版本中安全设置项为默认屏蔽不安全内容（针对域名）导致。</p><p>解决方法：按下图步骤操作即可</p><img title="ss1" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" width="600" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl1.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><img title="ss2" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" width="600" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl2.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p>方案二：</p><p>本博客采用了七牛云存储，hexo与七牛云的插件还比较好用：</p><ul><li>方便设置图片的大小</li><li>方便进行图片的上传</li><li>方便管理图片资源</li><li>流量也不贵</li></ul><p>所以，我尝试着使用了一下七牛云的DV证书（免费！免费！免费！），只会收取小部分CDN + HTTPS流量的费用。</p><p>下面介绍下步骤：</p><ul><li><p>打开<a href="https://portal.qiniu.com/certificate/ssl#cert">七牛云证书管理</a>，申请DV证书</p><img title="ss3" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl3.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p>购买证书。</p><img title="ss4" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl4.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p>直接点击确认支付，然后补全个人信息，可以选择部署CDN</p><img title="ss5" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl5.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p><strong>这里一定要注意，这个域名最好是子域名，因为DV域名只能申请静态的，而非泛域名; 并且，域名需要备案</strong></p><img title="ss6" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl6.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p>证书的签发需要10分钟左右的时间。</p></li><li><p>打开<a href="https://portal.qiniu.com/cdn">七牛云CDN</a>，配置域名，在域名管理处添加子域名（比如：static.<a href="http://www.yourdomain.com)/">www.yourdomain.com）</a></p><p>路径：点击CDN -&gt; 域名管理 -&gt; HTTPS配置</p><img title="ss11" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl11.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p><strong>如果域名没有备案，则会出现ICP备案提示！！！</strong></p><img title="ss10" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl10.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"></li><li><p>保存之后，配置CNAME</p><p>CNAME需要在各自的域名服务商配置域名解析：</p><img title="ss7" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl7.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p>可以点击后面的<a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name">帮助</a></p><p>最后，可以测试一下，上传到七牛云对象云存储的图片，有没有转成https的链接：</p><img title="ss12" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" src="https://static.www.toimc.com/blog/img/2021/image-google-ssl-limit/ssl12.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前，chrome浏览器https协议的域中访问http自动跳转https，该如何解决呢？思路：给图床添加ssl证书，一般的对象云存储都可以有免费的SSL证书申请；或者，直接在浏览器中关闭阻止不安全的内容来源。&lt;/p&gt;</summary>
    
    
    
    
    <category term="https" scheme="https://www.toimc.com/tags/https/"/>
    
    <category term="ssl" scheme="https://www.toimc.com/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>如何让网站达到ssl评级A+——本站开启tls1.3</title>
    <link href="https://www.toimc.com/%E5%A6%82%E4%BD%95%E8%AE%A9%E7%BD%91%E7%AB%99%E8%BE%BE%E5%88%B0ssl%E8%AF%84%E7%BA%A7A/"/>
    <id>https://www.toimc.com/%E5%A6%82%E4%BD%95%E8%AE%A9%E7%BD%91%E7%AB%99%E8%BE%BE%E5%88%B0ssl%E8%AF%84%E7%BA%A7A/</id>
    <published>2021-03-02T13:47:25.000Z</published>
    <updated>2021-03-12T03:36:33.808Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了使用docker快速创建nginx服务，并介绍了如何配置tls1.3的方法，让网站的ssl </p><span id="more"></span><p>先上图片：</p><img title="提升网站ssl等级" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" width="600" src="https://static.www.toimc.com/blog/img/2021/如何让网站达到ssl评级A/1.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p>对如何评到<code>A</code>以及<code>A+</code>不是很理解，这里简单的说明一下。</p><p>首页说明一下这个评分，并不仅仅是针对于证书的部署情况而言的，这是一个多方面综合的评级，其中包括了<code>证书</code>、<code>SSL协议</code>、<code>加密套件</code>、<code>漏洞</code>、<code>不安全的外链</code>等等。</p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><ul><li>docker方式安装Nginx</li><li>配置nginx</li><li>验证TLS</li></ul><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>推荐使用这个镜像：<code>docker pull khs1994/nginx:1.19.7-alpine</code></p><p>仓库地址：<a href="https://github.com/khs1994-docker/nginx">https://github.com/khs1994-docker/nginx</a></p><p>docker-compose配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;khs1994/nginx:1.19.7-alpine&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf.d:/etc/nginx/conf.d:ro</span></span><br></pre></td></tr></table></figure><p>其中 <code>./conf.d</code> 是相对于nginx的配置目录。</p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>在 Nginx 的站点配置中，下面是我们推荐的配置内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_protocols</span> TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_ciphers</span> <span class="string">&#x27;TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000&quot;</span>;</span><br></pre></td></tr></table></figure><p>包含 <code>TLS13</code> 是 TLS 1.3 新增的 <code>Cipher Suite</code>，加在最前面即可；如果你不打算继续支持 IE8，可以去掉包含 <code>3DES</code> 的 Cipher Suite。</p><p>有几点需要注意：</p><ul><li>删除<code>TLSv1</code>的支持</li><li>添加头部：<code>Strict-Transport-Security</code></li><li>配置<code>ssl_ciphers</code></li></ul><h2 id="验证是否支持-TLS-1-3"><a href="#验证是否支持-TLS-1-3" class="headerlink" title="验证是否支持 TLS 1.3"></a>验证是否支持 TLS 1.3</h2><p>目前最新版 Chrome 和 Firefox 都支持 TLS 1.3，但需要手动开启：</p><ul><li>Chrome，将 <code>chrome://flags/</code> 中的 <code>Maximum TLS version enabled</code> 改为 <code>TLS 1.3</code>（Chrome 62 中需要将 <code>TLS 1.3</code> 改为 <code>Enabled (Draft)</code>，感谢 @TsuranSonoda 指出）；</li><li>Firefox，将 <code>about:config</code> 中的 <code>security.tls.version.max</code> 改为 <code>4</code>；</li></ul><p>推荐：</p><ol><li>英文： <a href="https://www.ssllabs.com/ssltest/index.html">Qualys SSL Labs’s SSL Server Test</a> </li><li>中文： <a href="https://myssl.com/">MySSL</a> 也支持验证服务端是否支持 TLS 1.3，非常方便，推荐。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了使用docker快速创建nginx服务，并介绍了如何配置tls1.3的方法，让网站的ssl &lt;/p&gt;</summary>
    
    
    
    
    <category term="nginx" scheme="https://www.toimc.com/tags/nginx/"/>
    
    <category term="https" scheme="https://www.toimc.com/tags/https/"/>
    
    <category term="docker" scheme="https://www.toimc.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>大型项目前端架构设计</title>
    <link href="https://www.toimc.com/%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.toimc.com/%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-03-01T15:59:24.000Z</published>
    <updated>2021-03-13T04:39:32.530Z</updated>
    
    <content type="html"><![CDATA[<p>入门很多年的前端小伙伴，也会遇到工作中需要设计大型项目的时候。如何做好前期的架构设计，对于后期项目的扩展与升级都是非常重要的。</p><p>本文不会侧重于具体技术实现，而是尝试从整体角度出发，分析为什么与怎么做，以及成本和产出如何。</p><span id="more"></span><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><p>大家前端项目的规模不同，按照本文实践成本收益比也会有所差别。</p><p>通常来说，人员越多、项目复杂度越高，可参考的价值越大，<strong>所有技术点经过大型项目的论证</strong>。</p><p>同时对于技术变的发展变迁，可能有部分措施不适用，因此应该根据具体情况来选用。</p><p>还是那句话“<strong>合适的才是最好的</strong>”。</p><h3 id="中心思想："><a href="#中心思想：" class="headerlink" title="中心思想："></a>中心思想：</h3><ul><li>解决问题：前端架构的设计，目的<u>增加项目的可管理性、稳定性、可扩展性</u>。</li><li>质量与成本：对于需要额外开发工作量的事务，我们在决定是否去做的时候，应该考虑到两个要素：第一个是花费的人力成本，第二个是未来可能节约的时间和金钱、避免的项目风险与资损、提高对业务的支撑能力以带来在业务上可衡量的更高的价值、以及其他价值。</li><li>定性和定量：架构里设计一定要有是可衡量的意义的内容，最好是可以定量的（可以衡量带来的收益或减少的成本），至少是可以定性的（无法用数字阐述收益，但我们可以明确这么做是有意义的），例如：增加安全性降低风险。</li><li>数据敏感：专门写这一条强调数据作为依据的重要性。当我们需要说服其他部门/上级管理者，以推动我们设计的内容时，只有数据——特别是跟钱有关的数据，才是最有说服力的证明。如果前期无法有数据支撑，可以安插埋点在系统之中，通过获取用户数据，对项目效果进行宣分析，并以此推动项目的演进。</li></ul><h3 id="设计分层："><a href="#设计分层：" class="headerlink" title="设计分层："></a>设计分层：</h3><p>整个架构设计分为：<strong>基础层</strong>和<strong>应用层</strong></p><p>基础层偏基础设施建设，与业务相关性较低。</p><p>应用层更贴近用户，用于解决某一个问题。</p><p>部分两个都沾边的，根据经验划分到其中一个。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>由于已经谈到架构层级，因此很多内容，并不仅仅只属于前端领域，有很多内容是复合领域（前端、后端、运维、测试），因此需要负责架构的人，技术栈足够全面，对未来发展有足够的前瞻性。</p><p>文章的内容结构为：【项目】—&gt;【解决的问题和带来的好处】—&gt;【项目的实际意义】</p><h2 id="基础层设计"><a href="#基础层设计" class="headerlink" title="基础层设计"></a>基础层设计</h2><h3 id="自建Git平台"><a href="#自建Git平台" class="headerlink" title="自建Git平台"></a>自建Git平台</h3><p>这个是基础，使用Git平台的难度非常低。强烈建议使用Gitlab进行版本管理，自建Gitlab难度并不大，方便管理，包括代码管理、权限管理、提交日志查询，以及联动一些第三方插件。在<a href="https://class.imooc.com/sale/webfullstack">《大前端》</a>的课程中，有专门的介绍，这里不再累述。</p><blockquote><p>公司代码是公司的重要资产，使用自建Gitlab可以有效保护公司资产。</p></blockquote><p>版本管理的几个关键点：</p><ol><li><p>发布后不可再更改：指当例如1.0.0版本成功发布后，不可再更改1.0.0 tag上的代码，否则可能会导致版本管理混乱。</p></li><li><p>全自动流程发布；指应避免开发者提交后，手动编译打包等操作。换句话说，开发人员发布后，将自动发布到预发布/生产环境。开发人员不和相关环境直接接触。实现这个需要参考下面的CI/CD平台自动发布。</p></li><li><p>多版本并存；指当例如发布2.0.0版本后，1.0.0版本的代码应仍保存在线上（例如CDN），这样当出现线上bug时，方便快速回滚到上一个版本。<br>意义：提高项目的可控性。</p></li></ol><h3 id="自动编译发布CI-CD平台"><a href="#自动编译发布CI-CD平台" class="headerlink" title="自动编译发布CI/CD平台"></a>自动编译发布CI/CD平台</h3><p>这个工具用于在代码发布后，执行一系列流程，例如自动编译打包合并，然后再从Gitlab发布到CDN或者静态资源服务器。</p><p>使用这个工具，可以让一般研发人员不关心代码传到Gitlab后会发生什么事情，只需要专心于开发就可以了。</p><p>意义：让研发人员专心于研发，和环境、运维等事情脱钩。</p><h3 id="纯前端版本发布"><a href="#纯前端版本发布" class="headerlink" title="纯前端版本发布"></a>纯前端版本发布</h3><p>纯前端版本发布分为两步：</p><p>前端发布到生产环境——此时可以通过外网链接加正确的版本号访问到新版本的代码，但页面上的资源还是旧版本；</p><p>前端通过配置工具（或者是直接更新html文件），将html中引入的资源，改为新版本。</p><p>解决的问题是：当前端需要发布新版本时，可以不依赖于后端（根据实际情况，也可以不依赖于运维）。毕竟有很多需求并不需要后端介入，单纯改个前端版本后就要后端发布一次，显然是一件非常麻烦的事情。</p><p>这个需要专门的工具，用于配置版本发布，我最近就在写这个。</p><p>意义：提高发布效率，降低发布带来的人员时间损耗（这些都是钱），也可以在前端版本回滚的时候，速度更快。</p><h3 id="统一脚手架"><a href="#统一脚手架" class="headerlink" title="统一脚手架"></a>统一脚手架</h3><p>适用场景：有比较多独立中小项目。</p><p>好处：可以减少开发人员配置脚手架带来的时间损耗（特殊功能可以fork脚手架后再自行定制）；</p><p>统一项目结构，方便管理，也降低项目交接时带来的需要熟悉项目的时间；</p><p>方便统一技术栈，可以预先引入固定的组件库；</p><p>意义：提高开发人员在多个项目之间的快速切换能力，提高项目可维护性，统一公司技术栈，避免因为环境不同导致奇怪的问题。</p><h3 id="Node中间层"><a href="#Node中间层" class="headerlink" title="Node中间层"></a>Node中间层</h3><p>适用场景：需要SEO且前端使用React、vue，或前端介入后端逻辑，直接读取后端服务或者数据库的情况。</p><p>SEO：仁者见仁智者见智，虽然很多公司已经不做了，但通常认为，还是有一定意义的（特别是需要搜索引擎引流的时候），因此React或者Vue的同构是必须的。并且同构还可以降低首页白屏时间；</p><p>前端读取后端服务/数据库：好处是提高前端的开发效率和对业务的支持能力，缺点是可能导致P0级故障。</p><p>意义：让前端可以侵入后端领域，质的提升对业务的支持能力。</p><h3 id="埋点系统"><a href="#埋点系统" class="headerlink" title="埋点系统"></a>埋点系统</h3><p>强烈推荐前端做自己的埋点系统。这个不同于后端的日志系统。</p><p>前端埋点系统的好处：</p><ul><li>记录每个页面的访问量（日周月年的UV、PV）；</li><li>记录每个功能的使用量；</li><li>捕捉报错情况；</li><li>图表化显示，方便给其他部门展示；</li></ul><p>埋点系统是前端高度介入业务，把握业务发展情况的一把利剑，通过这个系统，我们可以比后端更深刻的把握用户的习惯，以及给产品经理、运营等人员提供准确的数据依据。当有了数据后，前端人员就可以针对性的优化功能、布局、页面交互逻辑、用户使用流程。</p><p>埋点系统应和业务解耦，开发人员使用时注册，然后在项目中引入。然后在埋点系统里查看相关数据（例如以小时、日、周、月、年为周期查看）。</p><p>意义：数据是money，数据是公司的生命线，数据是最好的武器。</p><h3 id="监控和报警系统"><a href="#监控和报警系统" class="headerlink" title="监控和报警系统"></a>监控和报警系统</h3><p>监控和报警系统应基于埋点系统而建立，在如以下场景时触发：</p><ul><li>当访问量有比较大的变化（比如日PV/UV只有之前20%以下）时，自动触发报警，发送邮件到相关人员邮箱；</li><li>比如报错量大幅度上升（比如200%或更高），则触发报警；</li><li>当一段时间内没有任何访问量（不符合之前的情况），则触发报警；</li><li>每过一段时间，自动汇总访问者/报错触发者的相关信息（例如系统、浏览器版本等）；</li></ul><p>建设这个系统的好处在于，提前发现一些不容易发现的bug（需要埋点做的比较扎实）。有一些线上bug，因为用户环境特殊，导致无法被开发人员和测试人员发现。但其中一部分bug又因为不涉及资金，并不会导致资损（因此也不会被后端的监控系统所发现），这样的bug非常容易影响项目里某个链路的正常使用。</p><p>意义：提高项目的稳定性，提高对业务的把控能力。降低bug数，降低资损的可能性，提前发现某些功能的bug（在工单到来之前）</p><h3 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h3><p>前端的安全管理，通常要依赖于后端，至于只跟单纯有关系的例如dom.innerHTML= ‘xxx ‘这种太基础。</p><p>安全管理的很难从架构设计上完全避免，但还是有一定解决方案的，常见安全问题如下：</p><ul><li>XSS注入：对用户输入的内容，需要转码（大部分时候要server端来处理，偶尔也需要前端处理），禁止使用eval函数；</li><li>https：这个显然是必须的，好处非常多；</li><li>CSRF：要求server端加入CSRF的处理方法（至少在关键页面加入）；</li><li>意义：减少安全漏洞，避免用户受到损失，避免遭遇恶意攻击，增加系统的稳定性和安全性。</li></ul><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p>ESLint的好处很多：</p><ul><li>降低低级bug（例如拼写问题）出现的概率；</li><li>增加代码的可维护性，可阅读性；</li><li>硬性统一代码风格，团队协作起来时更轻松；</li></ul><p>总的来说，ESLint推荐直接配置到脚手架之中，对我们提高代码的可维护性的帮助会很大。可以考虑在上传到gitlab时，硬性要求ESLint校验，通过的才允许上传。</p><p>意义：提高代码的可维护性，降低团队协作的成本。</p><h3 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h3><p>灰度发布是大型项目在发布时的常见方法，指在发布版本时，初始情况下，只允许小比例（比如1~5%比例的用户使用），若出现问题时，可以快速回滚使用老版本，适用于主链路和访问量极大的页面。</p><p>好处有以下几点：</p><ul><li>生产环境比开发环境复杂，灰度发布时可以在生产环境小范围尝试观察新版本是否可以正常运行，即使出问题，也可以控制损失。</li><li>对于大版本更新，可以先灰度一部分，观察埋点效果和用户反馈（即所谓的抢先试用版）。假如效果并不好，那么回滚到老版本也可以及时止损；</li><li>当我们需要验证某些想法或问题的时候，可以先灰度一部分，快速验证效果如何，然后查漏补缺或者针对性优化；</li></ul><p>灰度发布通常分为多个阶段，灰度发布一定要允许配置某些IP/账号访问时，可以直接访问到灰度版本。</p><p>意义：降低风险，提高发布灵活度。</p><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>这个并不是指常见的前后端分离，而是指在分配前后端管控的领域。</p><p>中小项目常见的情况是后端只提供接口和让某个url指向某个html，前端负责html、css、js等静态资源。</p><p>但大型项目并不建议这么做，建议前端负责除html以外的静态资源，而html交给后端处理，理由有很多：</p><p>后端进行渲染，方便统一插入一些代码和资源，例如埋点js，监控js，国际化文本资源，页面标识符等。这些通常是后端通过调用某些服务直接写入的；<br>当页面需要统一的头尾时（参考淘宝里我的淘宝页面），前端不应该关注这些跟当前页面无关的东西；</p><p>某些东西，如果通过html来管理，那么耦合度太高了，违背了解耦和分离的原则；</p><p>前端版本发布在后端引入某种功能模块后，可以从单独的页面控制前端发布内容，比更新html更方便，也利于灰度发布；</p><p>意义：更规范的进行页面管理，降低页面和功能的耦合度，减少复杂页面的环境配置时间。</p><h3 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h3><p>Mock也是常见前端系统之一，用于解决在后端接口未好时，生成返回的数据。</p><p>我个人建议DOClever等平台工具来Mock，思路如下：</p><p>当在开发环境下，访问链接通常是localhost:8000/index.html，此时设置成为<code>开发中</code>。</p><p>当线上接口可以获取到数据后，修改mock系统接口的状态<code>开发已完成</code>，系统会自动切换到生产接口。</p><p>意义：在前后端并行开发时，降低沟通交流成本，方便开发完毕后直接对接。</p><h3 id="定期备份"><a href="#定期备份" class="headerlink" title="定期备份"></a>定期备份</h3><p>备份是常被忽略的一件事情，但当我们遇见毁灭性场景时，缺少备份带来的损失是非常大的，常见场景：</p><ul><li>服务器损坏，导致存在该服务器上的内容全部完蛋；</li><li>触发某致命bug或者错误操作（例如rm -f），导致文件和数据全部消失；</li><li>数据库出现错误操作或出现问题，导致用户数据、公司资产遭受严重损失；</li></ul><p>总的来说，没人想遇见这样的场景，但我们必须考虑这种极端情况的发生，因此需要从架构层面解决这个问题。常见方法是定期备份、多机备份、容灾系统建设等。</p><p>意义：避免在遭遇极端场景时，给公司带来不可估量的损失。</p><h2 id="应用层设计"><a href="#应用层设计" class="headerlink" title="应用层设计"></a>应用层设计</h2><h3 id="多页和单页"><a href="#多页和单页" class="headerlink" title="多页和单页"></a>多页和单页</h3><p>除了特殊场景，通常推荐使用主流前端框架Vue &amp; React + SSR首屏优化。理由如下：</p><ul><li>主流项目的技术已经非常的成熟，受众广，而且文档全</li><li>SSR技术有利于提升整体用户感知与体验，对于纯后台的项目不做强制的要求</li><li>无论是Vue 还是 React，在跨端跨界部分的生态都建设的非常不错，可以横向进行扩展</li></ul><p>意义：降低长期项目迭代维护的难度，</p><h3 id="以应用为单位划分前端项目"><a href="#以应用为单位划分前端项目" class="headerlink" title="以应用为单位划分前端项目"></a>以应用为单位划分前端项目</h3><p>在项目比较大的时候，将所有页面的前端文件放入到同一个代码仓库里，我之前参与过一家企业的前端项目开发，发现其就是这么做的。根据使用经验来看，存在很多问题：</p><p>会极大的增加代码的维护难度；</p><ul><li>项目会变得很丑陋；</li><li>不方便权限管理，容易造成页面误更改或代码泄密；</li><li>任何人都有权利改任何他能看到的页面（在合并代码的时候，管理人员并不能确定他本次修改的页面是否是需求里他应该改的页面）；</li><li>发布成本高，即使改一个页面，也需要发布所有资源；</li></ul><p>因此，我们应该避免这种现象的发生，个人推荐以应用为单位进行开发、发布。所谓应用即指一个业务涉及到的前后端代码，好处很多：</p><ul><li>方便进行管理，当某个业务有需求变更时，可以只给研发人员该业务前端应用的developer权限；</li><li>在需要发布某业务时，只需要发布该业务的所属应用即可；</li></ul><p>意义：规范项目，增加代码的安全性，降低项目维护成本。</p><h3 id="基础组件库的建设"><a href="#基础组件库的建设" class="headerlink" title="基础组件库的建设"></a>基础组件库的建设</h3><p>这个蛮基础的，对于组件库的建设，不建议研发人员较少时去做这件事情，专职前端开发人数少于10人时，建议使用比较靠谱的第三方UI库，例如Antd，这样性价比更高。</p><p>设计基础组件库的前提，是要求统一技术栈，这样才能最大化基础组件库的效益。组件库建议以使用以下参考标准：</p><ul><li>使用ts；</li><li>可扩展性强；</li><li>适用程度高；</li><li>文档清楚详细；</li><li>版本隔离，小版本优化加功能，大改需要大版本更新；</li><li>和UI协调统一，要求UI交互参与进来；</li></ul><p>总的来说，建设起来后，利大于弊，但是需要专人维护，因此还是有一定成本的。</p><p>意义：统一不同/相同产品线之间的风格，给用户更好的体验，减少单次开发中写UI组件时浪费的时间和人力，提高开发效率。</p><h3 id="技术栈统一"><a href="#技术栈统一" class="headerlink" title="技术栈统一"></a>技术栈统一</h3><p>前端有三大主流框架，还有兼容性最强jQuery，以及各种第三方库，UI框架。因此项目需求如果复杂一些，很容易形成一个大杂烩。因此前端的技术栈必须统一，具体来说，建议实现以下举措：</p><ul><li>三大框架选型其一，团队水平一般推荐Vue、水平较好推荐React，对外项目选React或者ng；</li><li>需要兼容IE8或更老版本时，建议使用jQuery；</li><li>组件库自建或者统一选择一个固定的第三方；</li><li>一些特殊第三方库统一使用一个版本，例如需要使用地图时，固定使用高德或百度或腾讯地图；</li><li>基础设施建设应避免重复造轮子，所有团队尽量共用，并有专门的前端平_台负责统一这些东西，对于特殊需求，可以新建，但应当有说服力；</li></ul><p>总的来说，技术栈统一的好处很多，可以有效提高开发效率，降低重复造轮子产生的成本。</p><p>意义：方便招人，简化团队成员培养成本，以及提高项目的可持续性。</p><h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><p>常见的问题是IE6、7、8，以及部分小众浏览器（PC和手机）产生的奇怪问题。因此应该考虑统一解决方案，避免bug的重复产生。常见解决方案有：<br>配置postcss，让某些css增加兼容性前缀；</p><ul><li>写一个wepback的loader，处理某些特殊场景；</li><li>规范团队代码，使用更稳定的写法（例如移动端避免使用fixed进行布局）；</li><li>对常见问题、疑难问题，总结解决方案并团队共享；</li><li>建议或引导用户使用高版本浏览器（比如chrome）；</li></ul><p>意义：避免浏览器环境产生的bug，以及排查此类bug所浪费的大量时间。</p><h3 id="内容平台建设"><a href="#内容平台建设" class="headerlink" title="内容平台建设"></a>内容平台建设</h3><p>为了提高公司内部的沟通效率，总结经验，以及保密原因。应建设一个内部论坛+博客站点。其具备的好处如下：</p><ul><li>可以记录公司的历史；</li><li>研发同学之间分享经验；</li><li>总结转载一些外界比较精品的文章，提高大家的眼界；</li><li>增加公司内部同学的交流，有利于公司的团队和文化建设；</li><li>对某些技术问题可以进行讨论，减少因没有达成共识带来的沟通损耗；</li></ul><p>众所周知，大型互联网公司通常都有这样一个内部论坛和博客站点。其降低了公司的沟通和交流成本，也增加了公司的技术积累。</p><p>意义：博客增强技术积累，论坛增强公司内部沟通能力。</p><h3 id="权限管理平台"><a href="#权限管理平台" class="headerlink" title="权限管理平台"></a>权限管理平台</h3><p>当公司内部人员较多时，应有一个专门的平台，来管理、规范用户的权限以及可访问内容。权限管理平台有几个特点：</p><ul><li>必然和Server端天然高耦合度，因此需要有专门的控制模块负责处理权限问题（负责Server端开发处理，或者前端通过中间层例如Node层介入处理）；</li><li>自动化流程控制，即用户创建、申请、审批、离职自动删除，都应该是由系统推进并提醒相关人士，必要时应能触发报警；</li><li>权限应有时效性，减少永久性权限的产生；</li><li>审批流程应清晰可见，每一阶段流程应具体明确；</li><li>应与公司流程紧密结合，并且提高可修改性，方便公司后期进行流程优化；</li></ul><p>意义：使得公司内部流程正规化、信息化。</p><h3 id="登录系统设计（单点登录）"><a href="#登录系统设计（单点登录）" class="headerlink" title="登录系统设计（单点登录）"></a>登录系统设计（单点登录）</h3><p>当公司内部业务线比较复杂但相互之间的耦合度比较高时，我们应该考虑设计添加单点登录系统。具体来说，用户在一处登录，即可以在任何页面访问，登出时，也同样在任何页面都失去登录状态。SSO的好处很多：</p><ul><li>增强用户体验；</li><li>打通了不同业务系统之间的用户数据；</li><li>方便统一管理用户；</li><li>有利于引流；</li><li>降低开发系统的成本（不需要每个业务都开发一次登录系统和用户状态控制）；</li><li>总的来说，大中型web应用，SSO可以带来很多好处，缺点却很少。</li></ul><p>意义：用户体验增强，打通不同业务之间的间隔，降低开发成本和用户管理成本。</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>前端资源的加载速度是衡量用户体验的重要指标之一。</p><p>而现实中，因为种种因素，用户在加载页面资源时，会受到很多限制。因此上CDN是非常有意义的，好处如下：</p><ul><li>用户来自不同地区，加入CDN可以使用户访问资源时，访问离自己比较近的CDN服务器，降低访问延迟；</li><li>降低服务器带宽使用成本；</li><li>支持视频、静态资源、大文件、小文件、直播等多种业务场景；</li><li>消除跨运营商造成的网络速度较慢的问题；</li><li>降低DDOS攻击造成的对网站的影响；</li><li>CDN是一种比较成熟的技术，各大云平_台都有提供CDN服务，价格也不贵，因此CDN的性价比很高。</li></ul><p>意义：增加用户访问速度，降低网络延迟，带宽优化，减少服务器负载，增强对攻击的抵抗能力。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>目前来看，负载均衡通常使用Nginx比较多，以前也有使用Apache。当遇见大型项目的时候，负载均衡和分布式几乎是必须的。</p><p>负载均衡有以下好处：</p><ul><li>降低单台server的压力，提高业务承载能力；</li><li>方便应对峰值流量，扩容方便（如举办某些活动时）；</li><li>增强业务的可用性、扩展性、稳定性；</li><li>负载均衡已经是蛮常见的技术了，好处不用多说，很容易理解。</li></ul><p>意义：增强业务的可用性、扩展性、稳定性，可以支持更多用户的访问。</p><h3 id="多端共用一套接口"><a href="#多端共用一套接口" class="headerlink" title="多端共用一套接口"></a>多端共用一套接口</h3><p>目前常见场景是一个业务，同时有PC页面和H5页面，由于业务是一样的，因此应避免同一个业务有多套接口分别适用于PC和H5端。</p><p>因此解决方案如下：</p><ul><li>后端提供的接口，应该同时包含PC和H5的数据（即单独对一个存在亢余数据）；</li><li>接口应当稳定，即当业务变更时，应尽量采取追加数据的形式；</li><li>只有在单独一端需要特殊业务流程时，设计单端独有接口；</li><li>多端共用接口，是减少开发工作量，并且提高业务可维护性的重要解决方案。</li></ul><p>意义：降低开发工作量，增强可维护性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于各个公司具体情况不同，项目也具有特殊性，因此以上设计不可强行套入，应根据自己公司规模、项目进展、人员数量等，先添加比较重要的功能和设计。并需要考虑到长期项目的可维护性和发展需要，对部分基础设施进行提前研发设计。</p><p>篇幅所限，因此无法面面俱到，只提了一些我认为比较重要的架构层面需要考虑的内容，欢迎大家补充。大家如果有自己的看法，欢迎回复。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;入门很多年的前端小伙伴，也会遇到工作中需要设计大型项目的时候。如何做好前期的架构设计，对于后期项目的扩展与升级都是非常重要的。&lt;/p&gt;
&lt;p&gt;本文不会侧重于具体技术实现，而是尝试从整体角度出发，分析为什么与怎么做，以及成本和产出如何。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://www.toimc.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis-cli的常见操作</title>
    <link href="https://www.toimc.com/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.toimc.com/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</id>
    <published>2021-02-22T08:44:00.000Z</published>
    <updated>2021-03-02T14:48:20.153Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Redis及redis-cli的使用方式，介绍redis操作中的一些常见的命令。</p><p>分为以下几个部分介绍：</p><ul><li>docker中的redis如何进入命令模式</li><li>redis的常见命令及用法</li><li>有哪些比较好的redis连接工具</li></ul><span id="more"></span><h2 id="进入redis的命令模式"><a href="#进入redis的命令模式" class="headerlink" title="进入redis的命令模式"></a>进入redis的命令模式</h2><p>以下实例讲解了如何启动 redis 客户端：</p><p>启动 redis 服务器，打开终端并输入命令<code>redis-cli</code>，该命令会连接本地的redis 服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>如果我们是使用的docker启动的redis，那该怎么办呢？比如下图中的<code>imooc-redis</code><br><img src="https://uploader.shimo.im/f/E6nuYmCeddh2c6lf.png!thumbnail?fileGuid=1lq7MKaPDaf7zxAe" alt="图片"></p><p>我们可以使用如下的命令进入redis的命令模式：</p><p><img src="https://uploader.shimo.im/f/U1OG7JtZ0LFNPxDh.png!thumbnail?fileGuid=1lq7MKaPDaf7zxAe" alt="图片"></p><p>方便复制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it imooc-redis redis-cli</span><br></pre></td></tr></table></figure><p>这里的<code>imooc-redis</code>可以换成自己的容器的名称<br>如果自己的redis设置的密码，则输入命令后会出现如下提示：</p><p><img src="https://uploader.shimo.im/f/qA1AQr9JynLKoqur.png!thumbnail?fileGuid=1lq7MKaPDaf7zxAe" alt="图片"></p><p>那么可以使用<code>auth</code>命令进行登录鉴权：</p><p><img src="https://uploader.shimo.im/f/HYM9wG1cbtgEp4YI.png!thumbnail?fileGuid=1lq7MKaPDaf7zxAe" alt="图片"></p><h2 id="redis的常见命令及用法"><a href="#redis的常见命令及用法" class="headerlink" title="redis的常见命令及用法"></a>redis的常见命令及用法</h2><h3 id="key操作命令"><a href="#key操作命令" class="headerlink" title="key操作命令"></a>key操作命令</h3><h4 id="获取所有键"><a href="#获取所有键" class="headerlink" title="获取所有键"></a>获取所有键</h4><blockquote><p>语法：keys pattern</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;toimc&quot;</span><br></pre></td></tr></table></figure><p><code>*</code>表示通配符，表示任意字符，会遍历所有键显示所有的键列表，时间复杂度O(n)，在生产环境不建议使用。</p><h4 id="获取键总数"><a href="#获取键总数" class="headerlink" title="获取键总数"></a>获取键总数</h4><blockquote><p>语法：dbsize</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><p>获取键总数时不会遍历所有的键，直接获取内部变量，时间复杂度O(1)。</p><h4 id="查询键是否存在"><a href="#查询键是否存在" class="headerlink" title="查询键是否存在"></a>查询键是否存在</h4><blockquote><p>语法：exists key [key …]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists toimc java</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p>查询查询多个，返回存在的个数。</p><h4 id="删除键"><a href="#删除键" class="headerlink" title="删除键"></a>删除键</h4><blockquote><p>语法：del key [key …]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del java toimc</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>可以删除多个，返回删除成功的个数。</p><h4 id="查询键类型"><a href="#查询键类型" class="headerlink" title="查询键类型"></a>查询键类型</h4><blockquote><p>语法： type key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type toimc</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h4 id="移动键"><a href="#移动键" class="headerlink" title="移动键"></a>移动键</h4><blockquote><p>语法：move key db</p></blockquote><p>如把toimc移到2号数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; move toimc 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; select 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; keys *</span><br><span class="line">1) &quot;toimc&quot;</span><br></pre></td></tr></table></figure><h4 id="查询key的生命周期（秒）"><a href="#查询key的生命周期（秒）" class="headerlink" title="查询key的生命周期（秒）"></a>查询key的生命周期（秒）</h4><blockquote><p>秒语法：ttl key<br>毫秒语法：pttl key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; ttl toimc</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure><p>-1：永远不过期。</p><h4 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h4><blockquote><p>秒语法：expire key seconds<br>毫秒语法：pexpire key milliseconds</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; expire toimc 60</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[2]&gt; ttl toimc</span><br><span class="line">(integer) 55</span><br></pre></td></tr></table></figure><h4 id="设置永不过期"><a href="#设置永不过期" class="headerlink" title="设置永不过期"></a>设置永不过期</h4><blockquote><p>语法：persist key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; persist toimc</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h4 id="更改键名称"><a href="#更改键名称" class="headerlink" title="更改键名称"></a>更改键名称</h4><blockquote><p>语法：rename key newkey</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; rename toimc toimc123</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="字符串操作命令"><a href="#字符串操作命令" class="headerlink" title="字符串操作命令"></a>字符串操作命令</h3><p>字符串是Redis中最基本的数据类型，单个数据能存储的最大空间是512M。</p><h4 id="存放键值"><a href="#存放键值" class="headerlink" title="存放键值"></a>存放键值</h4><blockquote><p>语法：set key value [EX seconds] [PX milliseconds] [NX|XX]</p></blockquote><p>nx：如果key不存在则建立，xx：如果key存在则修改其值，也可以直接使用setnx/setex命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set toimc 666</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="获取键值"><a href="#获取键值" class="headerlink" title="获取键值"></a>获取键值</h4><blockquote><p>语法：get key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; get toimc</span><br><span class="line">&quot;666&quot;</span><br></pre></td></tr></table></figure><h4 id="值递增-递减"><a href="#值递增-递减" class="headerlink" title="值递增/递减"></a>值递增/递减</h4><p>如果字符串中的值是数字类型的，可以使用incr命令每次递增，不是数字类型则报错。</p><blockquote><p>语法：incr key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; incr toimc</span><br><span class="line">(integer) 667</span><br></pre></td></tr></table></figure><p>一次想递增N用incrby命令，如果是浮点型数据可以用incrbyfloat命令递增。<br>同样，递减使用decr、decrby命令。</p><h4 id="批量存放键值"><a href="#批量存放键值" class="headerlink" title="批量存放键值"></a>批量存放键值</h4><blockquote><p>语法：mset key value [key value …]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; mset java1 1 java2 2 java3 3</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h4 id="获取获取键值"><a href="#获取获取键值" class="headerlink" title="获取获取键值"></a>获取获取键值</h4><blockquote><p>语法：mget key [key …]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; mget java1 java2</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br></pre></td></tr></table></figure><p>Redis接收的是UTF-8的编码，如果是中文一个汉字将占3位返回。</p><h4 id="获取值长度"><a href="#获取值长度" class="headerlink" title="获取值长度"></a>获取值长度</h4><blockquote><p>语法：strlen key<br>127.0.0.1:6379[2]&gt; strlen toimc<br>(integer) 3</p></blockquote><h4 id="追加内容"><a href="#追加内容" class="headerlink" title="追加内容"></a>追加内容</h4><blockquote><p>语法：append key value</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[2]&gt; append toimc hi</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>向键值尾部添加，如上命令执行后由666变成666hi</p><h4 id="获取部分字符"><a href="#获取部分字符" class="headerlink" title="获取部分字符"></a>获取部分字符</h4><blockquote><p>语法：getrange key start end</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 127.0.0.1:6379[2]&gt; getrange toimc 0 4</span><br><span class="line">&quot;javas&quot;</span><br></pre></td></tr></table></figure><h3 id="散列操作命令"><a href="#散列操作命令" class="headerlink" title="散列操作命令"></a>散列操作命令</h3><p>redis字符串类型键和值是字典结构形式，这里的散列类型其值也可以是字典结构。</p><h4 id="存放键值-1"><a href="#存放键值-1" class="headerlink" title="存放键值"></a>存放键值</h4><blockquote><p>单个语法：hset key field value</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset user name toimc</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><blockquote><p>多个语法：hmset key field value [field value …]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset user name toimc age 20 address china</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>不存在时语法：hsetnx key field value</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hsetnx user tall 180</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h4 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h4><blockquote><p>单个语法：hget keyfield</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget user age</span><br><span class="line">&quot;20&quot;</span><br></pre></td></tr></table></figure><blockquote><p>多个语法：hmget key field [field …]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget user name age address</span><br><span class="line">1) &quot;toimc&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;china&quot;</span><br></pre></td></tr></table></figure><blockquote><p>获取所有键与值语法：hgetall key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;toimc&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">5) &quot;address&quot;</span><br><span class="line">6) &quot;china&quot;</span><br></pre></td></tr></table></figure><blockquote><p>获取所有字段语法：hkeys key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys user</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;address&quot;</span><br><span class="line">3) &quot;tall&quot;</span><br><span class="line">4) &quot;age&quot;</span><br></pre></td></tr></table></figure><blockquote><p>获取所有值语法：hvals key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hvals user</span><br><span class="line">1) &quot;toimc&quot;</span><br><span class="line">2) &quot;china&quot;</span><br><span class="line">3) &quot;170&quot;</span><br><span class="line">4) &quot;20&quot;</span><br></pre></td></tr></table></figure><h4 id="判断字段是否存在"><a href="#判断字段是否存在" class="headerlink" title="判断字段是否存在"></a>判断字段是否存在</h4><blockquote><p>语法：hexists key field</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists user address</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h4 id="获取字段数量"><a href="#获取字段数量" class="headerlink" title="获取字段数量"></a>获取字段数量</h4><blockquote><p>语法：hlen key</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><h4 id="递增-减"><a href="#递增-减" class="headerlink" title="递增/减"></a>递增/减</h4><blockquote><p>语法：hincrby key fieldincrement</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby user tall -10</span><br><span class="line">(integer) 170</span><br></pre></td></tr></table></figure><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4><blockquote><p>语法：hdel key field [field …]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hdel user age</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h3><p>Redis数据库的数量是固定的，并在配置文件中设置。默认情况下，你有16个数据库。每个数据库都由一个数字（而不是名称）来标识。</p><p>你可以使用以下命令<code>CONFIG````GET````data``b``as``e``s</code>来了解数据库的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET databases</span><br><span class="line">1) &quot;databases&quot;</span><br><span class="line">2) &quot;16&quot;</span><br></pre></td></tr></table></figure><p>也可以使用以下命令<code>INFO</code>或者<code>INFO keyspace</code>列出定义了某些键的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">INFO</span><br><span class="line"># Server</span><br><span class="line">redis_version:5.0.8</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:ce75a617c591114f</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 3.10.0-1062.4.1.el7.x86_64 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:8.3.0</span><br><span class="line">process_id:1</span><br><span class="line">run_id:75ea4375ee7a6f41697f721e268d148dc8af24e8</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:7316762</span><br><span class="line">uptime_in_days:84</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:2935552</span><br><span class="line">executable:&#x2F;data&#x2F;redis-server</span><br><span class="line">config_file:</span><br><span class="line">​</span><br><span class="line"># Clients</span><br><span class="line">connected_clients:4</span><br><span class="line">client_recent_max_input_buffer:2</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">​</span><br><span class="line"># Memory</span><br><span class="line">used_memory:925608</span><br><span class="line">used_memory_human:903.91K</span><br><span class="line">used_memory_rss:12644352</span><br><span class="line">used_memory_rss_human:12.06M</span><br><span class="line">used_memory_peak:3896552</span><br><span class="line">used_memory_peak_human:3.72M</span><br><span class="line">used_memory_peak_perc:23.75%</span><br><span class="line">used_memory_overhead:892348</span><br><span class="line">used_memory_startup:791296</span><br><span class="line">used_memory_dataset:33260</span><br><span class="line">used_memory_dataset_perc:24.76%</span><br><span class="line">allocator_allocated:917808</span><br><span class="line">allocator_active:1163264</span><br><span class="line">allocator_resident:3743744</span><br><span class="line">total_system_memory:16637751296</span><br><span class="line">total_system_memory_human:15.50G</span><br><span class="line">used_memory_lua:37888</span><br><span class="line">used_memory_lua_human:37.00K</span><br><span class="line">used_memory_scripts:0</span><br><span class="line">used_memory_scripts_human:0B</span><br><span class="line">number_of_cached_scripts:0</span><br><span class="line">maxmemory:0</span><br><span class="line">maxmemory_human:0B</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:1.27</span><br><span class="line">allocator_frag_bytes:245456</span><br><span class="line">allocator_rss_ratio:3.22</span><br><span class="line">allocator_rss_bytes:2580480</span><br><span class="line">rss_overhead_ratio:3.38</span><br><span class="line">rss_overhead_bytes:8900608</span><br><span class="line">mem_fragmentation_ratio:14.31</span><br><span class="line">mem_fragmentation_bytes:11760736</span><br><span class="line">mem_not_counted_for_evict:0</span><br><span class="line">mem_replication_backlog:0</span><br><span class="line">mem_clients_slaves:0</span><br><span class="line">mem_clients_normal:100460</span><br><span class="line">mem_aof_buffer:0</span><br><span class="line">mem_allocator:jemalloc-5.1.0</span><br><span class="line">active_defrag_running:0</span><br><span class="line">lazyfree_pending_objects:0</span><br><span class="line">​</span><br><span class="line"># Persistence</span><br><span class="line">loading:0</span><br><span class="line">rdb_changes_since_last_save:7989</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1606231526</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:-1</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">rdb_last_cow_size:0</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:0</span><br><span class="line">​</span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:4006</span><br><span class="line">total_commands_processed:81735</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">total_net_input_bytes:3084119</span><br><span class="line">total_net_output_bytes:22777832</span><br><span class="line">instantaneous_input_kbps:0.00</span><br><span class="line">instantaneous_output_kbps:0.00</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:759</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:63631</span><br><span class="line">keyspace_misses:2192</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:0</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">slave_expires_tracked_keys:0</span><br><span class="line">active_defrag_hits:0</span><br><span class="line">active_defrag_misses:0</span><br><span class="line">active_defrag_key_hits:0</span><br><span class="line">active_defrag_key_misses:0</span><br><span class="line">​</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:7e9137e98814fa2b756aff0e339de997cc1309a1</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">​</span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:8093.459923</span><br><span class="line">used_cpu_user:4547.190025</span><br><span class="line">used_cpu_sys_children:0.011915</span><br><span class="line">used_cpu_user_children:0.003634</span><br><span class="line">​</span><br><span class="line"># Cluster</span><br><span class="line">cluster_enabled:0</span><br><span class="line">​</span><br><span class="line"># Keyspace</span><br><span class="line">db0:keys&#x3D;7,expires&#x3D;1,avg_ttl&#x3D;177400</span><br></pre></td></tr></table></figure><p>查看单个片区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO keyspace</span><br><span class="line"># Keyspace</span><br><span class="line">db0:keys&#x3D;10,expires&#x3D;0</span><br><span class="line">db1:keys&#x3D;1,expires&#x3D;0</span><br><span class="line">db3:keys&#x3D;1,expires&#x3D;0</span><br></pre></td></tr></table></figure><p>或者使用redis的GUI工具来查看：</p><p><img src="https://uploader.shimo.im/f/ChbKyfk9ucthe8oV.png!thumbnail?fileGuid=1lq7MKaPDaf7zxAe" alt="图片"></p><h2 id="推荐redis学习文档"><a href="#推荐redis学习文档" class="headerlink" title="推荐redis学习文档"></a>推荐redis学习文档</h2><p>更多redis的命令可以参考如下网址：</p><p>[1] <a href="http://doc.redisfans.com/">http://doc</a><a href="http://doc.redisfans.com/">.</a><a href="http://doc.redisfans.com/">redisfans</a><a href="http://doc.redisfans.com/">.</a><a href="http://doc.redisfans.com/">com/</a></p><p>[2] <a href="http://www.redis.cn/">h</a><a href="http://www.redis.cn/">ttp://www.</a><a href="http://www.redis.cn/">re</a><a href="http://www.redis.cn/">d</a><a href="http://www.redis.cn/">i</a><a href="http://www.redis.cn/">s.c</a><a href="http://www.redis.cn/">n</a><a href="http://www.redis.cn/">/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍Redis及redis-cli的使用方式，介绍redis操作中的一些常见的命令。&lt;/p&gt;
&lt;p&gt;分为以下几个部分介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker中的redis如何进入命令模式&lt;/li&gt;
&lt;li&gt;redis的常见命令及用法&lt;/li&gt;
&lt;li&gt;有哪些比较好的redis连接工具&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Redis" scheme="https://www.toimc.com/tags/Redis/"/>
    
    <category term="redis-cli" scheme="https://www.toimc.com/tags/redis-cli/"/>
    
  </entry>
  
  <entry>
    <title>windows10家庭版如何添加Hyper-V</title>
    <link href="https://www.toimc.com/windows10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0Hyper-V/"/>
    <id>https://www.toimc.com/windows10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0Hyper-V/</id>
    <published>2021-02-22T08:22:45.000Z</published>
    <updated>2021-03-02T14:48:20.154Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<a href="https://class.imooc.com/sale/webfullstack">《大前端》</a>配套介绍图文内容，主要是介绍如何在windows10家庭版如何添加Hyper-V</p><span id="more"></span><h2 id="一、查看电脑是否能运行-Hyper-V"><a href="#一、查看电脑是否能运行-Hyper-V" class="headerlink" title="一、查看电脑是否能运行 Hyper-V"></a>一、查看电脑是否能运行 Hyper-V</h2><p>打开 cmd 窗口输入命令 “systeminfo” ，查看系统信息中的 Hyper-V要求或者 Win + R 快捷键调出运行对话框，输入 “msinfo32” ，打开系统信息窗口，查看 Hyper-V 要求</p><blockquote><p>Hyper-V - 虚拟机监视模式扩展<br>Hyper-V - 第二级地址转换扩展<br>Hyper-V - 固件中启用的虚拟化<br>Hyper-V - 数据扩展保护</p></blockquote><p>这四项必须全部为“是”，你的电脑才能运行 Hyper-V 虚拟机。</p><p><img src="https://uploader.shimo.im/f/DBf8kAtxw59w5DZg.png!thumbnail?fileGuid=47kgJ0X4NrCPLEqV" alt="图片"></p><p>其中<em>固件中启用虚拟化</em>有可能默认是关闭的，首先确认下电脑 CPU 支不支持虚拟化，</p><p>如何确认电脑是否支持虚拟化？——参考微软官方文档：<a href="https://docs.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/reference/hyper-v-requirements">https://docs.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/reference/hyper-v-requirements</a></p><p>windows的同学可以打开【任务管理器】，切换到【性能】选项卡，在【CPU】一栏的右方就可以看到：</p><p><img src="https://uploader.shimo.im/f/HavX4mmb4ojv6hUr.png!thumbnail?fileGuid=47kgJ0X4NrCPLEqV" alt="图片"></p><p>还不知道如何设置的，可以找官网论坛、客服啊，问问。一般现在的电脑都是默认支持的。如果支持，你就可以在 BIOS 设置开启虚拟化，步骤简单，但是不同主板型号进入 BIOS 方式不同，具体度娘都可以完美解决。可以参考：</p><p><a href="https://www.huaweicloud.com/articles/6db932c231bbfd41a2cf1bc34fca960c.html">https://www.huaweicloud.com/articles/6db932c231bbfd41a2cf1bc34fca960c.html</a></p><p>步骤：</p><p>支持虚拟化技术的可以在BIOS中开启，开启方法如下：</p><ol><li>进入BIOS。开机时按F2或F12或DEL或ESC等键（各电脑有所不同）。</li><li>进入BIOS后，找到Configuration选项，选择Intel Virtual Technology并回车，将光标移至Enabled，然后再回车，最后按F10保存并退出。</li></ol><p>如果找不到Configuration选项，可以试试下面的方法：</p><ol><li>某些HP（惠普）电脑进入BIOS后，需要选择SystemConfiguration（系统配置）菜单，然后选择Device Configuration（设备配置），找到Virtualization Technology，设置为Enabled。</li><li>某些联想Thinkpad电脑进入BIOS后，需要选择Security菜单，然后选择Virtualization，设置为Enabled。</li><li>某些DELL（戴尔）电脑进入BIOS后，需要选择Processor Settings菜单，然后选择VirtualizationTechnology，设置为Enabled。<h2 id="二、添加-Hyper-V"><a href="#二、添加-Hyper-V" class="headerlink" title="二、添加 Hyper-V"></a>二、添加 Hyper-V</h2></li></ol><p>如果你的系统是 WIN10 专业版/企业版</p><p>打开 控制面板 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能，勾选 Hyper-V 相关选项，确认，等待配置，提示重启，添加完成</p><p>如果你的系统是 WIN10 家庭版：</p><p>新建记事本，复制以下命令，后缀改为 .bat 或 .cmd，以管理员身份运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line">dir &#x2F;b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line">for &#x2F;f %%i in (&#39;findstr &#x2F;i . hyper-v.txt 2^&gt;nul&#39;) do dism &#x2F;online &#x2F;norestart &#x2F;add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span><br><span class="line">del hyper-v.txt</span><br><span class="line">Dism &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Hyper-V-All &#x2F;LimitAccess &#x2F;ALL</span><br></pre></td></tr></table></figure><p>命令处理完成后，输入 “Y” 确认重启，进行配置更新添加 Hyper-V 完成顺便说一下，Hyper-V 目前比较完美支持 Windows、Linux 等系统，不太支持苹果等系统，除了 Hyper-V 也可以试试其他软件，比如 VMWare 等。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是&lt;a href=&quot;https://class.imooc.com/sale/webfullstack&quot;&gt;《大前端》&lt;/a&gt;配套介绍图文内容，主要是介绍如何在windows10家庭版如何添加Hyper-V&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hyper-V" scheme="https://www.toimc.com/tags/Hyper-V/"/>
    
    <category term="虚拟机" scheme="https://www.toimc.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Vue3中令人兴奋的新功能</title>
    <link href="https://www.toimc.com/Vue3%E4%B8%AD%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
    <id>https://www.toimc.com/Vue3%E4%B8%AD%E4%BB%A4%E4%BA%BA%E5%85%B4%E5%A5%8B%E7%9A%84%E6%96%B0%E5%8A%9F%E8%83%BD/</id>
    <published>2020-03-12T16:44:45.000Z</published>
    <updated>2020-12-01T02:33:05.214Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中，我们<a href="./Vue3%E5%B0%86%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87.md">了解了Vue 3将带来的性能改进</a>。我们已经知道用新的Vue编写的应用程序性能炸裂（运行非常好），但性能并不是最重要的部分。对我们开发人员而言最重要的是，新版本将如何影响我们编写代码的方式。</p><p>如今，Vue 3带来了许多令人兴奋的新功能。 值得庆幸的是，Vue团队主要介绍了对当前API的添加和改进，而不是进行重大更改，因此，已经了解Vue 2的大家应该会非常习惯这些变化。</p><p>让我们从大多数人可能听说过的API开始…</p><span id="more"></span><h2 id="合成API（Composition-API）"><a href="#合成API（Composition-API）" class="headerlink" title="合成API（Composition API）"></a>合成API（Composition API）</h2><p>组合API是Vue的下一个主要版本中最常用的讨论和特色语法。这是一种全新的逻辑重用和代码组织方法。</p><p>当前，我们使用所谓的Options API构建组件。现在，添加到Vue组件的逻辑通常会采用：如<code>data</code>，<code>methods</code>，<code>computed</code>等这种方法，最大缺点是这是不JavaScript代码原生方式。您需要确切了解模板中可以访问哪些属性，以及<code>this</code>关键字的行为。在后台，Vue编译器需要将此属性转换为工作代码。因此，我们无法通过从自动建议或类型检查中受益（而大家想一想Typescript，马上就会明白了）。</p><p>Composition API旨在，通过将组件属性中当前可用的机制公开为JavaScript函数来解决此问题。Vue核心团队将Composition API描述为<em>“一组基于功能的附加API，可以灵活地组合组件逻辑”。</em>用Composition API编写的代码更具可读性，并且都是原生JS，这使它更易于阅读和学习。</p><p>让我们来看一个使用新的Composition API理解其工作原理的组件的简单示例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;increment&quot;</span>&gt;</span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;, double is &#123;&#123; double &#125;&#125;, click to increment.</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> double = computed(<span class="function">() =&gt;</span> count.value * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      count.value++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;component mounted!&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      double,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>现在，让我们将此代码分解为几部分，以了解发生了什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure><p>正如之前提到的，Composition API将组件属性公开为函数，因此第一步是导入所需的函数。当前情况下，我们需要使用创建反应式引用<code>ref</code>，使用计算属性创建<code>computed</code>和使用访问生命周期挂钩<code>onMounted</code>。</p><p>现在，你可能想知道这种神秘的<code>setup</code>方法是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br></pre></td></tr></table></figure><p>简而言之，它只是一个将属性和函数返回到模板的函数，而已。我们在这里声明所有反应性属性、计算属性、观察者和生命周期挂钩，然后将它们返回，以便可以在模板中使用它们。</p><p>我们没有从<code>setup</code>函数返回的内容将在模板中不可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>根据以上内容，我们声明了响应式的<code>count</code>用<code>ref</code>函数调用，它可以包装任何类型参数或对象，并返回其双向引用，传递的元素的值将保留在<code>value</code>创建的引用的属性中。例如，如果要访问<code>count</code>参考值，则需要明确要求<code>count.value</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = computed(<span class="function">() =&gt;</span> count.value * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…这正是我们在声明计算属性<code>double</code>以及<code>increment</code>函数时所做的事情。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onMounted(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;component mounted!&#x27;</span>))</span><br></pre></td></tr></table></figure><p>使用<code>onMounted</code>钩子，我们会在安装组件时记录一些消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  count,</span><br><span class="line">  double,</span><br><span class="line">  increment</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们返回<code>count</code>和<code>double</code>属性with <code>increment</code>方法，以使它们在模板中可用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;, double is &#123;&#123; double &#125;&#125;. Click to increment.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，我们可以访问<code>setup</code>模板中方法返回的属性和函数，就像通过旧的Options API声明它们一样。</p><p>这是一个简单的示例，也可以通过Options API轻松实现。</p><p><strong>新的Composition API的修改了编码方式，加强了在重用我们的代码/逻辑时代码块复用性。</strong></p><p><strong>使用Composition API进行代码重用</strong></p><p>新的Composition API具有更多优点，比如：代码复用。当前，如果我们要在其他组件之间共享一些代码，则有两个可用选项<code>mixins</code>和<code>作用域插槽</code>。两者都有缺点。</p><p>假设我们要提取<code>counter</code>功能并将其在其他组件中复用。在下面，您可以看到如何将其与可用的API和新的Composition API结合使用：</p><p>让我们从mixins开始：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CounterMixin <span class="keyword">from</span> <span class="string">&#x27;./mixins/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [CounterMixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mixins的最大缺点是</strong>：我们对它实际上添加到我们的组件中一无所知。这不仅使推理变得困难，而且还可能<strong>导致名称与现有属性和功能发生冲突。</strong></p><p>现在该是作用域插槽了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; count, increment &#125;&quot;</span>&gt;</span></span><br><span class="line">     &#123;&#123; count &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">Counter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用作用域插槽，我们确切地知道可以通过<code>v-slot</code>属性访问哪些属性，因此更容易理解代码。这种方法的缺点是：我们只能在模板中访问它，并且仅在<code>Counter</code>组件范围内可用。</p><p>现在是时候使用Composition API了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">increment</span> (<span class="params"></span>) </span>&#123; count.value++ &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    incrememt</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count, increment &#125; = useCounter()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是更优雅？我们不受模板和组件范围的限制，并且确切地知道可以从计数器访问哪些属性。另外，我们可以从编辑器中可用的代码完成中受益，因为<code>useCounter</code>它只是一个返回某些属性的函数。幕后没有魔力，因此编辑器可以帮助我们进行类型检查和建议。</p><p>这也是使用第三方库的一种更优雅的方式。例如，如果我们要使用Vuex，则可以显式使用<code>useStore</code>函数而不是污染Vue原型（<code>this.$store</code>）。这种方法还可以消除Vue插件的幕后魔力。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; commit, dispatch &#125; = useStore()</span><br></pre></td></tr></table></figure><p>如果您想了解有关Composition API及其用例的更多信息，我强烈建议您从Vue团队阅读<a href="https://vue-composition-api-rfc.netlify.com/">此文档</a>，<a href="https://vue-composition-api-rfc.netlify.com/">该文档</a>解释了新API背后的原因并提出了最佳用例。Vue核心团队的ThorstenLünborg 还提供了一个<a href="https://github.com/LinusBorg/composition-api-demos">很棒的存储库</a>，其中包含Composition API使用示例。</p><h2 id="全局安装-配置API更改"><a href="#全局安装-配置API更改" class="headerlink" title="全局安装/配置API更改"></a>全局安装/配置API更改</h2><p>我们可以在实例化和配置应用程序的方式上找到另一个重大变化。让我们看看它现在如何工作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.ignoredElements = [<span class="regexp">/^app-/</span>]</span><br><span class="line">Vue.use(<span class="comment">/* ... */</span>)</span><br><span class="line">Vue.mixin(<span class="comment">/* ... */</span>)</span><br><span class="line">Vue.component(<span class="comment">/* ... */</span>)</span><br><span class="line">Vue.directive(<span class="comment">/* ... */</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当前，我们正在使用全局<code>Vue</code>对象提供任何配置并创建新的Vue实例。对<code>Vue</code>对象所做的任何更改都会影响每个Vue实例和组件。</p><p>现在，让我们看看它如何在Vue 3中运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"></span><br><span class="line">app.config.ignoredElements = [<span class="regexp">/^app-/</span>]</span><br><span class="line">app.use(<span class="comment">/* ... */</span>)</span><br><span class="line">app.mixin(<span class="comment">/* ... */</span>)</span><br><span class="line">app.component(<span class="comment">/* ... */</span>)</span><br><span class="line">app.directive(<span class="comment">/* ... */</span>)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>您可能已经注意到，每个配置都限于使用定义的某个Vue应用程序<code>createApp</code>。</p><p>它可以使您的代码更易于理解，并且不易出现由第三方插件引起的意外问题。当前，如果某些第三方解决方案正在修改Vue对象，则它可能以意想不到的方式（尤其是全局混合）影响您的应用程序，而Vue 3则无法实现。</p><p>当前在<a href="https://github.com/vuejs/rfcs/pull/29">此RFC</a> 中讨论了此API更改，这意味着将来可能会更改。</p><h2 id="碎片（Fragments）"><a href="#碎片（Fragments）" class="headerlink" title="碎片（Fragments）"></a>碎片（Fragments）</h2><p>我们可以在Vue 3中期待的另一个激动人心的附加功能是片段。</p><p>您可能会问什么碎片？好吧，如果您创建一个Vue组件，则它只能有一个根节点。</p><p>这意味着无法创建这样的组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原因是代表任何Vue组件的Vue实例都需要绑定到单个DOM元素中。创建具有多个DOM节点的组件的唯一方法是通过创建不具有基础Vue实例的功能组件。</p><p>事实证明，React社区也有同样的问题。他们提出的解决方案是一个名为Fragment的虚拟元素。看起来或多或少是这样的；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Columns</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;React.Fragment&gt;</span><br><span class="line">        &lt;td&gt;Hello&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;World&lt;/td&gt;</span><br><span class="line">      &lt;/React.Fragment&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使Fragment看起来像一个普通的DOM元素，它也是虚拟的，根本不会在DOM树中呈现。这样，我们可以将组件功能绑定到单个元素中，而无需创建冗余DOM节点。</p><p>当前，您可以在带有<a href="https://vuejsdevelopers.com/2018/09/11/vue-multiple-root-fragments/">vue-fragments</a>库的Vue 2中使用片段，而在Vue 3中，您可以立即使用它！</p><h2 id="Suspense组件"><a href="#Suspense组件" class="headerlink" title="Suspense组件"></a>Suspense组件</h2><p>React生态系统中另一个将在Vue 3中采用的好主意是Suspense组件。</p><p>挂起将挂起组件渲染并渲染回退组件，直到满足条件为止。在Vue London Evan期间，您简短地谈到了这个主题，并向我们展示了我们可以期望的API。事实证明，Suspense只是具有插槽的组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Suspended-component</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">    Loading...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后备内容将一直显示到<code>Suspended-component</code>完全渲染为止。挂起可以等待，直到该组件被下载（如果这是一个异步组件），或者在<code>setup</code>功能上执行一些异步操作。</p><h2 id="多个v-model同时使用"><a href="#多个v-model同时使用" class="headerlink" title="多个v-model同时使用"></a>多个v-model同时使用</h2><p><code>v-model</code>是一种指令，可用于在给定组件上实现双向绑定。我们可以传递反应性属性并从组件内部对其进行修改。</p><p>我们<code>v-model</code>从表单元素非常了解：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;property /&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是您知道您可以使用<code>v-model</code>每个组件吗？内幕<code>v-model</code>只是传递<code>value</code>属性和侦听<code>input</code>事件的捷径。将以上示例重写为以下语法将具有完全相同的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;property&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">&quot;property = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>我们甚至可以使用components <code>model</code>属性更改默认属性和事件的名称：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model: &#123;</span><br><span class="line">  prop: <span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">  event: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如上面所示，vue2.x中采用<code>v-model</code>时，如果我们希望在组件中进行双向绑定，那么伪指令可能是一个非常有用的语法求和者。不幸的是，<code>v-model</code>每个组件只能有一个组件。</p><p>幸运的是，在Vue 3中这不会成为问题！您将能够提供<code>v-model</code>属性名称，并根据需要拥有任意数量的属性。在下面，您可以<code>v-model</code>在表单组件中找到两个的示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;InviteeForm</span><br><span class="line">  v-model:name=&quot;inviteeName&quot;</span><br><span class="line">  v-model:email=&quot;inviteeEmail&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>当前在<a href="https://github.com/vuejs/rfcs/pull/31">此RFC</a> 中讨论了此API更改，这意味着将来可能会更改。</p><h2 id="Portals组件（魔法提示类组件）"><a href="#Portals组件（魔法提示类组件）" class="headerlink" title="Portals组件（魔法提示类组件）"></a>Portals组件（魔法提示类组件）</h2><p>Portals是特殊的组件，旨在在当前组件之外呈现某些内容。这也是<a href="https://pl.reactjs.org/docs/portals.html">React本身实现的功能之一(https://pl.reactjs.org/docs/portals.html)</a>。这就是React文档关于门户的内容：</p><blockquote><p>“<em>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.</em>“</p></blockquote><p>这是处理模态框、弹出窗口和通常显示在页面顶部的组件的一种非常好的方法。通过使用Portals，您可以确保没有任何主机组件CSS规则，会影响您要显示的组件，并使您免于使用进行讨厌的黑客攻击<code>z-index</code>。</p><p>对于每个门户，我们需要指定它的目标目标，在其中将呈现提示类型内容。在下面，您可以看到<a href="https://github.com/LinusBorg/portal-vue">portal-vue</a>库的实现，该实现将此功能添加到Vue 2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">portal</span> <span class="attr">to</span>=<span class="string">&quot;destination&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This slot content will be rendered wherever thportal-target with name &#x27;destination&#x27;</span><br><span class="line">    is  located.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">portal</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">portal-target</span> <span class="attr">name</span>=<span class="string">&quot;destination&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  This component can be located anywhere in your App.</span></span><br><span class="line"><span class="comment">  The slot content of the above portal component wilbe rendered here.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">portal-target</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 3将附带对门户的开箱即用支持！</p><h2 id="新的自定义指令API"><a href="#新的自定义指令API" class="headerlink" title="新的自定义指令API"></a>新的自定义指令API</h2><p>自定义指令API在Vue 3中将略有变化，以更好地与组件生命周期保持一致。这项更改将使API更加直观，从而使新手更容易理解和学习API。</p><p>这是当前的自定义指令API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyDirective = &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, binding, vnode, prevVnode</span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>……这就是Vue 3中的样子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyDirective = &#123;</span><br><span class="line">  <span class="function"><span class="title">beforeMount</span>(<span class="params">el, binding, vnode, prevVnode</span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeUnmount</span>(<span class="params"></span>)</span> &#123;&#125;, <span class="comment">// new</span></span><br><span class="line">  <span class="function"><span class="title">unmounted</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使这是一项重大更改，也应该使用Vue兼容性构建轻松涵盖。</p><p>当前在<a href="https://github.com/vuejs/rfcs/pull/32/files">此RFC</a> 中讨论了此API更改，这意味着将来可能会更改。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>除了Composition API（它是Vue 3中最大的主要新API）之外，我们还可以找到很多较小的改进。我们可以看到，Vue正在朝着更好的开发人员体验和更简单，更直观的API迈进。也很高兴看到Vue团队决定采用许多想法，而这些想法目前只能通过第三方库提供给框架的核心。</p><p>上面的列表仅表示主要的API更改和改进。如果您对其他应用程序感到好奇，可以看一下<a href="https://github.com/vuejs/rfcs/">Vue RFCs存储库。</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一篇文章中，我们&lt;a href=&quot;./Vue3%E5%B0%86%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87.md&quot;&gt;了解了Vue 3将带来的性能改进&lt;/a&gt;。我们已经知道用新的Vue编写的应用程序性能炸裂（运行非常好），但性能并不是最重要的部分。对我们开发人员而言最重要的是，新版本将如何影响我们编写代码的方式。&lt;/p&gt;
&lt;p&gt;如今，Vue 3带来了许多令人兴奋的新功能。 值得庆幸的是，Vue团队主要介绍了对当前API的添加和改进，而不是进行重大更改，因此，已经了解Vue 2的大家应该会非常习惯这些变化。&lt;/p&gt;
&lt;p&gt;让我们从大多数人可能听说过的API开始…&lt;/p&gt;</summary>
    
    
    
    
    <category term="Vue3" scheme="https://www.toimc.com/tags/Vue3/"/>
    
    <category term="Vuejs" scheme="https://www.toimc.com/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue3将带来巨大的性能提升</title>
    <link href="https://www.toimc.com/Vue3%E5%B0%86%E5%B8%A6%E6%9D%A5%E5%B7%A8%E5%A4%A7%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/"/>
    <id>https://www.toimc.com/Vue3%E5%B0%86%E5%B8%A6%E6%9D%A5%E5%B7%A8%E5%A4%A7%E7%9A%84%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87/</id>
    <published>2020-03-12T16:11:04.000Z</published>
    <updated>2021-03-02T15:36:52.405Z</updated>
    
    <content type="html"><![CDATA[<p>即将发布的Vue.js的第三个主要版本。</p><p>通过下面的讨论，虽然还不能确定所有内容，但是我们可以放心地认为，它将是对当前版本（已经非常出色）的巨大改进。Vue团队在改进框架API方面做得非常出色。Evan You将Vue 3的目标描述为：</p><ul><li>让它<strong>更快</strong></li><li>让它<strong>更小</strong></li><li>使它<strong>更易于维护</strong></li><li>使<strong>原生目标更容易</strong></li><li>让<strong>您的生活更轻松</strong></li></ul><p>通过查看RFC，我确信上述所有目标都将毫无问题地实现。在本文中，我将引导您完成一些对我来说最有趣的更改，这些更改对我的影响和可能性而言。</p><span id="more"></span><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>在探究某些API之前，作为性能怪胎，我想谈一谈Vue 3的性能。还有很多事情要讨论！我们几乎可以在每个表面上找到明显的改进！</p><p>让我们从Vue 3的捆绑包大小开始。</p><p>当前最小化和压缩的Vue运行时权重约为20kB（当前2.6.10版本为22.8kB）。<strong>Vue 3捆绑包估计重约一半，因此只有〜10kB！</strong></p><h2 id="全局API分块（Tree-Shake机制）"><a href="#全局API分块（Tree-Shake机制）" class="headerlink" title="全局API分块（Tree Shake机制）"></a>全局API分块（Tree Shake机制）</h2><p>诸如更好的模块化之类的许多其他优化之上，Vue 3源代码将加入<a href="https://webpack.js.org/guides/tree-shaking/">tree-shake</a>。这意味着，如果您不使用其某些功能（例如<code>component</code>或者<code>v-show</code>指令），它们将不会包含在您的基础包中。</p><p>当前，无论我们从Vue核心使用什么功能，它们最终都会出现在生产代码中，因为Vue实例被导出为单个对象，并且捆绑程序无法检测到该对象的哪些属性在代码中使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Vue 2.x - whole `Vue` object is bundled for production </span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.nextTick(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> obj =  Vue.observable(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>为了使全局API可以进行代码分块，Vue团队决定通过命名导出导入其中的大多数方法，以便捆绑程序可以检测和删除未使用的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Vue 3.x - only imported properties are bundled</span></span><br><span class="line"><span class="keyword">import</span> &#123; nextTick, observable &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">nextTick(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> obj = observable(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这是一个重大变化，因为以前的全局API现在只能通过命名的导出才能使用。此更改影响：</p><ul><li><code>Vue.nextTick</code></li><li><code>Vue.observable</code></li><li><code>Vue.version</code></li><li><code>Vue.compile</code> （仅完整版本）</li><li><code>Vue.set</code> （仅在2.x兼容版本中，您很快会找到原因）</li><li><code>Vue.delete</code> （同上）</li></ul><p>我们需要一段时间才能完全受益于此功能，因为它需要在生态系统中采用。Vue团队将发布兼容性版本，因此我们应该能够使用也使用旧API的插件，但会降低性能。</p><p>除了tree shake的JavaScript API以外，还有很多其他功能。在后台，Vue编译器（将Vue模板转换为呈现功能的工具）将检测模板中使用的指令，并对其进行树状摇动。例如下面的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在被Vue编译器处理后，看起来或多或少是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, Transition, applyDirectives, vShow &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> h(Transition, [</span><br><span class="line">    applyDirectives(h(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>), <span class="built_in">this</span>, [vShow, <span class="built_in">this</span>.ok])</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个人都会从Global API tree shake中受益（尤其是我们的用户），但是我认为制作小型轻量级网站，比如：仅使用Vue功能子集进行交互的人（最能替代jQuery之类的库）的人。</p><h2 id="基于代理的响应式机制"><a href="#基于代理的响应式机制" class="headerlink" title="基于代理的响应式机制"></a>基于代理的响应式机制</h2><p>捆绑包的大小可能会严重影响您的应用加载时间，但是下载后，捆绑包的大小也应能够快速呈现且运行流畅。</p><p>Vue核心团队非常了解这一点，这就是为什么我们在运行时性能上也有很大改进的原因。</p><p>让我们从基于<a href="https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Proxy">JavaScript Proxies</a>的最具影响力的新反应系统之一开始。当前的Vue反应系统是基于的<code>Object.defineProperty</code>，这有一些限制。最常见和令人沮丧的一个事实是Vue <a href="https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats">无法跟踪反应对象的属性添加/删除</a>。为此，我们需要使用<code>Vue.set</code>并<code>Vue.delete</code>保持反应系统正常运行。使用JS Proxies，我们终于可以摆脱这种丑陋的解决方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Adding a new property to reacitve object in Vue 2.x</span></span><br><span class="line">Vue.set(<span class="built_in">this</span>.myObject, key, value) </span><br><span class="line"><span class="comment">// Adding a new property to reactive object in Vue 3</span></span><br><span class="line"><span class="built_in">this</span>.myObject[key] = value</span><br></pre></td></tr></table></figure><p>代理的真正影响可以从更快的组件初始化和修补中看出。<strong>根据测试，速度大约快2倍！</strong></p><img title="性能提升对比" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" width="600" src="https://static.www.toimc.com/blog/img/2020/Vue3将带来的性能提升/speed.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><p>由于以下事实，这种改进的原因尤为重要，那就是Vue必须使用吸气剂/设置剂来递归地遍历所有对象及其属性并对其进行转换。使用代理，此过程变得容易得多。</p><p><strong>值得一提的是，使用JS Proxies Vue 3会放弃对Internet Explorer（不是Edge）的支持，但是请不要担心-对于希望支持IE的用户来说，将会建立兼容的版本。</strong></p><h2 id="时间分片"><a href="#时间分片" class="headerlink" title="时间分片"></a>时间分片</h2><p>根据<a href="https://twitter.com/youyuxi/status/1183844215752671233">Evan You的推文</a><strong>更新</strong>此功能不会包含在Vue 3中。</p><p>Vue 3的另一个真正令人兴奋但很少提及的性能功能是对时间切片的实验支持。</p><p>我将用一个隐喻来解释什么是时间切片，我想让你想象一条冰淇淋生产线，很长的一个，因为那是镇上最好的冰淇淋。提供一个人之后，就会出现另一个人，等等。由于某种原因，没有关于可用口味的信息。要获取此信息，您需要询问直接出售冰淇淋的女士。</p><p>在这种情况下，我们可能最终会得到2条记录-其中一条给确信要购买冰淇淋的人（耐心等待），另一条给希望了解有关口味的更多信息的人，然后再决定是否要购买冰淇淋或不，最新的应该尽快获得此信息。不幸的是，只有一位女士在卖冰淇淋，她在为“主”线上的所有客户提供服务之前不会回答任何问题。</p><p>对于尚未被说服的客户来说，这并不是最好的体验，他们中的大多数人可能会发现不值得等待。为了解决这个问题，这位女士可以每2-3个服务对象回答一次问题。两组都应该对此解决方案感到满意。</p><p>这正是CPU与Web应用程序一起工作的方式。我们有一条“主”行（称为“主线程”），需要完成其所有主要任务（脚本，渲染等），然后才能响应用户交互。对于某些页面，这可能会导致非常糟糕的用户体验，具体取决于Vue组件加载或重新呈现所需的时间。</p><p>为了使其更可靠，最好将此脚本评估“切割”成碎片，然后查看每个脚本之后是否有要处理的用户输入。这样，无论需要进行多少次渲染或重新渲染，应用程序都将保持响应状态。这就是在Vue 3中的工作方式。</p><p>这是Evan在Vue 3中展示时间分片功能的方式。请注意脚本执行时间轴中的小间隙，这些间隙旨在处理用户输入。</p><img alt="图片裂了，联系：admin@wayearn.com" class="lazyload" width="600" src="https://static.www.toimc.com/blog/img/2020/Vue3将带来的性能提升/time%20slice.png?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/1000"><h2 id="能够轻松识别为什么重新渲染组件"><a href="#能够轻松识别为什么重新渲染组件" class="headerlink" title="能够轻松识别为什么重新渲染组件"></a>能够轻松识别为什么重新渲染组件</h2><p>工具与开箱即用的性能同等重要。</p><p>据此，我们可以在Vue 3中看到一个新的生命周期挂钩-<code>renderTriggered</code>。我们可以使用它来跟踪和消除不必要的组件重新渲染，当将其与Time Slicing结合使用时，这是在运行时性能优化中非常强大的武器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Component = &#123;</span><br><span class="line">  <span class="comment">// other properties</span></span><br><span class="line">  renderTriggered (event) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`Re-render of `</span> + <span class="built_in">this</span>.$options.name + <span class="string">` component`</span>, event)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="还有什么"><a href="#还有什么" class="headerlink" title="还有什么"></a>还有什么</h2><p>除了上面在Vue 3中看到的内容以外，还有很多内容，但是这些可能是影响最大的更改。大多数未提及的改进将隐藏在Vue编译器生成的代码中，或者与实现细节和算法绑定在一起</p><p>不过，有几项改进值得一提：</p><ul><li>输出代码将更易于针对JavaScript编译器进行优化</li><li>输出代码通常会更好地进行优化</li><li>由于改进了补丁算法，可以避免不必要的父母/孩子重新渲染</li></ul><p>另外，在接下来的几天里，您可以期待Evan You撰写的一篇深入的文章，介绍他们专门针对Vue编译器进行的性能优化（一旦发布，我将使用链接更新该文章）。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>尽管Vue已经确立为目前性能最佳的框架之一，但我们仍将在第三版中看到重大改进。特别是在捆绑包大小和运行时性能方面，还进行了无数次微优化。我认为Vue 3非常适合现代移动优先和性能导向的网络。</p><p>不要忘记Vue是唯一由社区完全驱动的主要框架。这篇文章（以及更多）中列出的所有变化都在<a href="https://github.com/vuejs/rfcs/">RFC</a>社区讨论。您可以帮助核心团队，表达您对有效RFC的意见，甚至可以提出自己的改进建议。让我们一起让Vue更好。</p><h2 id="下一步是什么"><a href="#下一步是什么" class="headerlink" title="下一步是什么"></a>下一步是什么</h2><p>在下一篇文章中，我们将探讨新的Vue 3 API将如何影响我们编写Web应用程序的方式。我们将研究各种API，包括最近流行的Composition API，并了解如何使用它编写更好和更可维护的代码。</p><p>原文：[Exciting new features in Vue 3](<a href="https://vueschool.io/articles/vuejs-tutorials/exciting-new-features-in-vue-3/?utm_source=drip&amp;utm_medium=email&amp;utm_campaign=My+presentation+on+the+new+Vue+3+features&amp;utm_campaign=My">https://vueschool.io/articles/vuejs-tutorials/exciting-new-features-in-vue-3/?utm_source=drip&amp;utm_medium=email&amp;utm_campaign=My+presentation+on+the+new+Vue+3+features&amp;utm_campaign=My</a> presentation on the new Vue 3 features&amp;utm_medium=email&amp;utm_source=drip)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;即将发布的Vue.js的第三个主要版本。&lt;/p&gt;
&lt;p&gt;通过下面的讨论，虽然还不能确定所有内容，但是我们可以放心地认为，它将是对当前版本（已经非常出色）的巨大改进。Vue团队在改进框架API方面做得非常出色。Evan You将Vue 3的目标描述为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让它&lt;strong&gt;更快&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;让它&lt;strong&gt;更小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使它&lt;strong&gt;更易于维护&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使&lt;strong&gt;原生目标更容易&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;让&lt;strong&gt;您的生活更轻松&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过查看RFC，我确信上述所有目标都将毫无问题地实现。在本文中，我将引导您完成一些对我来说最有趣的更改，这些更改对我的影响和可能性而言。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Vue3" scheme="https://www.toimc.com/tags/Vue3/"/>
    
    <category term="Vue" scheme="https://www.toimc.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>引领未来，走出自己的前端之路</title>
    <link href="https://www.toimc.com/%E5%BC%95%E9%A2%86%E6%9C%AA%E6%9D%A5%EF%BC%8C%E8%B5%B0%E5%87%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%B7%AF/"/>
    <id>https://www.toimc.com/%E5%BC%95%E9%A2%86%E6%9C%AA%E6%9D%A5%EF%BC%8C%E8%B5%B0%E5%87%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%B7%AF/</id>
    <published>2019-12-27T08:36:38.000Z</published>
    <updated>2021-03-02T15:36:20.104Z</updated>
    
    <content type="html"><![CDATA[<p>在今天开始分享之前，我来说一下这一次分享的准备，我开始问了我的很多学生，比如：讲什么选题、大家想听什么、大家觉得学习了前端这么久想听听什么….很多的问题，都集中在一个问题上，这么多的未知，这么多的技术，我该怎么办？这就像是一个哲学问题，问“我从哪里来，我要到哪里去”一样——人生这一躺旅程，如果想不清楚前路，那最最关键的是抓住现在。老师，最多只是引路人是灯塔，自己的路要靠自己的脚走出来。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在今天开始分享之前，我来说一下这一次分享的准备，我开始问了我的很多学生，比如：讲什么选题、大家想听什么、大家觉得学习了前端这么久想听听什么….很多的问题，都集中在一个问题上，这么多的未知，这么多的技术，我该怎么办？这就像是一个哲学问题，问“我从哪里来，我要到哪里去”一样——人生这一躺旅程，如果想不清楚前路，那最最关键的是抓住现在。老师，最多只是引路人是灯塔，自己的路要靠自己的脚走出来。</p><h2 id="一、路在何方"><a href="#一、路在何方" class="headerlink" title="一、路在何方"></a>一、路在何方</h2><p>——前端千变万化，如何不变应万变</p><p>相信大家都有选择技术的一个理由，但是更多是迷茫。对知识的渴望，加上工作的压力，让这种求学的心情变得迫切。每当有同学问我，老师，我该不该学前端、前端难不难、前端怎么学的时候，我都会问他（她）这样一个问题：你喜欢不喜欢技术？</p><p>对于那些模棱两可的人，我会给他们泼冷水，告诉他们：“前端天天都在变化，你会每天坚持学习吗？”“前端不是人人都能高薪，你能接受生活给你的磨砺，忍辱负重的成长吗？”“前端说简单也简单，说难也难，你的目标在哪里，你的高度才会有多高”….</p><p>前端真的是千变万化，前两年还在JQuery，到今年的时候，我问同事，他说现有的项目（React）已经不用了，很少需要用JQ来操作DOM；再前些年，还在用DW、PS切页面，现在还流行吗？不流行了，因为效率不高…一方面技术过时的快，另一方面新技术的出现快，Flutter、WebAssembly、Serverless火爆发展，对前端人的要求在变高，需要学习各种技术，对接不同的角色的人，甚至去充当不同角的人…那么，就要有全面的知识储备与技能。大前端，需要的是宽阔的视野、扩展的能力、基础的技能，同学们不缺的是第三块，而扩展和视野是同学们缺的，也很少去思考的。</p><p>那怎么办？</p><p>在我的课程中说到过一个观念：不推荐大家学习红宝书，不是一定在大厂才有优秀的人。这两点如果没有深刻体会的人，我来举两个例子：你看看你的周围有没有进步非快的人，再看看你下载的那些资料、买过的那些书&amp;视频的进度，你就初步体会这两点的涵义了。学习，是一个延迟满足非常长的事情，需要有一颗平常心来对待每天的学习&amp;工作。</p><p>记住，平常心，三个字。</p><p>有句话大家都听过，“机会是给有准备的人”。这句话，要辩证的来看，这个准备是指心态上的准备，很多技术是可以现学现卖的，这才是核心。举个例子，我给大家来讲课，学习了FCP只用了一周，就上手开始剪了，实践让我获得了大量的“真知”…这种事情在我身上发生了很多次。那些追求极致完美的“处女座”同学们，很多东西在一开始，不用学习的那种的精巧，设计的那么的完美。这其实是人的本性啊，人不是圣人，肯定会犯错。但是，辩证的看，同样的不能一开始全部都马马虎虎，这两个极端都不可取。</p><p>记住，辩证，这两个字。</p><p>路在何方？就像那首歌一样的，路在自己的脚下。有同学就跳跳出来了，说，老师你说了一句废话。我现在即不能说，未来5年，大家来学什么什么就能发大财行大运、XXX技术就能火、XXX能学XXX不能学，适合自己的才是最好的不是吗？我也是一路寻找，走了2年的弯路，才找自己自己的兴趣。生命中，总有那么多的奇迹让我们感动，就像小时候不明白父母的苦，只有自己成为父母，才能感受到。这不就是生命的美妙吗？所以，不要慌，你会明白的，你也会找到自己的方向。单身的人，就像那个属于你的人，也会在不远的地方等待着你一样。</p><p>记住，兴趣，这两个字。</p><p>有了平常心，大家就不会去追逐新的技术，人云亦云了；有了平常心，大家就不会迷茫，知道当下才是最重要的了；有了平常心，大家就不会去攀比，而会扎实的自己每天进步一点点，与自己为“敌”，其乐无比。</p><p>有了辩证的思考，就会看清很多问题的本质，找到属于自己的解决方案。</p><p>有了兴趣，做的自己喜欢事，才是适合自己的。</p><p>前端千变万化的是技术，不变是我们，不变是我们的初心。</p><h2 id="二、对症下药"><a href="#二、对症下药" class="headerlink" title="二、对症下药"></a>二、对症下药</h2><p>——前端开发过程中的痛点，少走弯路，才能事半功倍</p><p>前面我们提了很多心态上的问题，这里就不再赘述。下面，我们除去心态上的问题，我们来谈谈技术。</p><p>大家或多或少的了解一个项目开发的过程，但是，有多少人去思考过，为什么需求分析，讨论来讨论去好长时间；为什么组长在这么安排开发，感觉效率不高啊；为什么大家都在推责任，感觉不要团队的氛围啊….</p><p><strong>一个完整的项目，从项目初期立项到项目交付，会经历：需求分析、详细需求分析、项目开发前准备、项目开发&amp;测试、初验（迭代）终验，这么几个基本的过程。不论内外部项目，都有一个共同点，就是有一个既定的目标。大家的KPI与目标的结果挂钩，那么问题来了，倘若这个目标没有实现，KPI会不会考虑说前端没有问题，就还是给你打个高KPI？倘若这个目标实现的一般般，客户让你们改来改去，KPI考核打了个基本分，客户会不会买单？倘若这个目标实现了，前端贡献一般般，KPI考核也会考虑一点点，但是这个份额会大吗？</strong></p><p>总结一下，有需求分析的问题，有沟通的问题，也有效率问题…</p><p>这些是技术开发过程中的问题，再来谈一谈新人&amp;老人都会面对的问题——面试与择业。</p><p>都说“男怕入错行，女怕嫁错郎”，这句话就是生活的写照啊。在中国，这么物质的社会，还有多少纯洁的感情。在激烈竞争的互联网行业，还有多少蓝海？没有了，红利也还有，但是没有以前那么多了，因为门槛在变低，人工成本一直是企业前进的绊脚石。</p><p>所以，先要养活自己，再去思考更长远的事情。这一点，一定要清楚。</p><p><strong>在企业中，大家要有“主人翁”的心态，现在很多企业都是“摸着石头过河”，也有一些“不要脸的”（会Copy的），那么其实大家学习这种方法又何尝不可呢？再一点，我们很多时候，会少问那一句“为什么”？心中充满着疑问又不想着解决的办法，那就错过了很多学习的机会。比如：项目目标没有完成，可以找找问题的原因，看看下次有没有什么办法规避；客户改来改去需求，可不可以通过一些手法明确下来；团队中，被弱化的前端团队，怎么才能体现自己的价值，是缺少宣传，还是实力不允许？如果是后者，那么，就思考一下是不是效率上有问题，是不是沟通上有问题…这样顺藤摸瓜，就能找到好多答案。</strong></p><p>在找寻“真理”的过程中，肯定不是一蹴而就的，那么就要有“水滴石穿”的精神，不断的摸索着前进。</p><p>每个人的问题可能都不一样，再技艺精湛的厨师，也不能保证，每一道菜都合大家的味口。就像我们小时候会打预防针一样，我们会尽量多的去接触各式各样的“疫苗”（其实就是身体在试错），这样才能“抵御”外界的“侵扰”，对吧？</p><h2 id="三、技术蜕变"><a href="#三、技术蜕变" class="headerlink" title="三、技术蜕变"></a>三、技术蜕变</h2><p>——从前端小白到高阶前端的成长路径</p><p>对于新人来说，我之前问过我的一个同事，我深感认同，大家平时工作中，碰到问题了，最想做的事情，就是找个人一问，或者一搜索，就有现成的代码可以Copy，美滋滋~是吧？</p><p>先把这个情况我们放一话。</p><p>那题外话一下，那大家知道中年危机是怎么来的吗？谁都知道有中年危机，什么35岁程序员的一到坎之类的….说着说着就心态爆炸了，什么年龄大了，干不了了啊；什么精力跟不上，不能熬夜了啊；什么家里事多，身体抗不住了啊… </p><p>但是，我身边那些35岁以上的程序员活的挺好啊，他们身上有一个共同的特点：就是有危机意识。</p><p>再回到上面的情况，如果一直都是Copy别人的“答案”，5年后，加入公司的小白看到了你的解决方案之后，1个月就能上手你写的代码了，然后，老板一看，那个小伙子一个月2K，你一个月10K，是人家的5倍，老板怎么想？</p><p><strong>好，这个时候，我们不要倘若，就来说说我身边的&gt;35岁的程序员。他们一进公司1-2年熟悉公司的业务，快速成长了起来，随着团队人员的增加，他们承担了一部分公司的扩展业务（比如：移动端、测试、后台等）；到了3-5年的时候，他们又开始做效率、制度、标准化的事情；到了6-8年的时候，基本上人人都成为了主管，有自己的小团队，在外面接着大小的活，利用公司的资源，一方面扩展了公司的业务（所以老板睁一支眼，闭一支眼），另一方面，提升了自己的地位（那是根深蒂固的），团队少不了这样的核心人物。再退一步说，即使失业了，他们马上还能找到更好的工作。</strong></p><p>说到这里，大家能明白什么吗？</p><p>都知道跳槽能加薪，那怎么跳，凭什么跳？写了两年的代码，就可以跳到更高的位置？不是的，而且时间久了，马脚也会露出来，不是吗？</p><p>那怎么办？</p><p>这里有给不同的人，接地气的解决方案：</p><p>对于入门前端的同学来说，首先，是摆正自己的心态。从基础的环境、基本的技能、基本的业务入手。</p><p>基础的环境是什么？好多同学，在学习前端的过程中，在环境上吃了大亏，花了很多的时间。</p><p>有的同学就会问，老师不就是浏览器+Nodejs吗？错，现在的前端的要求，已经从静态页面的开发变化了，需要对服务器环境、数据库环境、自动化环境，要会使用。比如：老板说，你把你的代码部署一下吧，你就build了一下，发给了后台，结果，后台那边说，我们的项目运行了xxx目录下，你这里资源加载有问题…</p><p>基本的技能是什么？除了基本的3“剑客”，还需要有IDE使用、NPM加速(除了CNPM，还有Yarn）、真机调试等方面的知识。</p><p>基本的业务是什么？比如登录鉴权、长列表、动态列表、多功能表单…等。这些，我相信，已经有不少的同学买过相应的课程，也能对标自己的工作的实际业务，但是，我想说明一点的，前端与JAVA这类的后端不一样，前端的业务其实很单纯，技术也很单一，不像后台JAVA学一套业务设计适合于一套业务，但是其他的业务需要重新考量与设计。而在前端中，比如Vue框架就可以通吃，各类前台、后台项目。这是前端与后端学习之中，大家需要非常明白的一点——前端不是学的业务场景越多越好，关键是要熟练&amp;了解技术的应用场景。</p><p>这个阶段，需要有一个好的引路人，才能走的事半功倍。</p><p>那么，过了这个阶段（大概会花1-3年），进入到中期之后。不仅大家熟悉了公司、团队的业务，而且有一定的框架使用经验，可以解决实际问题了。那么，就要从效率出发。学习工程化、组件化、接口&amp;后台的知识，为自己的前端之路作后续的铺垫。</p><p>这个阶段是很多同学不喜欢的一个阶段，很痛苦，为什么？因为，首先在思想上就是一道坎。很多前端的同学，觉得前端就是做做页面就好了，很多事情可以交给后台，比如：数据结构不好整理交给后台，下载功能不好做交给后台，接口太难设计交给后台…结果就是后台的兄弟技术突飞猛进，自己一事无成，还在写页面。</p><p>这个阶段，要学习Linux知识，学习框架的原理，去啃平时那些所谓“难啃的骨头”，甚至要去涉及一部分后台的知识，才能打开视野，突破瓶颈。</p><p>人生有很多次选择，但是一次正确的选择，可以决定整个人生的走向。所以，在一开始的时候，就要多去尝试，多去感受这前端的那么多方向，才会找到属于自己的方向。</p><p><strong>任何的质变都是量变的结果，进入到高阶之后。从技术上，应该要达到可以应对不同的业务场景的开发，那么就回到了初始的问题，自己的初心是什么？喜欢技术的，往技术更深的地方走，架构、数据库、自动化&amp;运维；喜欢管理的，往产品经理、项目经理方向走，学习产品规划、需求分析、文档管理，以达到效率的团队推动；喜欢测试的…喜欢UI的…</strong></p><p>同样的，上面的所述的内容，在我们的课程中，也有完整的视频介绍。</p><p>跨过了第三阶段的同学，已经不需要我们的帮助了，我也收到了很多同学的回复，找到了自己心仪的工作，少走了多少弯路；也有我的学生，成为了我的助手，加入了我的团队，一起筑“梦”。</p><h2 id="四、前端大局观"><a href="#四、前端大局观" class="headerlink" title="四、前端大局观"></a>四、前端大局观</h2><p>——从前到端，高薪工作=高价值输出=多端开发</p><p>心灵鸡汤预警….</p><p><strong>我们都想要更好的生活，羡慕别人的同时，又很少看到别人的付出。薪酬是与能力&amp;责任成正比的。</strong></p><p>责任这一点很好理解，即份内的事情要做好做漂亮。做好是基本的，做漂亮是很难的。我们都知道那个“梗”，两个人被安排去买土豆，A说土豆买不到了，B说土豆买不到了，但是其他的菜是xxx价，从我们日常的分析上来看….</p><p>多从领导者的角度出发去看问题，就会发现好多不一样的处事结果。</p><p>再回到前端，做技术的能力是指什么？学习能力？沟通能力？理解能力？…都对，我觉得最重要的是解决问题的能力，包括了上面的其他的能力。这一点，又感觉很空，但是实则是“没有人，天生就会解决问题，都是后天培养出来的”。主动的担责，才会有更多机会培养自己的能力。</p><p>随着技术的演进，前端的边界已经变得非常的模糊了。那么，自己的“一亩三分地”，可能在不久的将来就被瓜分走了，企业会去留住那些成倍价值的人才，那如何去增加自己的价值？</p><p>前端，“前”代表着设计、需求、交互、产品…这些用户侧的能看得见摸得着的，“端”代表着接口、测试、自动化、运维、后台….大家很多时候忽略的部分。我们的价值，就要像一把尖刀一样，深深地插入这些痛点的地方、这些被忽略的地方…</p><p><strong>有了一个对“端的”的认识之后，可以去设置自己近期与远期的目标，然后动手做起来。有了知识了填补，那个“短板”补齐后的水桶，才能接满水。具体的做法：1. 可以思考团队效率开发，做一些技术导入；2. 可以主动去承担需求分析的工作，熟悉业务、接触客户，锻炼文字和文档能力；3. 可以参与一些“端”的开发，无论是后台还是跨端应用，把自己的定位设置的更高一点。…</strong></p><p>最后，提一点。我们的价值，不要从牺牲自己的时间上（加班中）体现出来，要把自己的思考与行动结合起来，变成有价值的工作。告别平凡（重复和单调），其实真的很简单，从一件件小事做起，改变自己的状态，才能堆砌出“万丈高楼”。</p><p>当你不再需要站在“巨人”肩膀上的时候，当你成为了“巨人”，你的薪水还会低吗？</p><h2 id="五、挑战即是机遇"><a href="#五、挑战即是机遇" class="headerlink" title="五、挑战即是机遇"></a>五、挑战即是机遇</h2><p>——诱惑很多，挑战很大，拒绝说“不”</p><p>为什么说2019年是互联网最差的一年？因为，真的有很多人失业。为什么说未来的10年是互联网的寒冬？因为，技术的门槛越来越低了，人工的成本在下降。</p><p><strong>前端在未来的几年的发展，有几点是确定了的。第一，TypeScript 的大规模普及和流行，TypeScript 的普及会反向推动 ES6（ECMAScript 6.0）的进步和发展；第二，跨端能力进一步增强；比如小程序，不断涌现出各种转译实现，例如小程序、移动端的Flutter、桌面端的Electron（已经7.x版本了，短短2年时间）等；第三，微服务、组件化、人工智能，其实都是在解决效率问题，大小团队的短板都需要提效，就是单人创造的价值要更多，那么反过来就对性能、高可用有了更高的要求。…</strong></p><p>这些都是未来的必定的挑战，站在了风口浪尖，只有很出手的人，才能把握先机。</p><p>企业越来越喜欢那些复合型的人才了，为什么？因为经济下行的大趋势下，必须要降成本，以前2个人干1个人的活，现在1个人干3个人的活，那么必然会有惨烈的竞争，这个社会就是这么弱肉强食，企业的根本要是生存，不是做公益。</p><p>前端这个行业又就是一个非常特殊的行业，前端工程师可以成为产品经理、可以成为UI设计（别小瞧设计，我一个UI设计朋友玩玩做做，通过做兼职，在外玩了1年）、可以成为项目经理…还可以自己出来做产品。因为前端可以接触到各式各样的角色，不要当这些是无用功，要把自己面对的每一次挑战，都当成是一次机会，一次去感受不一样的技术面的机会，一次去感觉不一样的业务的机会，一次去感觉不一样开发的机会…</p><p>所以，下次有机会的时候，请不要再说“我不懂运维”，“我不会测试”，“我写不好文档”，“我不会总结”…也不要说“我年龄大了”，要说“我可以学”，“我来试试”，“我尽量来做”…</p><p>时间是我们最宝贵的财富，但是心境是比时间更难能可贵的。有的人才20出头就已经看淡了生活，有的人30岁了还没有人生的方向，也有的人40岁了还在转行在学习，有的人50岁了还在写着代码….生活，是由一些平凡的事情所组成的，我们就要做这些平凡的事情的“编织者”，你的人生由你来书写。</p><p>最后，记住两句话。</p><p><strong>活在当下，珍惜时间。</strong></p><p><strong>不忘初心，方得始终。</strong></p><p>课程公众号：</p><img title="toimc技术社区" alt="图片裂了，联系：admin@wayearn.com" class="lazyload" width="300" src="https://static.www.toimc.com/blog/img/2019/引领未来，走出自己的前端之路/qrcode.jpg?watermark/2/text/VG9pbWPlh7rlk4E=/fontsize/300"><p>课程链接：<a href="https://class.imooc.com/sale/webfullstack?mc_marking=1eb5ce0be2ada8da4a6387b391f00b92&mc_channel=syzcjj1">慕课网职场进阶成长系列课-大前端</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在今天开始分享之前，我来说一下这一次分享的准备，我开始问了我的很多学生，比如：讲什么选题、大家想听什么、大家觉得学习了前端这么久想听听什么….很多的问题，都集中在一个问题上，这么多的未知，这么多的技术，我该怎么办？这就像是一个哲学问题，问“我从哪里来，我要到哪里去”一样——人生这一躺旅程，如果想不清楚前路，那最最关键的是抓住现在。老师，最多只是引路人是灯塔，自己的路要靠自己的脚走出来。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用harbor搭建私有docker仓库</title>
    <link href="https://www.toimc.com/%E4%BD%BF%E7%94%A8harbor%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89docker%E4%BB%93%E5%BA%93/"/>
    <id>https://www.toimc.com/%E4%BD%BF%E7%94%A8harbor%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89docker%E4%BB%93%E5%BA%93/</id>
    <published>2019-04-21T03:17:39.000Z</published>
    <updated>2021-03-12T03:40:01.749Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴们，想不想自己建立自己的 docker 私库。本篇介绍了什么是 Harbor，如何安装。来，动起手来。</p><p>本篇介绍了使用官方在线/离线安装包，进行 Harbor 的安装的过程。</p><span id="more"></span><h2 id="什么是-Harbor"><a href="#什么是-Harbor" class="headerlink" title="什么是 Harbor?"></a>什么是 Harbor?</h2><blockquote><p>Harbor——Manage and serve container images in a secure environment.</p></blockquote><p>这是关于 Harbor 的官方介绍，用来管理与服务容器，说白了就是私仓。</p><p>Harbor 是一个开源的云容器仓库，用于存储、签名和扫描容器映像以查找漏洞。</p><p>Harbor 通过提供信任、合规性、性能和互操作性来解决容器的共性问题。它填补了无法使用公有云、基于云容器或者是想获得跨云的一致体验的企业们和应用程序之间的空白。</p><p>链接：<a href="https://goharbor.io/">Harbor 官网</a></p><h2 id="安装-Harbor"><a href="#安装-Harbor" class="headerlink" title="安装 Harbor"></a>安装 Harbor</h2><h3 id="安装方法简介"><a href="#安装方法简介" class="headerlink" title="安装方法简介"></a>安装方法简介</h3><ul><li><p>在线安装方式</p><p>主要是从 Docker Hub 下载 Harbor 镜像，所以这种安装方式，对于空间的要求非常小。</p></li><li><p>离线安装方式</p><p>当没有网络的时候，可以使用这种安装方法，离线包里面有预打包的容器，所以比较大。</p></li><li><p>Kubernetes 安装方式</p><p>需要<strong>Kubernetes v1.6.5</strong> and <strong>Harbor v1.2.0</strong>，参考：<a href="https://github.com/goharbor/harbor/blob/master/docs/kubernetes_deployment.md">Integration with Kubernetes</a></p></li></ul><h3 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h3><table><thead><tr><th>资源</th><th>最小配置</th><th>描述</th></tr></thead><tbody><tr><td>CPU</td><td>&gt;2 CPU</td><td>4 CPU 最好</td></tr><tr><td>Mem(内存)</td><td>&gt;4GB</td><td>8GB 最好</td></tr><tr><td>Disk(硬盘)</td><td>&gt;40GB</td><td>160GB 最好</td></tr></tbody></table><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><table><thead><tr><th>软件环境</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>Python</td><td>&gt;2.7</td><td>有一些 Linux 发行版是没有默认安装 Python 的，需要自己手动安装</td></tr><tr><td>Docker engine</td><td>&gt;1.10</td><td>安装 Docker，请参考我们的另一个博文：<a href="https://www.toimc.com/docker%E5%85%A5%E9%97%A8%E4%B9%8B%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/">Docker 入门之安装教程</a>；官方教程：<a href="https://docs.docker.com/engine/installation/">Install Docker CE</a></td></tr><tr><td>Docker Compose</td><td>&gt;1.6.0</td><td>请参考安装教程：<a href="https://www.toimc.com/docker%E5%85%A5%E9%97%A8%E4%B9%8B%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/#Docker-compose%E9%9B%86%E5%90%88%E5%91%BD%E4%BB%A4">docker-compose 命令安装方法</a>；官方教程：<a href="https://docs.docker.com/compose/install/">Install Docker Compose</a></td></tr><tr><td>Openssl</td><td>lastest</td><td>用于产生证书与密钥(一般 Linux 发行版会默认安装)</td></tr></tbody></table><h3 id="网络端口"><a href="#网络端口" class="headerlink" title="网络端口"></a>网络端口</h3><table><thead><tr><th>端口</th><th>协议</th><th>描述</th></tr></thead><tbody><tr><td>443</td><td>HTTPS</td><td>Harbor portal 和 core API 将会使用 443 接口用于 HTTPS 协议</td></tr><tr><td>4443</td><td>HTTPS</td><td>当 Notray 使用时，Harbor 使用这个端口用于 Docker 中可信任内容的传输。</td></tr><tr><td>80</td><td>HTTP</td><td>Harbor portal 和 core API 将会使用 80 接口用于 HTTP 协议</td></tr></tbody></table><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>基本的安装步骤</p><ul><li>下载安装包，在<a href="https://github.com/goharbor/harbor/releases">release</a>页面进行下载</li><li>配置<code>harbor.cfg</code></li><li>运行<code>install.sh</code></li></ul></li><li><p>使用如下命令进行解压</p><p>Online installer:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvf harbor-online-installer-&lt;<span class="keyword">version</span>&gt;<span class="string">.tgz</span></span><br></pre></td></tr></table></figure><p>Offline installer:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvf harbor-offline-installer-&lt;<span class="keyword">version</span>&gt;<span class="string">.tgz</span></span><br></pre></td></tr></table></figure></li><li><p>配置 Harbor</p><ul><li>Required parameters</li><li>Optional parameters</li></ul></li></ol><p><strong>其中，Required parameters 有：</strong></p><ul><li><p>hostname：使用 ip 或者域名，切忌使用<code>localhost</code>或者<code>127.0.0.1</code></p></li><li><p>ui_url_protocol：默认为<code>http</code>协议（可选<code>https</code>或者<code>http</code>），如果需要配置<code>SSL</code>证书，请参考<a href="https://github.com/goharbor/harbor/blob/master/docs/configure_https.md">HTTPS 配置</a></p></li><li><p>db_password：数据库 PostgreSQL 的 root 密码</p></li><li><p>max_job_workers：默认为<code>10</code>，根据现有的任务数量需要进行更改，每个任务会占用<code>network/CPU/IO</code>资源，所以分配了之后注意观察。</p></li><li><p>customize_crt：默认为<code>on</code>，可以设置成<code>off</code>。harbor 会自动生成证书与密钥对，如果需要自己生成，请参考：<a href="https://github.com/goharbor/harbor/blob/master/docs/customize_token_service.md">Customize Harbor token service with your key and certificate</a></p></li><li><p>ssl_cert：SSL 证书路径，只有当设置成 https 生效。</p></li><li><p>ssl_cert_key：SSL 密钥，同上。</p></li><li><p>secretkey_path：用于加密或者解密远程仓库的密钥路径(去访问其他仓库使用的密钥)</p></li><li><p>log_rotate_count：如果设置成<code>0</code>，则老旧的日志文件就会被清除掉，而不是进行滚动增加。</p></li><li><p>log_rotate_size：滚动日志的大小，默认单位是<code>kb</code>，可以设置成<code>100M</code>或者是<code>100G</code></p></li><li><p>http_proxy：http 代理路径</p></li><li><p>https_proxy：https 代理</p></li><li><p>no_proxy：不需要代理的地址或者域名，如：<code>127.0.0.1</code></p></li></ul><blockquote><p>使用<code>vi</code>命令对<code>harbor.cfg</code>文件进行编辑</p></blockquote><p><strong>其中，Optional parameters 有：</strong></p><ul><li><p>Email settings</p><p>参考如下配置：</p><ul><li>email_server = smtp.mydomain.com</li><li>email_server_port = 25</li><li>email_identity =</li><li>email_username = <a href="mailto:sample_admin@mydomain.com">sample_admin@mydomain.com</a></li><li>email_password = abc</li><li>email_from = admin <a href="mailto:sample_admin@mydomain.com">sample_admin@mydomain.com</a></li><li>email_ssl = false</li><li>email_insecure = false</li></ul></li><li><p>harbor_admin_password：管理员密码</p></li><li><p>auth_mode：默认是<code>db_auth</code>，可选<code>ldap_auth</code>或者<code>db_auth</code></p><blockquote><p>重要提示：当从已有的 Harbor 进行升级时，要确保<code>auth_mode</code>与<code>harbor.cfg</code>中的配置是一样的。</p></blockquote></li><li><p>ldap_url：LDAP 入口地址：e.g.<code>ldaps://ldap.mydomain.com</code>，只有<code>ldap_auth</code>模式下才有效</p></li><li><p>ldap_searchdn：DN 用户，e.g. <code>uid=admin,ou=people,dc=mydomain,dc=com</code></p></li><li><p>ldap_search_pwd：搜索用户的密码</p></li><li><p>ldap_basedn：基础用户，e.g. <code>ou=people,dc=mydomain,dc=com</code></p></li><li><p>ldap_filter：搜索过滤，e.g. <code>(objectClass=person)</code></p></li><li><p>ldap_uid：用于在搜索的时候，对用于进行匹配：可以是 uid, cn, email 或者是其他属性。</p></li><li><p>ldap_scope：搜索的范围：0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE. 默认是 2.</p></li><li><p>ldap_timeout：超时时长，默认是 5.</p></li><li><p>ldap_verify_cert：是否从 LDAP 服务器进行认证，默认是 true.</p></li><li><p>ldap_group_basedn：基础的搜索组， e.g. <code>ou=group,dc=mydomain,dc=com</code></p></li><li><p>ldap_group_filter：组过滤</p></li><li><p>ldap_group_gid：组属性，如 cn, name</p></li><li><p>ldap_group_scope：搜索的范围：0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE.默认是 2.</p></li><li><p>self_registration： (<strong>on</strong> or <strong>off</strong>. Default is <strong>on</strong>) 是否允许自注册，一般来说<code>auth_mode</code>被设置成<code>ldap_auth</code>模式的时候，自注册是被关闭的。</p></li><li><p>token_expiration：默认的 token 过期时长，默认 30 分钟。</p></li><li><p>project_creation_restriction：设置哪些用户可以创建项目，默认是允许所有的用户进行创建，当设置成<code>adminonly</code>时，只允许管理员进行创建。</p></li></ul><p>以下是示例配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Configuration file of Harbor</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Configuration file of Harbor</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">This attribute is <span class="keyword">for</span> migrator to detect the version of the .cfg file, DO NOT MODIFY!</span></span><br><span class="line">_version = 1.5.0</span><br><span class="line"><span class="meta">#</span><span class="bash">The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname = test.wayearn.cn</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The protocol <span class="keyword">for</span> accessing the UI and token/notification service, by default it is http.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">It can be <span class="built_in">set</span> to https <span class="keyword">if</span> ssl is enabled on nginx.</span></span><br><span class="line">ui_url_protocol = https</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Maximum number of job workers <span class="keyword">in</span> job service</span></span><br><span class="line">max_job_workers = 50</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Determine whether or not to generate certificate <span class="keyword">for</span> the registry<span class="string">&#x27;s token.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">If the value is on, the prepare script creates new root cert and private key</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">for</span> generating token to access the registry. If the value is off the default key/cert will be used.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">This flag also controls the creation of the notary signer<span class="string">&#x27;s cert.</span></span></span><br><span class="line">customize_crt = off</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The path of cert and key files <span class="keyword">for</span> nginx, they are applied only the protocol is <span class="built_in">set</span> to https</span></span><br><span class="line">ssl_cert = /home/ssh/fullchain.cer</span><br><span class="line">ssl_cert_key = /home/ssh/wayearn.cn.key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The path of secretkey storage</span></span><br><span class="line">secretkey_path = /data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Admiral<span class="string">&#x27;s url, comment this attribute, or set its value to NA when Harbor is standalone</span></span></span><br><span class="line">admiral_url = NA</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Log files are rotated log_rotate_count <span class="built_in">times</span> before being removed. If count is 0, old versions are removed rather than rotated.</span></span><br><span class="line">log_rotate_count = 50</span><br><span class="line"><span class="meta">#</span><span class="bash">Log files are rotated only <span class="keyword">if</span> they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be <span class="keyword">in</span> kilobytes.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">If the M is used, the size is <span class="keyword">in</span> megabytes, and <span class="keyword">if</span> G is used, the size is <span class="keyword">in</span> gigabytes. So size 100, size 100k, size 100M and size 100G</span></span><br><span class="line"><span class="meta">#</span><span class="bash">are all valid.</span></span><br><span class="line">log_rotate_size = 200M</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Config http proxy <span class="keyword">for</span> Clair, e.g. http://my.proxy.com:3128</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Clair doesn<span class="string">&#x27;t need to connect to harbor ui container via http proxy.</span></span></span><br><span class="line">http_proxy = socks5://192.168.4.250:2080</span><br><span class="line">https_proxy = socks5://192.168.4.250:2080</span><br><span class="line">no_proxy = 127.0.0.1,localhost,ui</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">NOTES: The properties between BEGIN INITIAL PROPERTIES and END INITIAL PROPERTIES</span></span><br><span class="line"><span class="meta">#</span><span class="bash">only take effect <span class="keyword">in</span> the first boot, the subsequent changes of these properties</span></span><br><span class="line"><span class="meta">#</span><span class="bash">should be performed on web ui</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">************************BEGIN INITIAL PROPERTIES************************</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Email account settings <span class="keyword">for</span> sending out password resetting emails.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Email server uses the given username and password to authenticate on TLS connections to host and act as identity.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Identity left blank to act as username.</span></span><br><span class="line">email_identity =</span><br><span class="line"></span><br><span class="line">email_server = email-smtp.us-east-1.amazonaws.com</span><br><span class="line">email_server_port = 587</span><br><span class="line">email_username = AKIAJ3A3D3R5NMUUEBJA</span><br><span class="line">email_password = Amz5jvLaeq13VLk5j4QtmTRJhZ/AnxEnmuHUB4DsQ+op</span><br><span class="line">email_from = liwei &lt;admin@wayearn.com&gt;</span><br><span class="line">email_ssl = true</span><br><span class="line">email_insecure = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#The initial password of Harbor admin, only works for the first time when Harbor starts.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">It has no effect after the first launch of Harbor.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Change the admin password from UI after launching Harbor.</span></span><br><span class="line">harbor_admin_password = 2239hOb2tVgOSwoW123FDs23vs324hmuy7667ghfbv32FGDS43</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#By default the auth mode is db_auth, i.e. the credentials are stored in a local database.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Set it to ldap_auth <span class="keyword">if</span> you want to verify a user<span class="string">&#x27;s credentials against an LDAP server.</span></span></span><br><span class="line">auth_mode = db_auth</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The url <span class="keyword">for</span> an ldap endpoint.</span></span><br><span class="line">ldap_url = ldaps://ldap.mydomain.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">A user<span class="string">&#x27;s DN who has the permission to search the LDAP/AD server.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">If your LDAP/AD server does not support anonymous search, you should configure this DN and ldap_search_pwd.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">the password of the ldap_searchdn</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ldap_search_pwd = password</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The base DN from <span class="built_in">which</span> to look up a user <span class="keyword">in</span> LDAP/AD</span></span><br><span class="line">ldap_basedn = ou=people,dc=mydomain,dc=com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Search filter <span class="keyword">for</span> LDAP/AD, make sure the syntax of the filter is correct.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ldap_filter = (objectClass=person)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The attribute used <span class="keyword">in</span> a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes depending on your LDAP/AD</span></span><br><span class="line">ldap_uid = uid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">the scope to search <span class="keyword">for</span> users, 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE</span></span><br><span class="line">ldap_scope = 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Timeout (<span class="keyword">in</span> seconds)  when connecting to an LDAP Server. The default value (and most reasonable) is 5 seconds.</span></span><br><span class="line">ldap_timeout = 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Verify certificate from LDAP server</span></span><br><span class="line">ldap_verify_cert = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The base dn from <span class="built_in">which</span> to lookup a group <span class="keyword">in</span> LDAP/AD</span></span><br><span class="line">ldap_group_basedn = ou=group,dc=mydomain,dc=com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">filter to search LDAP/AD group</span></span><br><span class="line">ldap_group_filter = objectclass=group</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The attribute used to name a LDAP/AD group, it could be cn, name</span></span><br><span class="line">ldap_group_gid = cn</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The scope to search <span class="keyword">for</span> ldap groups. 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE</span></span><br><span class="line">ldap_group_scope = 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Turn on or off the self-registration feature</span></span><br><span class="line">self_registration = on</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The expiration time (<span class="keyword">in</span> minute) of token created by token service, default is 30 minutes</span></span><br><span class="line">token_expiration = 30</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">The flag to control what users have permission to create projects</span></span><br><span class="line"><span class="meta">#</span><span class="bash">The default value <span class="string">&quot;everyone&quot;</span> allows everyone to creates a project.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Set to <span class="string">&quot;adminonly&quot;</span> so that only admin user can create project.</span></span><br><span class="line">project_creation_restriction = everyone</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">************************END INITIAL PROPERTIES************************</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##### #Harbor DB configuration section#######</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The address of the Harbor database. Only need to change when using external db.</span></span><br><span class="line"></span><br><span class="line">db_host = mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The password <span class="keyword">for</span> the root user of Harbor DB. Change this before any production use.</span></span><br><span class="line"></span><br><span class="line">db_password = root123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The port of Harbor database host</span></span><br><span class="line"></span><br><span class="line">db_port = 3306</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The user name of Harbor database</span></span><br><span class="line"></span><br><span class="line">db_user = root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### End of Harbor DB configuration#######</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The redis server address. Only needed <span class="keyword">in</span> HA installation.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> address:port[,weight,password,db_index]</span></span><br><span class="line"></span><br><span class="line">redis_url = redis:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##### ####Clair DB configuration############</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Clair DB host address. Only change it when using an exteral DB.</span></span><br><span class="line"></span><br><span class="line">clair_db_host = postgres</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The password of the Clair<span class="string">&#x27;s postgres database. Only effective when Harbor is deployed with Clair.</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Please update it before deployment. Subsequent update will cause Clair<span class="string">&#x27;s API server and Harbor unable to access Clair&#x27;</span>s database.</span></span><br><span class="line"></span><br><span class="line">clair_db_password = password</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Clair DB connect port</span></span><br><span class="line"></span><br><span class="line">clair_db_port = 5432</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Clair DB username</span></span><br><span class="line"></span><br><span class="line">clair_db_username = postgres</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Clair default database</span></span><br><span class="line"></span><br><span class="line">clair_db = postgres</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##### ####End of Clair DB configuration############</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following attributes only need to be <span class="built_in">set</span> when auth mode is uaa_auth</span></span><br><span class="line"></span><br><span class="line">uaa_endpoint = uaa.mydomain.org</span><br><span class="line">uaa_clientid = id</span><br><span class="line">uaa_clientsecret = secret</span><br><span class="line">uaa_verify_cert = true</span><br><span class="line">uaa_ca_cert = /path/to/ca.pem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Docker Registry setting</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> registry_storage_provider can be: filesystem, s3, gcs, azure, etc.</span></span><br><span class="line"></span><br><span class="line">registry_storage_provider_name = filesystem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> registry_storage_provider_config is a comma separated <span class="string">&quot;key: value&quot;</span> pairs, e.g. <span class="string">&quot;key1: value, key2: value2&quot;</span>.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Refer to https://docs.docker.com/registry/configuration/<span class="comment">#storage for all available configuration.</span></span></span><br><span class="line"></span><br><span class="line">registry_storage_provider_config =</span><br></pre></td></tr></table></figure><ol start="4"><li><p>配置完成之后，在当前的解压缩的目录下，运行<code>sudo ./install.sh</code></p><p>是否可以在解压缩的目录下找到相应的文件<code>install.sh</code>？如果找不到，可以使用<code>find</code>命令或者是<code>ls</code>命令。</p><p>安装完成之后，就可以访问之前设置的域名或者 IP 地址了，比如上例中的<code>test.toimc.com</code></p></li></ol><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><p>如何推送镜像？</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login test.toimc.com</span><br><span class="line">docker <span class="keyword">push</span> test.toimc.com<span class="regexp">/myproject/my</span>repo:mytag</span><br></pre></td></tr></table></figure></li><li><p>如何申请证书，如何设置 SSL？</p><p>有两个先决条件：(1)需要有一个域名； (2)使用 acme 或者 caddy 这种服务进行申请证书。</p></li><li><p>安装 Notary, 安装 Clair, 安装 chart repository service</p><p>安装 Notary，使用如下命令：<code>sudo ./install.sh --with-notary</code></p><p>安装 Clair，使用如下命令：<code>sudo ./install.sh --with-clair</code></p><p>安装 Chart repository service，使用如下命令：<code>sudo ./install.sh --with-chartmuseum</code></p><p>PS： 可以这样使用：<code>sudo ./install.sh --with-notary --with-clair --with-chartmuseum</code></p></li><li><p>Harbor 生命周期的管理：</p><p>直接使用<code>docker-compose</code>管理命令进行管理(PS:需要<code>cd</code>到之前的 Harbor 的解压目录，即<code>install</code>目录)</p><p>停止 Harbor:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> sudo docker-compose stop</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> nginx              ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> harbor-portal      ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> harbor-jobservice  ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> harbor-core        ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> registry           ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> redis              ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> registryctl        ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> harbor-db          ... done</span><br><span class="line"><span class="function"><span class="title">Stopping</span></span> harbor-<span class="built_in">log</span>         ... done</span><br></pre></td></tr></table></figure><p>重启 Harbor：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> sudo docker-compose start</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> <span class="built_in">log</span>         ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> registry    ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> registryctl ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> postgresql  ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> core        ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> portal      ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> redis       ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> jobservice  ... done</span><br><span class="line"><span class="function"><span class="title">Starting</span></span> proxy       ... done</span><br></pre></td></tr></table></figure><p>当修改了 Harbor 的配置文件后，需要使用如下的方式更新镜像：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo docker-compose down -v</span><br><span class="line"><span class="variable">$ </span>vim harbor.cfg</span><br><span class="line"><span class="variable">$ </span>sudo prepare</span><br><span class="line"><span class="variable">$ </span>sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>删除 Harbor 镜像，但是保留文件系统的做法：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo docker-compose down -v</span><br></pre></td></tr></table></figure><p>需要全部删除时(包括镜像、文件、仓库)——重装需要/卸载需要</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-r</span> /<span class="keyword">data</span>/database</span><br><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-r</span> /<span class="keyword">data</span>/registry</span><br></pre></td></tr></table></figure></li><li><p>日志文件路径：<code>/var/log/harbor</code></p></li><li><p>自定义端口：</p><ul><li>修改<code>docker-compose.yml</code><br>修改”80”端口到一个指定的用户端口, e.g. 8888:80.</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">proxy:</span></span><br><span class="line"><span class="symbol">    image:</span> goharbor/nginx-photon:v1<span class="number">.6</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">    container_name:</span> nginx</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - .<span class="meta-keyword">/common/</span>config/nginx:<span class="meta-keyword">/etc/</span>nginx:z</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">8888</span>:<span class="number">80</span></span><br><span class="line">      - <span class="number">443</span>:<span class="number">443</span></span><br><span class="line"><span class="symbol">    depends_on:</span></span><br><span class="line">      - postgresql</span><br><span class="line">      - registry</span><br><span class="line">      - core</span><br><span class="line">      - portal</span><br><span class="line">      - log</span><br><span class="line"><span class="symbol">    logging:</span></span><br><span class="line"><span class="symbol">      driver:</span> <span class="string">&quot;syslog&quot;</span></span><br><span class="line"><span class="symbol">      options:</span></span><br><span class="line">        syslog-address: <span class="string">&quot;tcp://127.0.0.1:1514&quot;</span></span><br><span class="line"><span class="symbol">        tag:</span> <span class="string">&quot;proxy&quot;</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>harbor.cfg</code>文件中的 hostname 属性：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hostname</span> = <span class="number">192.168</span>.<span class="number">0.2</span>:<span class="number">8888</span></span><br></pre></td></tr></table></figure><ul><li>参考上面的管理 harbor 的生命周期的内容，对 Harbor 进行更新。</li></ul><p><strong>同理，对于 HTTPS 协议，参考：</strong></p><ul><li>打开 HTTPS 协议，并配置 SSL 证书：参考<a href="https://github.com/goharbor/harbor/blob/master/docs/configure_https.md">guide</a>.</li><li>修改<code>docker-compose.yml</code><br>修改”443” 端口为用户自定义端口, e.g. 8888:443.</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">proxy:</span></span><br><span class="line"><span class="symbol">    image:</span> goharbor/nginx-photon:v1<span class="number">.6</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">    container_name:</span> nginx</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - .<span class="meta-keyword">/common/</span>config/nginx:<span class="meta-keyword">/etc/</span>nginx:z</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="number">80</span>:<span class="number">80</span></span><br><span class="line">      - <span class="number">8888</span>:<span class="number">443</span></span><br><span class="line"><span class="symbol">    depends_on:</span></span><br><span class="line">      - postgresql</span><br><span class="line">      - registry</span><br><span class="line">      - core</span><br><span class="line">      - portal</span><br><span class="line">      - log</span><br><span class="line"><span class="symbol">    logging:</span></span><br><span class="line"><span class="symbol">      driver:</span> <span class="string">&quot;syslog&quot;</span></span><br><span class="line"><span class="symbol">      options:</span></span><br><span class="line">        syslog-address: <span class="string">&quot;tcp://127.0.0.1:1514&quot;</span></span><br><span class="line"><span class="symbol">        tag:</span> <span class="string">&quot;proxy&quot;</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>harbor.cfg</code>文件中的 hostname 属性：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hostname</span> = <span class="number">192.168</span>.<span class="number">0.2</span>:<span class="number">8888</span></span><br></pre></td></tr></table></figure><ul><li>参考上面的管理 harbor 的生命周期的内容，对 Harbor 进行更新。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;小伙伴们，想不想自己建立自己的 docker 私库。本篇介绍了什么是 Harbor，如何安装。来，动起手来。&lt;/p&gt;
&lt;p&gt;本篇介绍了使用官方在线/离线安装包，进行 Harbor 的安装的过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://www.toimc.com/tags/Docker/"/>
    
  </entry>
  
</feed>
